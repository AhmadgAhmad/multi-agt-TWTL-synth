10/07/2019 09:39:54 PM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
10/07/2019 09:39:54 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
10/07/2019 09:39:54 PM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
10/07/2019 09:39:54 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
10/07/2019 09:39:54 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
10/07/2019 09:39:54 PM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
10/07/2019 09:39:54 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
10/07/2019 09:39:54 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

10/07/2019 09:39:54 PM DEBUG [spec] No of nodes: 7
10/07/2019 09:39:54 PM DEBUG [spec] No of edges: 12
10/07/2019 09:39:54 PM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['G', 'N'])
10/07/2019 09:39:54 PM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
10/07/2019 09:39:54 PM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['G', 'N'])
10/07/2019 09:39:54 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 G )
10/07/2019 09:39:54 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 G ) 0 7 )
10/07/2019 09:39:54 PM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 G]^[0, 7]
10/07/2019 09:39:54 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 G ) 0 7 ) )
Directed: True
Multi: False
Props: {'G': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'})]
		
10/07/2019 09:39:54 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

10/07/2019 09:39:54 PM DEBUG [spec] No of nodes: 7
10/07/2019 09:39:54 PM DEBUG [spec] No of edges: 12
10/07/2019 09:39:54 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
10/07/2019 09:39:54 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
10/07/2019 09:39:54 PM INFO Constructing product automaton with infinity DFA!
10/07/2019 09:39:54 PM INFO Constructing product automaton with infinity DFA!
10/07/2019 09:39:54 PM INFO Product automaton size is: (33, 121)
10/07/2019 09:39:54 PM INFO Constructing product automaton with infinity DFA!
10/07/2019 09:39:54 PM INFO Product automaton size is: (33, 122)
10/07/2019 09:59:56 PM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
10/07/2019 09:59:56 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
10/07/2019 09:59:56 PM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
10/07/2019 09:59:56 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
10/07/2019 09:59:56 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
10/07/2019 09:59:56 PM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
10/07/2019 09:59:56 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
10/07/2019 09:59:56 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

10/07/2019 09:59:56 PM DEBUG [spec] No of nodes: 7
10/07/2019 09:59:56 PM DEBUG [spec] No of edges: 12
10/07/2019 09:59:56 PM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['G', 'N'])
10/07/2019 09:59:56 PM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
10/07/2019 09:59:56 PM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['G', 'N'])
10/07/2019 09:59:56 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 G )
10/07/2019 09:59:56 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 G ) 0 7 )
10/07/2019 09:59:56 PM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 G]^[0, 7]
10/07/2019 09:59:56 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 G ) 0 7 ) )
Directed: True
Multi: False
Props: {'G': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'})]
		
10/07/2019 09:59:56 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

10/07/2019 09:59:56 PM DEBUG [spec] No of nodes: 7
10/07/2019 09:59:56 PM DEBUG [spec] No of edges: 12
10/07/2019 09:59:56 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
10/07/2019 09:59:56 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
10/07/2019 09:59:56 PM INFO Constructing product automaton with infinity DFA!
10/07/2019 09:59:56 PM INFO Constructing product automaton with infinity DFA!
10/07/2019 09:59:56 PM INFO Product automaton size is: (33, 121)
10/07/2019 09:59:56 PM INFO Constructing product automaton with infinity DFA!
10/07/2019 09:59:56 PM INFO Product automaton size is: (33, 122)
10/07/2019 10:25:41 PM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
10/07/2019 10:25:41 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
10/07/2019 10:25:41 PM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
10/07/2019 10:25:41 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
10/07/2019 10:25:41 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
10/07/2019 10:25:41 PM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
10/07/2019 10:25:41 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
10/07/2019 10:25:41 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

10/07/2019 10:25:41 PM DEBUG [spec] No of nodes: 7
10/07/2019 10:25:41 PM DEBUG [spec] No of edges: 12
10/07/2019 10:25:41 PM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['G', 'N'])
10/07/2019 10:25:41 PM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
10/07/2019 10:25:41 PM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['G', 'N'])
10/07/2019 10:25:41 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 G )
10/07/2019 10:25:41 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 G ) 0 7 )
10/07/2019 10:25:41 PM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 G]^[0, 7]
10/07/2019 10:25:41 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 G ) 0 7 ) )
Directed: True
Multi: False
Props: {'G': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'})]
		
10/07/2019 10:25:41 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

10/07/2019 10:25:41 PM DEBUG [spec] No of nodes: 7
10/07/2019 10:25:41 PM DEBUG [spec] No of edges: 12
10/07/2019 10:25:41 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
10/07/2019 10:25:41 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
10/07/2019 10:25:41 PM INFO Constructing product automaton with infinity DFA!
10/07/2019 10:25:41 PM INFO Constructing product automaton with infinity DFA!
10/07/2019 10:25:41 PM INFO Product automaton size is: (33, 121)
10/07/2019 10:25:41 PM INFO Constructing product automaton with infinity DFA!
10/07/2019 10:25:41 PM INFO Product automaton size is: (33, 122)
10/07/2019 10:35:42 PM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
10/07/2019 10:35:42 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
10/07/2019 10:35:42 PM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
10/07/2019 10:35:42 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
10/07/2019 10:35:42 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
10/07/2019 10:35:42 PM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
10/07/2019 10:35:42 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
10/07/2019 10:35:42 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

10/07/2019 10:35:42 PM DEBUG [spec] No of nodes: 7
10/07/2019 10:35:42 PM DEBUG [spec] No of edges: 12
10/07/2019 10:35:42 PM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['G', 'N'])
10/07/2019 10:35:42 PM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
10/07/2019 10:35:42 PM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['G', 'N'])
10/07/2019 10:35:42 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 G )
10/07/2019 10:35:42 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 G ) 0 7 )
10/07/2019 10:35:42 PM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 G]^[0, 7]
10/07/2019 10:35:42 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 G ) 0 7 ) )
Directed: True
Multi: False
Props: {'G': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'})]
		
10/07/2019 10:35:42 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

10/07/2019 10:35:42 PM DEBUG [spec] No of nodes: 7
10/07/2019 10:35:42 PM DEBUG [spec] No of edges: 12
10/07/2019 10:35:42 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
10/07/2019 10:35:42 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
10/07/2019 10:35:42 PM INFO Constructing product automaton with infinity DFA!
10/07/2019 10:35:42 PM INFO Constructing product automaton with infinity DFA!
10/07/2019 10:35:42 PM INFO Product automaton size is: (33, 121)
10/07/2019 10:35:42 PM INFO Constructing product automaton with infinity DFA!
10/07/2019 10:35:42 PM INFO Product automaton size is: (33, 122)
10/07/2019 10:36:56 PM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
10/07/2019 10:36:56 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
10/07/2019 10:36:56 PM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
10/07/2019 10:36:56 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
10/07/2019 10:36:56 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
10/07/2019 10:36:56 PM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
10/07/2019 10:36:56 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
10/07/2019 10:36:56 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

10/07/2019 10:36:56 PM DEBUG [spec] No of nodes: 7
10/07/2019 10:36:56 PM DEBUG [spec] No of edges: 12
10/07/2019 10:36:56 PM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['G', 'N'])
10/07/2019 10:36:56 PM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
10/07/2019 10:36:56 PM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['G', 'N'])
10/07/2019 10:36:56 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 G )
10/07/2019 10:36:56 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 G ) 0 7 )
10/07/2019 10:36:56 PM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 G]^[0, 7]
10/07/2019 10:36:56 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 G ) 0 7 ) )
Directed: True
Multi: False
Props: {'G': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'})]
		
10/07/2019 10:36:56 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

10/07/2019 10:36:56 PM DEBUG [spec] No of nodes: 7
10/07/2019 10:36:56 PM DEBUG [spec] No of edges: 12
10/07/2019 10:36:56 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
10/07/2019 10:36:56 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
10/07/2019 10:36:56 PM INFO Constructing product automaton with infinity DFA!
10/07/2019 10:36:56 PM INFO Constructing product automaton with infinity DFA!
10/07/2019 10:36:56 PM INFO Product automaton size is: (33, 121)
10/07/2019 10:36:56 PM INFO Constructing product automaton with infinity DFA!
10/07/2019 10:36:56 PM INFO Product automaton size is: (33, 122)
10/07/2019 10:38:08 PM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
10/07/2019 10:38:08 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
10/07/2019 10:38:08 PM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
10/07/2019 10:38:08 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
10/07/2019 10:38:08 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
10/07/2019 10:38:08 PM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
10/07/2019 10:38:08 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
10/07/2019 10:38:08 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

10/07/2019 10:38:08 PM DEBUG [spec] No of nodes: 7
10/07/2019 10:38:08 PM DEBUG [spec] No of edges: 12
10/07/2019 10:38:08 PM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['G', 'N'])
10/07/2019 10:38:08 PM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
10/07/2019 10:38:08 PM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['G', 'N'])
10/07/2019 10:38:08 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 G )
10/07/2019 10:38:08 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 G ) 0 7 )
10/07/2019 10:38:08 PM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 G]^[0, 7]
10/07/2019 10:38:08 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 G ) 0 7 ) )
Directed: True
Multi: False
Props: {'G': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'})]
		
10/07/2019 10:38:08 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

10/07/2019 10:38:08 PM DEBUG [spec] No of nodes: 7
10/07/2019 10:38:08 PM DEBUG [spec] No of edges: 12
10/07/2019 10:38:08 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
10/07/2019 10:38:08 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
10/07/2019 10:38:08 PM INFO Constructing product automaton with infinity DFA!
10/07/2019 10:38:08 PM INFO Constructing product automaton with infinity DFA!
10/07/2019 10:38:08 PM INFO Product automaton size is: (33, 121)
10/07/2019 10:38:08 PM INFO Constructing product automaton with infinity DFA!
10/07/2019 10:38:08 PM INFO Product automaton size is: (33, 122)

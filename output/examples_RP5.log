09/25/2019 02:03:28 PM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/25/2019 02:03:28 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/25/2019 02:03:28 PM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/25/2019 02:03:28 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/25/2019 02:03:28 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/25/2019 02:03:28 PM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/25/2019 02:03:28 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/25/2019 02:03:28 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/25/2019 02:03:28 PM DEBUG [spec] No of nodes: 7
09/25/2019 02:03:28 PM DEBUG [spec] No of edges: 12
09/25/2019 02:03:28 PM DEBUG 

Start policy computation

09/25/2019 02:03:28 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/25/2019 02:03:28 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/25/2019 02:03:28 PM INFO Constructing product automaton with infinity DFA!
09/25/2019 02:03:28 PM INFO Product automaton size is: (506, 6420)
09/25/2019 03:34:48 PM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/25/2019 03:34:48 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/25/2019 03:34:48 PM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/25/2019 03:34:48 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/25/2019 03:34:48 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/25/2019 03:39:38 PM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/25/2019 03:39:38 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/25/2019 03:39:38 PM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/25/2019 03:39:38 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/25/2019 03:39:38 PM DEBUG state: Eventually 
 init: [(0, 1), (0, 0), (0, 3), (0, 2)]
 final: [(3, 2), (3, 3), (3, 0), (3, 1)]
09/25/2019 03:39:38 PM DEBUG state: Hold 
 init: [(0, 1), (0, 0), (0, 3), (0, 2)]
 final: [(3, 2), (3, 3), (3, 0), (3, 1)]
09/25/2019 03:39:38 PM DEBUG state: Eventually 
 init: [(0, 0), (3, 0), (2, 0), (1, 0)]
 final: [(3, 3), (0, 3), (1, 3), (2, 3)]
09/25/2019 03:39:38 PM DEBUG state: Hold 
 init: [(0, 0), (3, 0), (2, 0), (1, 0)]
 final: [(3, 3), (0, 3), (1, 3), (2, 3)]
09/25/2019 03:39:38 PM DEBUG [intersection] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/25/2019 03:41:33 PM DEBUG [spec] spec: [H^2 F]^[0, 7] & [H^2 P]^[0, 7]
09/25/2019 03:41:33 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Intersection (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [3]
Final: set([4])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {}), (11, {}), (12, {}), (13, {}), (14, {}), (15, {})]
Edges: [(0, 8, {'input': set([1]), 'guard': '((else)) & (P)', 'weight': 0, 'label': '((else)) & (P)'}), (0, 1, {'input': set([3]), 'guard': '(F) & (P)', 'weight': 0, 'label': '(F) & (P)'}), (0, 3, {'input': set([0]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (0, 14, {'input': set([2]), 'guard': '(F) & ((else))', 'weight': 0, 'label': '(F) & ((else))'}), (1, 11, {'input': set([3]), 'guard': '(F) & (P)', 'weight': 0, 'label': '(F) & (P)'}), (1, 9, {'input': set([2]), 'guard': '(F) & ((else))', 'weight': 0, 'label': '(F) & ((else))'}), (1, 3, {'input': set([0]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (1, 7, {'input': set([1]), 'guard': '((else)) & (P)', 'weight': 0, 'label': '((else)) & (P)'}), (2, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (2, 5, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 0, {'input': set([1]), 'guard': '((else)) & (P)', 'weight': 0, 'label': '((else)) & (P)'}), (3, 3, {'input': set([0]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (3, 14, {'input': set([2]), 'guard': '(F) & ((else))', 'weight': 0, 'label': '(F) & ((else))'}), (3, 15, {'input': set([3]), 'guard': '(F) & (P)', 'weight': 0, 'label': '(F) & (P)'}), (5, 5, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (6, 2, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (6, 5, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (7, 10, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (7, 7, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (8, 10, {'input': set([3]), 'guard': '(F) & (P)', 'weight': 0, 'label': '(F) & (P)'}), (8, 3, {'input': set([0]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (8, 14, {'input': set([2]), 'guard': '(F) & ((else))', 'weight': 0, 'label': '(F) & ((else))'}), (8, 7, {'input': set([1]), 'guard': '((else)) & (P)', 'weight': 0, 'label': '((else)) & (P)'}), (9, 0, {'input': set([1]), 'guard': '((else)) & (P)', 'weight': 0, 'label': '((else)) & (P)'}), (9, 3, {'input': set([0]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (9, 5, {'input': set([2]), 'guard': '(F) & ((else))', 'weight': 0, 'label': '(F) & ((else))'}), (9, 6, {'input': set([3]), 'guard': '(F) & (P)', 'weight': 0, 'label': '(F) & (P)'}), (10, 11, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (10, 7, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (11, 4, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (11, 7, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (12, 8, {'input': set([1]), 'guard': '((else)) & (P)', 'weight': 0, 'label': '((else)) & (P)'}), (12, 2, {'input': set([3]), 'guard': '(F) & (P)', 'weight': 0, 'label': '(F) & (P)'}), (12, 3, {'input': set([0]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (12, 5, {'input': set([2]), 'guard': '(F) & ((else))', 'weight': 0, 'label': '(F) & ((else))'}), (13, 3, {'input': set([0]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (13, 4, {'input': set([3]), 'guard': '(F) & (P)', 'weight': 0, 'label': '(F) & (P)'}), (13, 5, {'input': set([2]), 'guard': '(F) & ((else))', 'weight': 0, 'label': '(F) & ((else))'}), (13, 7, {'input': set([1]), 'guard': '((else)) & (P)', 'weight': 0, 'label': '((else)) & (P)'}), (14, 0, {'input': set([1]), 'guard': '((else)) & (P)', 'weight': 0, 'label': '((else)) & (P)'}), (14, 9, {'input': set([2]), 'guard': '(F) & ((else))', 'weight': 0, 'label': '(F) & ((else))'}), (14, 3, {'input': set([0]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (14, 12, {'input': set([3]), 'guard': '(F) & (P)', 'weight': 0, 'label': '(F) & (P)'}), (15, 8, {'input': set([1]), 'guard': '((else)) & (P)', 'weight': 0, 'label': '((else)) & (P)'}), (15, 9, {'input': set([2]), 'guard': '(F) & ((else))', 'weight': 0, 'label': '(F) & ((else))'}), (15, 3, {'input': set([0]), 'guard': '((else)) & ((else))', 'weight': 0, 'label': '((else)) & ((else))'}), (15, 13, {'input': set([3]), 'guard': '(F) & (P)', 'weight': 0, 'label': '(F) & (P)'})]
		
09/25/2019 03:41:33 PM DEBUG [spec] tree:
 Op: Intersection Flags[WDF, WWF, UNR]: True True False
 Init: set([3])
 Final: set([4])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([4])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([4])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([4])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([4])

09/25/2019 03:41:33 PM DEBUG [spec] No of nodes: 16
09/25/2019 03:41:33 PM DEBUG [spec] No of edges: 48
09/25/2019 03:41:33 PM DEBUG 

Start policy computation

09/25/2019 03:41:33 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/25/2019 03:41:33 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/25/2019 03:41:33 PM INFO Constructing product automaton with infinity DFA!
09/25/2019 03:41:33 PM INFO Product automaton size is: (798, 9968)
09/25/2019 03:47:45 PM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'N', 'F'])
09/25/2019 03:47:45 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/25/2019 03:47:45 PM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'N', 'F'])
09/25/2019 03:47:45 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/25/2019 03:47:45 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/25/2019 03:47:45 PM DEBUG [eventually] Low: 0 High: 14 DFA: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
09/25/2019 03:47:45 PM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['P', 'N', 'F'])
09/25/2019 03:47:45 PM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/25/2019 04:01:22 PM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['AND', 'P', 'N', 'F'])
09/25/2019 04:01:22 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/25/2019 04:01:22 PM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['AND', 'P', 'N', 'F'])
09/25/2019 04:01:22 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/25/2019 04:01:22 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/25/2019 04:01:22 PM DEBUG [spec] spec: ([H^2 F]^[0, 7] * [H^2 P]^[0, 7]) AND ([H^2 N]^[0, 8] * [H^2 H]^[0, 7])
09/25/2019 04:01:22 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'AND': 1, 'P': 2, 'F': 8, 'N': 4}
Alphabet: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1, 2, 3, 4, 5, 6, 7]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 1, 4, 5, 8, 9, 12, 13]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 1, 4, 5, 8, 9, 12, 13]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 1, 4, 5, 8, 9, 12, 13]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/25/2019 04:01:22 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/25/2019 04:01:22 PM DEBUG [spec] No of nodes: 7
09/25/2019 04:01:22 PM DEBUG [spec] No of edges: 12
09/25/2019 04:01:22 PM DEBUG 

Start policy computation

09/25/2019 04:01:22 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/25/2019 04:01:22 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/25/2019 04:01:22 PM INFO Constructing product automaton with infinity DFA!
09/25/2019 04:01:22 PM INFO Product automaton size is: (506, 6420)
09/25/2019 08:52:33 PM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/25/2019 08:52:33 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/25/2019 08:52:33 PM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/25/2019 08:52:33 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/25/2019 08:52:33 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/25/2019 08:52:33 PM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/25/2019 08:52:33 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/25/2019 08:52:33 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/25/2019 08:52:33 PM DEBUG [spec] No of nodes: 7
09/25/2019 08:52:33 PM DEBUG [spec] No of edges: 12
09/25/2019 08:52:33 PM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['X', 'N'])
09/25/2019 08:52:33 PM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/25/2019 08:52:33 PM DEBUG [hold] Prop: X Duration: 2 Negation: False Props: set(['X', 'N'])
09/25/2019 08:52:33 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 X )
09/25/2019 08:52:33 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 X ) 0 7 )
09/25/2019 08:52:33 PM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 X]^[0, 7]
09/25/2019 08:52:33 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 X ) 0 7 ) )
Directed: True
Multi: False
Props: {'X': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'X', 'weight': 0, 'label': u'X'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'X', 'weight': 0, 'label': u'X'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'X', 'weight': 0, 'label': u'X'})]
		
09/25/2019 08:52:33 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/25/2019 08:52:33 PM DEBUG [spec] No of nodes: 7
09/25/2019 08:52:33 PM DEBUG [spec] No of edges: 12
09/25/2019 08:52:33 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/25/2019 08:52:33 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/25/2019 08:52:33 PM INFO Constructing product automaton with infinity DFA!
09/25/2019 08:52:33 PM INFO Constructing product automaton with infinity DFA!
09/25/2019 08:52:33 PM INFO Product automaton size is: (33, 121)
09/25/2019 08:52:33 PM INFO Constructing product automaton with infinity DFA!
09/25/2019 08:52:33 PM INFO Product automaton size is: (31, 117)
09/25/2019 08:56:07 PM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/25/2019 08:56:07 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/25/2019 08:56:07 PM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/25/2019 08:56:07 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/25/2019 08:56:07 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/25/2019 08:56:07 PM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/25/2019 08:56:07 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/25/2019 08:56:07 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/25/2019 08:56:07 PM DEBUG [spec] No of nodes: 7
09/25/2019 08:56:07 PM DEBUG [spec] No of edges: 12
09/25/2019 08:56:07 PM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['X', 'N'])
09/25/2019 08:56:07 PM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/25/2019 08:56:07 PM DEBUG [hold] Prop: X Duration: 2 Negation: False Props: set(['X', 'N'])
09/25/2019 08:56:07 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 X )
09/25/2019 08:56:07 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 X ) 0 7 )
09/25/2019 08:56:07 PM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 X]^[0, 7]
09/25/2019 08:56:07 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 X ) 0 7 ) )
Directed: True
Multi: False
Props: {'X': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'X', 'weight': 0, 'label': u'X'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'X', 'weight': 0, 'label': u'X'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'X', 'weight': 0, 'label': u'X'})]
		
09/25/2019 08:56:07 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/25/2019 08:56:07 PM DEBUG [spec] No of nodes: 7
09/25/2019 08:56:07 PM DEBUG [spec] No of edges: 12
09/25/2019 08:56:07 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/25/2019 08:56:07 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/25/2019 08:56:07 PM INFO Constructing product automaton with infinity DFA!
09/25/2019 08:56:07 PM INFO Constructing product automaton with infinity DFA!
09/25/2019 08:56:07 PM INFO Product automaton size is: (33, 121)
09/25/2019 08:56:07 PM INFO Constructing product automaton with infinity DFA!
09/25/2019 08:56:07 PM INFO Product automaton size is: (31, 117)
09/25/2019 09:12:57 PM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/25/2019 09:12:57 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/25/2019 09:12:57 PM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/25/2019 09:12:57 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/25/2019 09:12:57 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/25/2019 09:12:57 PM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/25/2019 09:12:57 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/25/2019 09:12:57 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/25/2019 09:12:57 PM DEBUG [spec] No of nodes: 7
09/25/2019 09:12:57 PM DEBUG [spec] No of edges: 12
09/25/2019 09:12:57 PM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['X', 'N'])
09/25/2019 09:12:57 PM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/25/2019 09:12:57 PM DEBUG [hold] Prop: X Duration: 2 Negation: False Props: set(['X', 'N'])
09/25/2019 09:12:57 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 X )
09/25/2019 09:12:57 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 X ) 0 7 )
09/25/2019 09:12:57 PM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 X]^[0, 7]
09/25/2019 09:12:57 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 X ) 0 7 ) )
Directed: True
Multi: False
Props: {'X': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'X', 'weight': 0, 'label': u'X'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'X', 'weight': 0, 'label': u'X'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'X', 'weight': 0, 'label': u'X'})]
		
09/25/2019 09:12:57 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/25/2019 09:12:57 PM DEBUG [spec] No of nodes: 7
09/25/2019 09:12:57 PM DEBUG [spec] No of edges: 12
09/25/2019 09:12:57 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/25/2019 09:12:57 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/25/2019 09:12:57 PM INFO Constructing product automaton with infinity DFA!
09/25/2019 09:12:57 PM INFO Constructing product automaton with infinity DFA!
09/25/2019 09:12:57 PM INFO Product automaton size is: (33, 121)
09/25/2019 09:12:57 PM INFO Constructing product automaton with infinity DFA!
09/25/2019 09:12:57 PM INFO Product automaton size is: (31, 117)
09/25/2019 09:16:38 PM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/25/2019 09:16:38 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/25/2019 09:16:38 PM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/25/2019 09:16:38 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/25/2019 09:16:38 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/25/2019 09:16:38 PM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/25/2019 09:16:38 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/25/2019 09:16:38 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/25/2019 09:16:38 PM DEBUG [spec] No of nodes: 7
09/25/2019 09:16:38 PM DEBUG [spec] No of edges: 12
09/25/2019 09:16:38 PM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['X', 'N'])
09/25/2019 09:16:38 PM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/25/2019 09:16:38 PM DEBUG [hold] Prop: X Duration: 2 Negation: False Props: set(['X', 'N'])
09/25/2019 09:16:38 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 X )
09/25/2019 09:16:38 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 X ) 0 7 )
09/25/2019 09:16:38 PM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 X]^[0, 7]
09/25/2019 09:16:38 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 X ) 0 7 ) )
Directed: True
Multi: False
Props: {'X': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'X', 'weight': 0, 'label': u'X'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'X', 'weight': 0, 'label': u'X'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'X', 'weight': 0, 'label': u'X'})]
		
09/25/2019 09:16:38 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/25/2019 09:16:38 PM DEBUG [spec] No of nodes: 7
09/25/2019 09:16:38 PM DEBUG [spec] No of edges: 12
09/25/2019 09:16:38 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/25/2019 09:16:38 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/25/2019 09:16:38 PM INFO Constructing product automaton with infinity DFA!
09/25/2019 09:16:38 PM INFO Constructing product automaton with infinity DFA!
09/25/2019 09:16:38 PM INFO Product automaton size is: (33, 121)
09/25/2019 09:16:38 PM INFO Constructing product automaton with infinity DFA!
09/25/2019 09:16:38 PM INFO Product automaton size is: (31, 117)
09/25/2019 09:17:28 PM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/25/2019 09:17:28 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/25/2019 09:17:28 PM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/25/2019 09:17:28 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/25/2019 09:17:28 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/25/2019 09:17:28 PM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/25/2019 09:17:28 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/25/2019 09:17:28 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/25/2019 09:17:28 PM DEBUG [spec] No of nodes: 7
09/25/2019 09:17:28 PM DEBUG [spec] No of edges: 12
09/25/2019 09:17:28 PM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['X', 'N'])
09/25/2019 09:17:28 PM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/25/2019 09:17:28 PM DEBUG [hold] Prop: X Duration: 2 Negation: False Props: set(['X', 'N'])
09/25/2019 09:17:28 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 X )
09/25/2019 09:17:28 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 X ) 0 7 )
09/25/2019 09:17:28 PM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 X]^[0, 7]
09/25/2019 09:17:28 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 X ) 0 7 ) )
Directed: True
Multi: False
Props: {'X': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'X', 'weight': 0, 'label': u'X'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'X', 'weight': 0, 'label': u'X'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'X', 'weight': 0, 'label': u'X'})]
		
09/25/2019 09:17:28 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/25/2019 09:17:28 PM DEBUG [spec] No of nodes: 7
09/25/2019 09:17:28 PM DEBUG [spec] No of edges: 12
09/25/2019 09:17:28 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/25/2019 09:17:28 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/25/2019 09:17:28 PM INFO Constructing product automaton with infinity DFA!
09/25/2019 09:17:28 PM INFO Constructing product automaton with infinity DFA!
09/25/2019 09:17:28 PM INFO Product automaton size is: (33, 121)
09/25/2019 09:17:28 PM INFO Constructing product automaton with infinity DFA!
09/25/2019 09:17:28 PM INFO Product automaton size is: (31, 117)
09/25/2019 09:19:24 PM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/25/2019 09:19:24 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/25/2019 09:19:24 PM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/25/2019 09:19:24 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/25/2019 09:19:24 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/25/2019 09:19:24 PM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/25/2019 09:19:24 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/25/2019 09:19:24 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/25/2019 09:19:24 PM DEBUG [spec] No of nodes: 7
09/25/2019 09:19:24 PM DEBUG [spec] No of edges: 12
09/25/2019 09:19:24 PM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['X', 'N'])
09/25/2019 09:19:24 PM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/25/2019 09:19:24 PM DEBUG [hold] Prop: X Duration: 2 Negation: False Props: set(['X', 'N'])
09/25/2019 09:19:24 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 X )
09/25/2019 09:19:24 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 X ) 0 7 )
09/25/2019 09:19:24 PM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 X]^[0, 7]
09/25/2019 09:19:24 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 X ) 0 7 ) )
Directed: True
Multi: False
Props: {'X': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'X', 'weight': 0, 'label': u'X'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'X', 'weight': 0, 'label': u'X'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'X', 'weight': 0, 'label': u'X'})]
		
09/25/2019 09:19:24 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/25/2019 09:19:24 PM DEBUG [spec] No of nodes: 7
09/25/2019 09:19:24 PM DEBUG [spec] No of edges: 12
09/25/2019 09:19:24 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/25/2019 09:19:24 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/25/2019 09:19:24 PM INFO Constructing product automaton with infinity DFA!
09/25/2019 09:19:24 PM INFO Constructing product automaton with infinity DFA!
09/25/2019 09:19:24 PM INFO Product automaton size is: (33, 121)
09/25/2019 09:19:24 PM INFO Constructing product automaton with infinity DFA!
09/25/2019 09:19:24 PM INFO Product automaton size is: (31, 117)
09/25/2019 09:21:47 PM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/25/2019 09:21:47 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/25/2019 09:21:47 PM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/25/2019 09:21:47 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/25/2019 09:21:47 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/25/2019 09:21:47 PM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/25/2019 09:21:47 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/25/2019 09:21:47 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/25/2019 09:21:47 PM DEBUG [spec] No of nodes: 7
09/25/2019 09:21:47 PM DEBUG [spec] No of edges: 12
09/25/2019 09:21:47 PM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['X', 'N'])
09/25/2019 09:21:47 PM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/25/2019 09:21:47 PM DEBUG [hold] Prop: X Duration: 2 Negation: False Props: set(['X', 'N'])
09/25/2019 09:21:47 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 X )
09/25/2019 09:21:47 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 X ) 0 7 )
09/25/2019 09:21:47 PM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 X]^[0, 7]
09/25/2019 09:21:47 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 X ) 0 7 ) )
Directed: True
Multi: False
Props: {'X': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'X', 'weight': 0, 'label': u'X'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'X', 'weight': 0, 'label': u'X'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'X', 'weight': 0, 'label': u'X'})]
		
09/25/2019 09:21:47 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/25/2019 09:21:47 PM DEBUG [spec] No of nodes: 7
09/25/2019 09:21:47 PM DEBUG [spec] No of edges: 12
09/25/2019 09:21:47 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/25/2019 09:21:47 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/25/2019 09:21:47 PM INFO Constructing product automaton with infinity DFA!
09/25/2019 09:21:47 PM INFO Constructing product automaton with infinity DFA!
09/25/2019 09:21:47 PM INFO Product automaton size is: (33, 121)
09/25/2019 09:21:47 PM INFO Constructing product automaton with infinity DFA!
09/25/2019 09:21:47 PM INFO Product automaton size is: (31, 117)
09/25/2019 09:24:53 PM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/25/2019 09:24:53 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/25/2019 09:24:53 PM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/25/2019 09:24:53 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/25/2019 09:24:53 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/25/2019 09:24:53 PM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/25/2019 09:24:53 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/25/2019 09:24:53 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/25/2019 09:24:53 PM DEBUG [spec] No of nodes: 7
09/25/2019 09:24:53 PM DEBUG [spec] No of edges: 12
09/25/2019 09:24:53 PM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['X', 'N'])
09/25/2019 09:24:53 PM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/25/2019 09:24:53 PM DEBUG [hold] Prop: X Duration: 2 Negation: False Props: set(['X', 'N'])
09/25/2019 09:24:53 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 X )
09/25/2019 09:24:53 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 X ) 0 7 )
09/25/2019 09:24:53 PM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 X]^[0, 7]
09/25/2019 09:24:53 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 X ) 0 7 ) )
Directed: True
Multi: False
Props: {'X': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'X', 'weight': 0, 'label': u'X'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'X', 'weight': 0, 'label': u'X'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'X', 'weight': 0, 'label': u'X'})]
		
09/25/2019 09:24:53 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/25/2019 09:24:53 PM DEBUG [spec] No of nodes: 7
09/25/2019 09:24:53 PM DEBUG [spec] No of edges: 12
09/25/2019 09:24:53 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/25/2019 09:24:53 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/25/2019 09:24:53 PM INFO Constructing product automaton with infinity DFA!
09/25/2019 09:24:53 PM INFO Constructing product automaton with infinity DFA!
09/25/2019 09:24:53 PM INFO Product automaton size is: (33, 121)
09/25/2019 09:24:53 PM INFO Constructing product automaton with infinity DFA!
09/25/2019 09:24:53 PM INFO Product automaton size is: (31, 117)
09/25/2019 09:27:31 PM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/25/2019 09:27:31 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/25/2019 09:27:31 PM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/25/2019 09:27:31 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/25/2019 09:27:31 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/25/2019 09:27:31 PM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/25/2019 09:27:31 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/25/2019 09:27:31 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/25/2019 09:27:31 PM DEBUG [spec] No of nodes: 7
09/25/2019 09:27:31 PM DEBUG [spec] No of edges: 12
09/25/2019 09:27:31 PM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['X', 'N'])
09/25/2019 09:27:31 PM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/25/2019 09:27:31 PM DEBUG [hold] Prop: X Duration: 2 Negation: False Props: set(['X', 'N'])
09/25/2019 09:27:31 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 X )
09/25/2019 09:27:31 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 X ) 0 7 )
09/25/2019 09:27:31 PM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 X]^[0, 7]
09/25/2019 09:27:31 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 X ) 0 7 ) )
Directed: True
Multi: False
Props: {'X': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'X', 'weight': 0, 'label': u'X'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'X', 'weight': 0, 'label': u'X'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'X', 'weight': 0, 'label': u'X'})]
		
09/25/2019 09:27:31 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/25/2019 09:27:31 PM DEBUG [spec] No of nodes: 7
09/25/2019 09:27:31 PM DEBUG [spec] No of edges: 12
09/25/2019 09:27:31 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/25/2019 09:27:31 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/25/2019 09:27:31 PM INFO Constructing product automaton with infinity DFA!
09/25/2019 09:27:31 PM INFO Constructing product automaton with infinity DFA!
09/25/2019 09:27:31 PM INFO Product automaton size is: (33, 121)
09/25/2019 09:27:31 PM INFO Constructing product automaton with infinity DFA!
09/25/2019 09:27:31 PM INFO Product automaton size is: (31, 117)
09/25/2019 09:28:34 PM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/25/2019 09:28:34 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/25/2019 09:28:34 PM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/25/2019 09:28:34 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/25/2019 09:28:34 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/25/2019 09:28:34 PM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/25/2019 09:28:34 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/25/2019 09:28:34 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/25/2019 09:28:34 PM DEBUG [spec] No of nodes: 7
09/25/2019 09:28:34 PM DEBUG [spec] No of edges: 12
09/25/2019 09:28:34 PM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['X', 'N'])
09/25/2019 09:28:34 PM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/25/2019 09:28:34 PM DEBUG [hold] Prop: X Duration: 2 Negation: False Props: set(['X', 'N'])
09/25/2019 09:28:34 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 X )
09/25/2019 09:28:34 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 X ) 0 7 )
09/25/2019 09:28:34 PM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 X]^[0, 7]
09/25/2019 09:28:34 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 X ) 0 7 ) )
Directed: True
Multi: False
Props: {'X': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'X', 'weight': 0, 'label': u'X'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'X', 'weight': 0, 'label': u'X'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'X', 'weight': 0, 'label': u'X'})]
		
09/25/2019 09:28:34 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/25/2019 09:28:34 PM DEBUG [spec] No of nodes: 7
09/25/2019 09:28:34 PM DEBUG [spec] No of edges: 12
09/25/2019 09:28:34 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/25/2019 09:28:34 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/25/2019 09:28:34 PM INFO Constructing product automaton with infinity DFA!
09/25/2019 09:28:34 PM INFO Constructing product automaton with infinity DFA!
09/25/2019 09:28:34 PM INFO Product automaton size is: (33, 121)
09/25/2019 09:28:34 PM INFO Constructing product automaton with infinity DFA!
09/25/2019 09:28:34 PM INFO Product automaton size is: (31, 117)
09/25/2019 09:30:20 PM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/25/2019 09:30:20 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/25/2019 09:30:20 PM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/25/2019 09:30:20 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/25/2019 09:30:20 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/25/2019 09:30:20 PM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/25/2019 09:30:20 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/25/2019 09:30:20 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/25/2019 09:30:20 PM DEBUG [spec] No of nodes: 7
09/25/2019 09:30:20 PM DEBUG [spec] No of edges: 12
09/25/2019 09:30:20 PM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['X', 'N'])
09/25/2019 09:30:20 PM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/25/2019 09:30:20 PM DEBUG [hold] Prop: X Duration: 2 Negation: False Props: set(['X', 'N'])
09/25/2019 09:30:20 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 X )
09/25/2019 09:30:20 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 X ) 0 7 )
09/25/2019 09:30:20 PM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 X]^[0, 7]
09/25/2019 09:30:20 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 X ) 0 7 ) )
Directed: True
Multi: False
Props: {'X': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'X', 'weight': 0, 'label': u'X'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'X', 'weight': 0, 'label': u'X'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'X', 'weight': 0, 'label': u'X'})]
		
09/25/2019 09:30:20 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/25/2019 09:30:20 PM DEBUG [spec] No of nodes: 7
09/25/2019 09:30:20 PM DEBUG [spec] No of edges: 12
09/25/2019 09:30:20 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/25/2019 09:30:20 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/25/2019 09:30:20 PM INFO Constructing product automaton with infinity DFA!
09/25/2019 09:30:20 PM INFO Constructing product automaton with infinity DFA!
09/25/2019 09:30:20 PM INFO Product automaton size is: (33, 121)
09/25/2019 09:30:20 PM INFO Constructing product automaton with infinity DFA!
09/25/2019 09:30:20 PM INFO Product automaton size is: (31, 117)
09/25/2019 09:35:03 PM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/25/2019 09:35:03 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/25/2019 09:35:03 PM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/25/2019 09:35:03 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/25/2019 09:35:03 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/25/2019 09:35:03 PM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/25/2019 09:35:03 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/25/2019 09:35:03 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/25/2019 09:35:03 PM DEBUG [spec] No of nodes: 7
09/25/2019 09:35:03 PM DEBUG [spec] No of edges: 12
09/25/2019 09:35:03 PM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['X', 'N'])
09/25/2019 09:35:03 PM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/25/2019 09:35:03 PM DEBUG [hold] Prop: X Duration: 2 Negation: False Props: set(['X', 'N'])
09/25/2019 09:35:03 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 X )
09/25/2019 09:35:03 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 X ) 0 7 )
09/25/2019 09:35:03 PM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 X]^[0, 7]
09/25/2019 09:35:03 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 X ) 0 7 ) )
Directed: True
Multi: False
Props: {'X': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'X', 'weight': 0, 'label': u'X'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'X', 'weight': 0, 'label': u'X'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'X', 'weight': 0, 'label': u'X'})]
		
09/25/2019 09:35:03 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/25/2019 09:35:03 PM DEBUG [spec] No of nodes: 7
09/25/2019 09:35:03 PM DEBUG [spec] No of edges: 12
09/25/2019 09:35:03 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/25/2019 09:35:03 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/25/2019 09:35:03 PM INFO Constructing product automaton with infinity DFA!
09/25/2019 09:35:03 PM INFO Constructing product automaton with infinity DFA!
09/25/2019 09:35:03 PM INFO Product automaton size is: (33, 121)
09/25/2019 09:35:03 PM INFO Constructing product automaton with infinity DFA!
09/25/2019 09:35:03 PM INFO Product automaton size is: (31, 117)
09/25/2019 09:38:18 PM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/25/2019 09:38:18 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/25/2019 09:38:18 PM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/25/2019 09:38:18 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/25/2019 09:38:18 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/25/2019 09:38:18 PM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/25/2019 09:38:18 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/25/2019 09:38:18 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/25/2019 09:38:18 PM DEBUG [spec] No of nodes: 7
09/25/2019 09:38:18 PM DEBUG [spec] No of edges: 12
09/25/2019 09:38:18 PM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['X', 'N'])
09/25/2019 09:38:18 PM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/25/2019 09:38:18 PM DEBUG [hold] Prop: X Duration: 2 Negation: False Props: set(['X', 'N'])
09/25/2019 09:38:18 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 X )
09/25/2019 09:38:18 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 X ) 0 7 )
09/25/2019 09:38:18 PM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 X]^[0, 7]
09/25/2019 09:38:18 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 X ) 0 7 ) )
Directed: True
Multi: False
Props: {'X': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'X', 'weight': 0, 'label': u'X'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'X', 'weight': 0, 'label': u'X'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'X', 'weight': 0, 'label': u'X'})]
		
09/25/2019 09:38:18 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/25/2019 09:38:18 PM DEBUG [spec] No of nodes: 7
09/25/2019 09:38:18 PM DEBUG [spec] No of edges: 12
09/25/2019 09:38:18 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/25/2019 09:38:18 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/25/2019 09:38:18 PM INFO Constructing product automaton with infinity DFA!
09/25/2019 09:38:18 PM INFO Constructing product automaton with infinity DFA!
09/25/2019 09:38:18 PM INFO Product automaton size is: (33, 121)
09/25/2019 09:38:18 PM INFO Constructing product automaton with infinity DFA!
09/25/2019 09:38:18 PM INFO Product automaton size is: (31, 117)
09/25/2019 09:40:12 PM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/25/2019 09:40:12 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/25/2019 09:40:12 PM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/25/2019 09:40:12 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/25/2019 09:40:12 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/25/2019 09:40:12 PM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/25/2019 09:40:12 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/25/2019 09:40:12 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/25/2019 09:40:12 PM DEBUG [spec] No of nodes: 7
09/25/2019 09:40:12 PM DEBUG [spec] No of edges: 12
09/25/2019 09:40:12 PM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['X', 'N'])
09/25/2019 09:40:12 PM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/25/2019 09:40:12 PM DEBUG [hold] Prop: X Duration: 2 Negation: False Props: set(['X', 'N'])
09/25/2019 09:40:12 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 X )
09/25/2019 09:40:12 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 X ) 0 7 )
09/25/2019 09:40:12 PM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 X]^[0, 7]
09/25/2019 09:40:12 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 X ) 0 7 ) )
Directed: True
Multi: False
Props: {'X': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'X', 'weight': 0, 'label': u'X'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'X', 'weight': 0, 'label': u'X'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'X', 'weight': 0, 'label': u'X'})]
		
09/25/2019 09:40:12 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/25/2019 09:40:12 PM DEBUG [spec] No of nodes: 7
09/25/2019 09:40:12 PM DEBUG [spec] No of edges: 12
09/25/2019 09:40:12 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/25/2019 09:40:12 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/25/2019 09:40:12 PM INFO Constructing product automaton with infinity DFA!
09/25/2019 09:40:12 PM INFO Constructing product automaton with infinity DFA!
09/25/2019 09:40:12 PM INFO Product automaton size is: (33, 121)
09/25/2019 09:40:12 PM INFO Constructing product automaton with infinity DFA!
09/25/2019 09:40:12 PM INFO Product automaton size is: (31, 117)
09/25/2019 09:43:56 PM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/25/2019 09:43:56 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/25/2019 09:43:56 PM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/25/2019 09:43:56 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/25/2019 09:43:56 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/25/2019 09:43:56 PM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/25/2019 09:43:56 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/25/2019 09:43:56 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/25/2019 09:43:56 PM DEBUG [spec] No of nodes: 7
09/25/2019 09:43:56 PM DEBUG [spec] No of edges: 12
09/25/2019 09:43:56 PM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['X', 'N'])
09/25/2019 09:43:56 PM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/25/2019 09:43:56 PM DEBUG [hold] Prop: X Duration: 2 Negation: False Props: set(['X', 'N'])
09/25/2019 09:43:56 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 X )
09/25/2019 09:43:56 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 X ) 0 7 )
09/25/2019 09:43:56 PM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 X]^[0, 7]
09/25/2019 09:43:56 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 X ) 0 7 ) )
Directed: True
Multi: False
Props: {'X': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'X', 'weight': 0, 'label': u'X'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'X', 'weight': 0, 'label': u'X'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'X', 'weight': 0, 'label': u'X'})]
		
09/25/2019 09:43:56 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/25/2019 09:43:56 PM DEBUG [spec] No of nodes: 7
09/25/2019 09:43:56 PM DEBUG [spec] No of edges: 12
09/25/2019 09:43:56 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/25/2019 09:43:56 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/25/2019 09:43:56 PM INFO Constructing product automaton with infinity DFA!
09/25/2019 09:43:56 PM INFO Constructing product automaton with infinity DFA!
09/25/2019 09:43:56 PM INFO Product automaton size is: (33, 121)
09/25/2019 09:43:56 PM INFO Constructing product automaton with infinity DFA!
09/25/2019 09:43:56 PM INFO Product automaton size is: (31, 117)
09/25/2019 09:44:47 PM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/25/2019 09:44:47 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/25/2019 09:44:47 PM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/25/2019 09:44:47 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/25/2019 09:44:47 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/25/2019 09:44:47 PM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/25/2019 09:44:47 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/25/2019 09:44:47 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/25/2019 09:44:47 PM DEBUG [spec] No of nodes: 7
09/25/2019 09:44:47 PM DEBUG [spec] No of edges: 12
09/25/2019 09:44:47 PM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['X', 'N'])
09/25/2019 09:44:47 PM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/25/2019 09:44:47 PM DEBUG [hold] Prop: X Duration: 2 Negation: False Props: set(['X', 'N'])
09/25/2019 09:44:47 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 X )
09/25/2019 09:44:47 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 X ) 0 7 )
09/25/2019 09:44:47 PM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 X]^[0, 7]
09/25/2019 09:44:47 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 X ) 0 7 ) )
Directed: True
Multi: False
Props: {'X': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'X', 'weight': 0, 'label': u'X'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'X', 'weight': 0, 'label': u'X'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'X', 'weight': 0, 'label': u'X'})]
		
09/25/2019 09:44:47 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/25/2019 09:44:47 PM DEBUG [spec] No of nodes: 7
09/25/2019 09:44:47 PM DEBUG [spec] No of edges: 12
09/25/2019 09:44:47 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/25/2019 09:44:47 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/25/2019 09:44:47 PM INFO Constructing product automaton with infinity DFA!
09/25/2019 09:44:47 PM INFO Constructing product automaton with infinity DFA!
09/25/2019 09:44:47 PM INFO Product automaton size is: (33, 121)
09/25/2019 09:44:47 PM INFO Constructing product automaton with infinity DFA!
09/25/2019 09:44:47 PM INFO Product automaton size is: (31, 117)
09/25/2019 09:46:11 PM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/25/2019 09:46:11 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/25/2019 09:46:11 PM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/25/2019 09:46:11 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/25/2019 09:46:11 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/25/2019 09:46:11 PM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/25/2019 09:46:11 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/25/2019 09:46:11 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/25/2019 09:46:11 PM DEBUG [spec] No of nodes: 7
09/25/2019 09:46:11 PM DEBUG [spec] No of edges: 12
09/25/2019 09:46:11 PM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['X', 'N'])
09/25/2019 09:46:11 PM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/25/2019 09:46:11 PM DEBUG [hold] Prop: X Duration: 2 Negation: False Props: set(['X', 'N'])
09/25/2019 09:46:11 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 X )
09/25/2019 09:46:11 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 X ) 0 7 )
09/25/2019 09:46:11 PM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 X]^[0, 7]
09/25/2019 09:46:11 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 X ) 0 7 ) )
Directed: True
Multi: False
Props: {'X': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'X', 'weight': 0, 'label': u'X'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'X', 'weight': 0, 'label': u'X'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'X', 'weight': 0, 'label': u'X'})]
		
09/25/2019 09:46:11 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/25/2019 09:46:11 PM DEBUG [spec] No of nodes: 7
09/25/2019 09:46:11 PM DEBUG [spec] No of edges: 12
09/25/2019 09:46:11 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/25/2019 09:46:11 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/25/2019 09:46:11 PM INFO Constructing product automaton with infinity DFA!
09/25/2019 09:46:11 PM INFO Constructing product automaton with infinity DFA!
09/25/2019 09:46:11 PM INFO Product automaton size is: (33, 121)
09/25/2019 09:46:11 PM INFO Constructing product automaton with infinity DFA!
09/25/2019 09:46:11 PM INFO Product automaton size is: (31, 117)
09/25/2019 09:49:45 PM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/25/2019 09:49:45 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/25/2019 09:49:45 PM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/25/2019 09:49:45 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/25/2019 09:49:45 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/25/2019 09:49:45 PM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/25/2019 09:49:45 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/25/2019 09:49:45 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/25/2019 09:49:45 PM DEBUG [spec] No of nodes: 7
09/25/2019 09:49:45 PM DEBUG [spec] No of edges: 12
09/25/2019 09:49:45 PM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['X', 'N'])
09/25/2019 09:49:45 PM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/25/2019 09:49:45 PM DEBUG [hold] Prop: X Duration: 2 Negation: False Props: set(['X', 'N'])
09/25/2019 09:49:45 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 X )
09/25/2019 09:49:45 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 X ) 0 7 )
09/25/2019 09:49:45 PM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 X]^[0, 7]
09/25/2019 09:49:45 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 X ) 0 7 ) )
Directed: True
Multi: False
Props: {'X': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'X', 'weight': 0, 'label': u'X'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'X', 'weight': 0, 'label': u'X'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'X', 'weight': 0, 'label': u'X'})]
		
09/25/2019 09:49:45 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/25/2019 09:49:45 PM DEBUG [spec] No of nodes: 7
09/25/2019 09:49:45 PM DEBUG [spec] No of edges: 12
09/25/2019 09:49:45 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/25/2019 09:49:45 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/25/2019 09:49:45 PM INFO Constructing product automaton with infinity DFA!
09/25/2019 09:49:45 PM INFO Constructing product automaton with infinity DFA!
09/25/2019 09:49:45 PM INFO Product automaton size is: (33, 121)
09/25/2019 09:49:45 PM INFO Constructing product automaton with infinity DFA!
09/25/2019 09:49:45 PM INFO Product automaton size is: (31, 117)
09/25/2019 09:50:13 PM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/25/2019 09:50:13 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/25/2019 09:50:13 PM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/25/2019 09:50:13 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/25/2019 09:50:13 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/25/2019 09:50:13 PM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/25/2019 09:50:13 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/25/2019 09:50:13 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/25/2019 09:50:13 PM DEBUG [spec] No of nodes: 7
09/25/2019 09:50:13 PM DEBUG [spec] No of edges: 12
09/25/2019 09:50:13 PM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['X', 'N'])
09/25/2019 09:50:13 PM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/25/2019 09:50:13 PM DEBUG [hold] Prop: X Duration: 2 Negation: False Props: set(['X', 'N'])
09/25/2019 09:50:13 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 X )
09/25/2019 09:50:13 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 X ) 0 7 )
09/25/2019 09:50:13 PM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 X]^[0, 7]
09/25/2019 09:50:13 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 X ) 0 7 ) )
Directed: True
Multi: False
Props: {'X': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'X', 'weight': 0, 'label': u'X'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'X', 'weight': 0, 'label': u'X'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'X', 'weight': 0, 'label': u'X'})]
		
09/25/2019 09:50:13 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/25/2019 09:50:13 PM DEBUG [spec] No of nodes: 7
09/25/2019 09:50:13 PM DEBUG [spec] No of edges: 12
09/25/2019 09:50:13 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/25/2019 09:50:13 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/25/2019 09:50:13 PM INFO Constructing product automaton with infinity DFA!
09/25/2019 09:50:13 PM INFO Constructing product automaton with infinity DFA!
09/25/2019 09:50:13 PM INFO Product automaton size is: (33, 121)
09/25/2019 09:50:13 PM INFO Constructing product automaton with infinity DFA!
09/25/2019 09:50:13 PM INFO Product automaton size is: (31, 117)
09/25/2019 09:51:26 PM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/25/2019 09:51:26 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/25/2019 09:51:26 PM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/25/2019 09:51:26 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/25/2019 09:51:26 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/25/2019 09:51:26 PM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/25/2019 09:51:26 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/25/2019 09:51:26 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/25/2019 09:51:26 PM DEBUG [spec] No of nodes: 7
09/25/2019 09:51:26 PM DEBUG [spec] No of edges: 12
09/25/2019 09:51:26 PM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['X', 'N'])
09/25/2019 09:51:26 PM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/25/2019 09:51:26 PM DEBUG [hold] Prop: X Duration: 2 Negation: False Props: set(['X', 'N'])
09/25/2019 09:51:26 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 X )
09/25/2019 09:51:26 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 X ) 0 7 )
09/25/2019 09:51:26 PM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 X]^[0, 7]
09/25/2019 09:51:26 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 X ) 0 7 ) )
Directed: True
Multi: False
Props: {'X': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'X', 'weight': 0, 'label': u'X'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'X', 'weight': 0, 'label': u'X'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'X', 'weight': 0, 'label': u'X'})]
		
09/25/2019 09:51:26 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/25/2019 09:51:26 PM DEBUG [spec] No of nodes: 7
09/25/2019 09:51:26 PM DEBUG [spec] No of edges: 12
09/25/2019 09:51:26 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/25/2019 09:51:26 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/25/2019 09:51:26 PM INFO Constructing product automaton with infinity DFA!
09/25/2019 09:51:26 PM INFO Constructing product automaton with infinity DFA!
09/25/2019 09:51:26 PM INFO Product automaton size is: (33, 121)
09/25/2019 09:51:26 PM INFO Constructing product automaton with infinity DFA!
09/25/2019 09:51:26 PM INFO Product automaton size is: (31, 117)
09/25/2019 10:46:40 PM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/25/2019 10:46:40 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/25/2019 10:46:40 PM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/25/2019 10:46:40 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/25/2019 10:46:40 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/25/2019 10:46:40 PM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/25/2019 10:46:40 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/25/2019 10:46:40 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/25/2019 10:46:40 PM DEBUG [spec] No of nodes: 7
09/25/2019 10:46:40 PM DEBUG [spec] No of edges: 12
09/25/2019 10:46:40 PM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['X', 'N'])
09/25/2019 10:46:40 PM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/25/2019 10:46:40 PM DEBUG [hold] Prop: X Duration: 2 Negation: False Props: set(['X', 'N'])
09/25/2019 10:46:40 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 X )
09/25/2019 10:46:40 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 X ) 0 7 )
09/25/2019 10:46:40 PM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 X]^[0, 7]
09/25/2019 10:46:40 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 X ) 0 7 ) )
Directed: True
Multi: False
Props: {'X': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'X', 'weight': 0, 'label': u'X'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'X', 'weight': 0, 'label': u'X'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'X', 'weight': 0, 'label': u'X'})]
		
09/25/2019 10:46:40 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/25/2019 10:46:40 PM DEBUG [spec] No of nodes: 7
09/25/2019 10:46:40 PM DEBUG [spec] No of edges: 12
09/25/2019 10:46:40 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/25/2019 10:46:40 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/25/2019 10:46:40 PM INFO Constructing product automaton with infinity DFA!
09/25/2019 10:46:40 PM INFO Constructing product automaton with infinity DFA!
09/25/2019 10:46:40 PM INFO Product automaton size is: (33, 121)
09/25/2019 10:46:40 PM INFO Constructing product automaton with infinity DFA!
09/25/2019 10:46:40 PM INFO Product automaton size is: (31, 117)
09/25/2019 11:36:38 PM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/25/2019 11:36:38 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/25/2019 11:36:38 PM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/25/2019 11:36:38 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/25/2019 11:36:38 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/25/2019 11:36:38 PM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/25/2019 11:36:38 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/25/2019 11:36:38 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/25/2019 11:36:38 PM DEBUG [spec] No of nodes: 7
09/25/2019 11:36:38 PM DEBUG [spec] No of edges: 12
09/25/2019 11:36:38 PM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['N'])
09/25/2019 11:36:38 PM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/25/2019 11:38:34 PM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/25/2019 11:38:34 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/25/2019 11:38:34 PM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/25/2019 11:38:34 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/25/2019 11:38:34 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/25/2019 11:38:34 PM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/25/2019 11:38:34 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/25/2019 11:38:34 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/25/2019 11:38:34 PM DEBUG [spec] No of nodes: 7
09/25/2019 11:38:34 PM DEBUG [spec] No of edges: 12
09/25/2019 11:38:34 PM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['G', 'N'])
09/25/2019 11:38:34 PM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/25/2019 11:38:34 PM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['G', 'N'])
09/25/2019 11:38:34 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 G )
09/25/2019 11:38:34 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 G ) 0 7 )
09/25/2019 11:38:34 PM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 G]^[0, 7]
09/25/2019 11:38:34 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 G ) 0 7 ) )
Directed: True
Multi: False
Props: {'G': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'})]
		
09/25/2019 11:38:34 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/25/2019 11:38:34 PM DEBUG [spec] No of nodes: 7
09/25/2019 11:38:34 PM DEBUG [spec] No of edges: 12
09/25/2019 11:38:34 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/25/2019 11:38:34 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/25/2019 11:38:34 PM INFO Constructing product automaton with infinity DFA!
09/25/2019 11:38:34 PM INFO Constructing product automaton with infinity DFA!
09/25/2019 11:38:34 PM INFO Product automaton size is: (33, 121)
09/25/2019 11:38:34 PM INFO Constructing product automaton with infinity DFA!
09/25/2019 11:38:34 PM INFO Product automaton size is: (33, 122)
09/25/2019 11:39:15 PM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/25/2019 11:39:15 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/25/2019 11:39:15 PM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/25/2019 11:39:15 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/25/2019 11:39:15 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/25/2019 11:39:15 PM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/25/2019 11:39:15 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/25/2019 11:39:15 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/25/2019 11:39:15 PM DEBUG [spec] No of nodes: 7
09/25/2019 11:39:15 PM DEBUG [spec] No of edges: 12
09/25/2019 11:39:15 PM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['N'])
09/25/2019 11:39:15 PM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/25/2019 11:40:01 PM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/25/2019 11:40:01 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/25/2019 11:40:01 PM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/25/2019 11:40:01 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/25/2019 11:40:01 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/25/2019 11:40:01 PM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/25/2019 11:40:01 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/25/2019 11:40:01 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/25/2019 11:40:01 PM DEBUG [spec] No of nodes: 7
09/25/2019 11:40:01 PM DEBUG [spec] No of edges: 12
09/25/2019 11:40:01 PM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['G', 'N'])
09/25/2019 11:40:01 PM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/25/2019 11:40:01 PM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['G', 'N'])
09/25/2019 11:40:01 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 G )
09/25/2019 11:40:01 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 G ) 0 7 )
09/25/2019 11:40:01 PM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 G]^[0, 7]
09/25/2019 11:40:01 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 G ) 0 7 ) )
Directed: True
Multi: False
Props: {'G': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'})]
		
09/25/2019 11:40:01 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/25/2019 11:40:01 PM DEBUG [spec] No of nodes: 7
09/25/2019 11:40:01 PM DEBUG [spec] No of edges: 12
09/25/2019 11:40:01 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/25/2019 11:40:01 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/25/2019 11:40:01 PM INFO Constructing product automaton with infinity DFA!
09/25/2019 11:40:01 PM INFO Constructing product automaton with infinity DFA!
09/25/2019 11:40:01 PM INFO Product automaton size is: (33, 121)
09/25/2019 11:40:01 PM INFO Constructing product automaton with infinity DFA!
09/25/2019 11:40:01 PM INFO Product automaton size is: (33, 122)
09/26/2019 12:33:54 AM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 12:33:54 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/26/2019 12:33:54 AM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 12:33:54 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/26/2019 12:33:54 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/26/2019 12:33:54 AM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/26/2019 12:33:54 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/26/2019 12:33:54 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 12:33:54 AM DEBUG [spec] No of nodes: 7
09/26/2019 12:33:54 AM DEBUG [spec] No of edges: 12
09/26/2019 12:33:54 AM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 12:33:54 AM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/26/2019 12:33:54 AM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 12:33:54 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 G )
09/26/2019 12:33:54 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 G ) 0 7 )
09/26/2019 12:33:54 AM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 G]^[0, 7]
09/26/2019 12:33:54 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 G ) 0 7 ) )
Directed: True
Multi: False
Props: {'G': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'})]
		
09/26/2019 12:33:54 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 12:33:54 AM DEBUG [spec] No of nodes: 7
09/26/2019 12:33:54 AM DEBUG [spec] No of edges: 12
09/26/2019 12:33:54 AM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 12:33:54 AM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 12:33:54 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 12:33:54 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 12:33:54 AM INFO Product automaton size is: (33, 121)
09/26/2019 12:33:54 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 12:33:54 AM INFO Product automaton size is: (33, 122)
09/26/2019 12:46:45 AM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 12:46:45 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/26/2019 12:46:45 AM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 12:46:45 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/26/2019 12:46:45 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/26/2019 12:46:45 AM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/26/2019 12:46:45 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/26/2019 12:46:45 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 12:46:45 AM DEBUG [spec] No of nodes: 7
09/26/2019 12:46:45 AM DEBUG [spec] No of edges: 12
09/26/2019 12:46:45 AM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 12:46:45 AM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/26/2019 12:46:45 AM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 12:46:45 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 G )
09/26/2019 12:46:45 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 G ) 0 7 )
09/26/2019 12:46:45 AM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 G]^[0, 7]
09/26/2019 12:46:45 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 G ) 0 7 ) )
Directed: True
Multi: False
Props: {'G': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'})]
		
09/26/2019 12:46:45 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 12:46:45 AM DEBUG [spec] No of nodes: 7
09/26/2019 12:46:45 AM DEBUG [spec] No of edges: 12
09/26/2019 12:46:45 AM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 12:46:45 AM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 12:46:45 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 12:46:45 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 12:46:45 AM INFO Product automaton size is: (33, 121)
09/26/2019 12:46:45 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 12:46:45 AM INFO Product automaton size is: (33, 122)
09/26/2019 12:56:50 AM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 12:56:50 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/26/2019 12:56:50 AM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 12:56:50 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/26/2019 12:56:50 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/26/2019 12:56:50 AM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/26/2019 12:56:50 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/26/2019 12:56:50 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 12:56:50 AM DEBUG [spec] No of nodes: 7
09/26/2019 12:56:50 AM DEBUG [spec] No of edges: 12
09/26/2019 12:56:50 AM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 12:56:50 AM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/26/2019 12:56:50 AM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 12:56:50 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 G )
09/26/2019 12:56:50 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 G ) 0 7 )
09/26/2019 12:56:50 AM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 G]^[0, 7]
09/26/2019 12:56:50 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 G ) 0 7 ) )
Directed: True
Multi: False
Props: {'G': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'})]
		
09/26/2019 12:56:50 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 12:56:50 AM DEBUG [spec] No of nodes: 7
09/26/2019 12:56:50 AM DEBUG [spec] No of edges: 12
09/26/2019 12:56:50 AM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 12:56:50 AM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 01:01:13 AM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 01:01:13 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/26/2019 01:01:13 AM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 01:01:13 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/26/2019 01:01:13 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/26/2019 01:01:13 AM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/26/2019 01:01:13 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/26/2019 01:01:13 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 01:01:13 AM DEBUG [spec] No of nodes: 7
09/26/2019 01:01:13 AM DEBUG [spec] No of edges: 12
09/26/2019 01:01:13 AM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 01:01:13 AM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/26/2019 01:01:13 AM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 01:01:13 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 G )
09/26/2019 01:01:13 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 G ) 0 7 )
09/26/2019 01:01:13 AM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 G]^[0, 7]
09/26/2019 01:01:13 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 G ) 0 7 ) )
Directed: True
Multi: False
Props: {'G': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'})]
		
09/26/2019 01:01:13 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 01:01:13 AM DEBUG [spec] No of nodes: 7
09/26/2019 01:01:13 AM DEBUG [spec] No of edges: 12
09/26/2019 01:01:13 AM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 01:01:13 AM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 01:01:13 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 01:01:13 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 01:01:13 AM INFO Product automaton size is: (33, 121)
09/26/2019 01:01:13 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 01:01:13 AM INFO Product automaton size is: (33, 122)
09/26/2019 01:25:14 AM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 01:25:14 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/26/2019 01:25:14 AM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 01:25:14 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/26/2019 01:25:14 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/26/2019 01:25:14 AM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/26/2019 01:25:14 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/26/2019 01:25:14 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 01:25:14 AM DEBUG [spec] No of nodes: 7
09/26/2019 01:25:14 AM DEBUG [spec] No of edges: 12
09/26/2019 01:25:14 AM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 01:25:14 AM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/26/2019 01:25:14 AM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 01:25:14 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 G )
09/26/2019 01:25:14 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 G ) 0 7 )
09/26/2019 01:25:14 AM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 G]^[0, 7]
09/26/2019 01:25:14 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 G ) 0 7 ) )
Directed: True
Multi: False
Props: {'G': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'})]
		
09/26/2019 01:25:14 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 01:25:14 AM DEBUG [spec] No of nodes: 7
09/26/2019 01:25:14 AM DEBUG [spec] No of edges: 12
09/26/2019 01:25:14 AM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 01:25:14 AM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 01:25:14 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 01:25:14 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 01:25:14 AM INFO Product automaton size is: (33, 121)
09/26/2019 01:25:14 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 01:25:14 AM INFO Product automaton size is: (33, 122)
09/26/2019 01:26:32 AM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 01:26:32 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/26/2019 01:26:32 AM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 01:26:32 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/26/2019 01:26:32 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/26/2019 01:26:32 AM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/26/2019 01:26:32 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/26/2019 01:26:32 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 01:26:32 AM DEBUG [spec] No of nodes: 7
09/26/2019 01:26:32 AM DEBUG [spec] No of edges: 12
09/26/2019 01:26:32 AM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 01:26:32 AM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/26/2019 01:26:32 AM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 01:26:32 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 G )
09/26/2019 01:26:32 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 G ) 0 7 )
09/26/2019 01:26:32 AM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 G]^[0, 7]
09/26/2019 01:26:32 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 G ) 0 7 ) )
Directed: True
Multi: False
Props: {'G': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'})]
		
09/26/2019 01:26:32 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 01:26:32 AM DEBUG [spec] No of nodes: 7
09/26/2019 01:26:32 AM DEBUG [spec] No of edges: 12
09/26/2019 01:26:32 AM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 01:26:33 AM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 01:26:33 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 01:26:33 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 01:26:33 AM INFO Product automaton size is: (33, 121)
09/26/2019 01:26:33 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 01:26:33 AM INFO Product automaton size is: (33, 122)
09/26/2019 01:28:45 AM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 01:28:45 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/26/2019 01:28:45 AM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 01:28:45 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/26/2019 01:28:45 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/26/2019 01:28:45 AM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/26/2019 01:28:45 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/26/2019 01:28:45 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 01:28:45 AM DEBUG [spec] No of nodes: 7
09/26/2019 01:28:45 AM DEBUG [spec] No of edges: 12
09/26/2019 01:28:45 AM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 01:28:45 AM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/26/2019 01:28:45 AM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 01:28:45 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 G )
09/26/2019 01:28:45 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 G ) 0 7 )
09/26/2019 01:28:45 AM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 G]^[0, 7]
09/26/2019 01:28:45 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 G ) 0 7 ) )
Directed: True
Multi: False
Props: {'G': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'})]
		
09/26/2019 01:28:45 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 01:28:45 AM DEBUG [spec] No of nodes: 7
09/26/2019 01:28:45 AM DEBUG [spec] No of edges: 12
09/26/2019 01:28:45 AM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 01:28:45 AM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 01:28:45 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 01:28:45 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 01:28:45 AM INFO Product automaton size is: (33, 121)
09/26/2019 01:28:45 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 01:28:45 AM INFO Product automaton size is: (33, 122)
09/26/2019 01:44:22 AM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 01:44:22 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/26/2019 01:44:22 AM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 01:44:22 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/26/2019 01:44:22 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/26/2019 01:44:22 AM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/26/2019 01:44:22 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/26/2019 01:44:22 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 01:44:22 AM DEBUG [spec] No of nodes: 7
09/26/2019 01:44:22 AM DEBUG [spec] No of edges: 12
09/26/2019 01:44:22 AM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 01:44:22 AM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/26/2019 01:44:22 AM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 01:44:22 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 G )
09/26/2019 01:44:22 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 G ) 0 7 )
09/26/2019 01:44:22 AM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 G]^[0, 7]
09/26/2019 01:44:22 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 G ) 0 7 ) )
Directed: True
Multi: False
Props: {'G': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'})]
		
09/26/2019 01:44:22 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 01:44:22 AM DEBUG [spec] No of nodes: 7
09/26/2019 01:44:22 AM DEBUG [spec] No of edges: 12
09/26/2019 01:44:22 AM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 01:44:22 AM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 01:44:22 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 01:44:22 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 01:44:22 AM INFO Product automaton size is: (33, 121)
09/26/2019 01:44:22 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 01:44:22 AM INFO Product automaton size is: (33, 122)
09/26/2019 10:13:05 AM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 10:13:05 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/26/2019 10:13:05 AM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 10:13:05 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/26/2019 10:13:05 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/26/2019 10:13:05 AM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/26/2019 10:13:05 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/26/2019 10:13:05 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 10:13:05 AM DEBUG [spec] No of nodes: 7
09/26/2019 10:13:05 AM DEBUG [spec] No of edges: 12
09/26/2019 10:13:05 AM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 10:13:05 AM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/26/2019 10:13:05 AM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 10:13:05 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 G )
09/26/2019 10:13:05 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 G ) 0 7 )
09/26/2019 10:13:05 AM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 G]^[0, 7]
09/26/2019 10:13:05 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 G ) 0 7 ) )
Directed: True
Multi: False
Props: {'G': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'})]
		
09/26/2019 10:13:05 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 10:13:05 AM DEBUG [spec] No of nodes: 7
09/26/2019 10:13:05 AM DEBUG [spec] No of edges: 12
09/26/2019 10:13:05 AM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 10:13:05 AM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 10:13:05 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 10:13:05 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 10:13:05 AM INFO Product automaton size is: (33, 121)
09/26/2019 10:13:05 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 10:13:05 AM INFO Product automaton size is: (33, 122)
09/26/2019 10:18:52 AM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 10:18:52 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/26/2019 10:18:52 AM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 10:18:52 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/26/2019 10:18:52 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/26/2019 10:18:52 AM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/26/2019 10:18:52 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/26/2019 10:18:52 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 10:18:52 AM DEBUG [spec] No of nodes: 7
09/26/2019 10:18:52 AM DEBUG [spec] No of edges: 12
09/26/2019 10:18:52 AM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 10:18:52 AM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/26/2019 10:18:52 AM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 10:18:52 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 G )
09/26/2019 10:18:52 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 G ) 0 7 )
09/26/2019 10:18:52 AM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 G]^[0, 7]
09/26/2019 10:18:52 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 G ) 0 7 ) )
Directed: True
Multi: False
Props: {'G': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'})]
		
09/26/2019 10:18:52 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 10:18:52 AM DEBUG [spec] No of nodes: 7
09/26/2019 10:18:52 AM DEBUG [spec] No of edges: 12
09/26/2019 10:18:52 AM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 10:18:52 AM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 10:18:52 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 10:18:52 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 10:18:52 AM INFO Product automaton size is: (33, 121)
09/26/2019 10:18:52 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 10:18:52 AM INFO Product automaton size is: (33, 122)
09/26/2019 10:28:15 AM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 10:28:15 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/26/2019 10:28:15 AM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 10:28:15 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/26/2019 10:28:15 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/26/2019 10:28:15 AM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/26/2019 10:28:15 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/26/2019 10:28:15 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 10:28:15 AM DEBUG [spec] No of nodes: 7
09/26/2019 10:28:15 AM DEBUG [spec] No of edges: 12
09/26/2019 10:28:15 AM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 10:28:15 AM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/26/2019 10:28:15 AM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 10:28:15 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 G )
09/26/2019 10:28:15 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 G ) 0 7 )
09/26/2019 10:28:15 AM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 G]^[0, 7]
09/26/2019 10:28:15 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 G ) 0 7 ) )
Directed: True
Multi: False
Props: {'G': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'})]
		
09/26/2019 10:28:15 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 10:28:15 AM DEBUG [spec] No of nodes: 7
09/26/2019 10:28:15 AM DEBUG [spec] No of edges: 12
09/26/2019 10:28:15 AM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 10:28:15 AM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 10:28:15 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 10:28:15 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 10:28:15 AM INFO Product automaton size is: (33, 121)
09/26/2019 10:28:15 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 10:28:15 AM INFO Product automaton size is: (33, 122)
09/26/2019 10:38:06 AM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 10:38:06 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/26/2019 10:38:06 AM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 10:38:06 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/26/2019 10:38:06 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/26/2019 10:38:06 AM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/26/2019 10:38:06 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/26/2019 10:38:06 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 10:38:06 AM DEBUG [spec] No of nodes: 7
09/26/2019 10:38:06 AM DEBUG [spec] No of edges: 12
09/26/2019 10:38:06 AM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 10:38:06 AM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/26/2019 10:38:06 AM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 10:38:06 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 G )
09/26/2019 10:38:06 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 G ) 0 7 )
09/26/2019 10:38:06 AM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 G]^[0, 7]
09/26/2019 10:38:06 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 G ) 0 7 ) )
Directed: True
Multi: False
Props: {'G': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'})]
		
09/26/2019 10:38:06 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 10:38:06 AM DEBUG [spec] No of nodes: 7
09/26/2019 10:38:06 AM DEBUG [spec] No of edges: 12
09/26/2019 10:38:07 AM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 10:38:07 AM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 10:38:07 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 10:38:07 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 10:38:07 AM INFO Product automaton size is: (33, 121)
09/26/2019 10:38:07 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 10:38:07 AM INFO Product automaton size is: (33, 122)
09/26/2019 10:47:25 AM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 10:47:25 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/26/2019 10:47:25 AM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 10:47:25 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/26/2019 10:47:25 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/26/2019 10:47:25 AM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/26/2019 10:47:25 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/26/2019 10:47:25 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 10:47:25 AM DEBUG [spec] No of nodes: 7
09/26/2019 10:47:25 AM DEBUG [spec] No of edges: 12
09/26/2019 10:47:25 AM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 10:47:25 AM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/26/2019 10:47:25 AM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 10:47:25 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 G )
09/26/2019 10:47:25 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 G ) 0 7 )
09/26/2019 10:47:25 AM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 G]^[0, 7]
09/26/2019 10:47:25 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 G ) 0 7 ) )
Directed: True
Multi: False
Props: {'G': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'})]
		
09/26/2019 10:47:25 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 10:47:25 AM DEBUG [spec] No of nodes: 7
09/26/2019 10:47:25 AM DEBUG [spec] No of edges: 12
09/26/2019 10:47:25 AM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 10:47:25 AM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 10:47:25 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 10:47:25 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 10:47:25 AM INFO Product automaton size is: (33, 121)
09/26/2019 10:47:25 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 10:47:25 AM INFO Product automaton size is: (33, 122)
09/26/2019 10:51:20 AM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 10:51:20 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/26/2019 10:51:20 AM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 10:51:20 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/26/2019 10:51:20 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/26/2019 10:51:20 AM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/26/2019 10:51:20 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/26/2019 10:51:20 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 10:51:20 AM DEBUG [spec] No of nodes: 7
09/26/2019 10:51:20 AM DEBUG [spec] No of edges: 12
09/26/2019 10:51:20 AM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 10:51:20 AM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/26/2019 10:51:20 AM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 10:51:20 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 G )
09/26/2019 10:51:20 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 G ) 0 7 )
09/26/2019 10:51:20 AM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 G]^[0, 7]
09/26/2019 10:51:20 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 G ) 0 7 ) )
Directed: True
Multi: False
Props: {'G': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'})]
		
09/26/2019 10:51:20 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 10:51:20 AM DEBUG [spec] No of nodes: 7
09/26/2019 10:51:20 AM DEBUG [spec] No of edges: 12
09/26/2019 10:51:20 AM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 10:51:20 AM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 10:51:20 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 10:51:20 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 10:51:20 AM INFO Product automaton size is: (33, 121)
09/26/2019 10:51:20 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 10:51:20 AM INFO Product automaton size is: (33, 122)
09/26/2019 10:57:36 AM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 10:57:36 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/26/2019 10:57:36 AM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 10:57:36 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/26/2019 10:57:36 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/26/2019 10:57:36 AM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/26/2019 10:57:36 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/26/2019 10:57:36 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 10:57:36 AM DEBUG [spec] No of nodes: 7
09/26/2019 10:57:36 AM DEBUG [spec] No of edges: 12
09/26/2019 10:57:36 AM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 10:57:36 AM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/26/2019 10:57:36 AM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 10:57:36 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 G )
09/26/2019 10:57:36 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 G ) 0 7 )
09/26/2019 10:57:36 AM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 G]^[0, 7]
09/26/2019 10:57:36 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 G ) 0 7 ) )
Directed: True
Multi: False
Props: {'G': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'})]
		
09/26/2019 10:57:36 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 10:57:36 AM DEBUG [spec] No of nodes: 7
09/26/2019 10:57:36 AM DEBUG [spec] No of edges: 12
09/26/2019 10:57:36 AM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 10:57:36 AM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 10:57:36 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 10:57:36 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 10:57:36 AM INFO Product automaton size is: (33, 121)
09/26/2019 10:57:36 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 10:57:36 AM INFO Product automaton size is: (33, 122)
09/26/2019 11:01:56 AM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 11:01:56 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/26/2019 11:01:56 AM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 11:01:56 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/26/2019 11:01:56 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/26/2019 11:01:56 AM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/26/2019 11:01:56 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/26/2019 11:01:56 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 11:01:56 AM DEBUG [spec] No of nodes: 7
09/26/2019 11:01:56 AM DEBUG [spec] No of edges: 12
09/26/2019 11:01:56 AM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 11:01:56 AM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/26/2019 11:01:56 AM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 11:01:56 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 G )
09/26/2019 11:01:56 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 G ) 0 7 )
09/26/2019 11:01:56 AM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 G]^[0, 7]
09/26/2019 11:01:56 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 G ) 0 7 ) )
Directed: True
Multi: False
Props: {'G': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'})]
		
09/26/2019 11:01:56 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 11:01:56 AM DEBUG [spec] No of nodes: 7
09/26/2019 11:01:56 AM DEBUG [spec] No of edges: 12
09/26/2019 11:01:56 AM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 11:01:56 AM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 11:01:56 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 11:01:56 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 11:01:56 AM INFO Product automaton size is: (33, 121)
09/26/2019 11:01:56 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 11:01:56 AM INFO Product automaton size is: (33, 122)
09/26/2019 11:03:58 AM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 11:03:58 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/26/2019 11:03:58 AM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 11:03:58 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/26/2019 11:03:58 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/26/2019 11:03:58 AM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/26/2019 11:03:58 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/26/2019 11:03:58 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 11:03:58 AM DEBUG [spec] No of nodes: 7
09/26/2019 11:03:58 AM DEBUG [spec] No of edges: 12
09/26/2019 11:03:58 AM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 11:03:58 AM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/26/2019 11:03:58 AM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 11:03:58 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 G )
09/26/2019 11:03:58 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 G ) 0 7 )
09/26/2019 11:03:58 AM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 G]^[0, 7]
09/26/2019 11:03:58 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 G ) 0 7 ) )
Directed: True
Multi: False
Props: {'G': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'})]
		
09/26/2019 11:03:58 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 11:03:58 AM DEBUG [spec] No of nodes: 7
09/26/2019 11:03:58 AM DEBUG [spec] No of edges: 12
09/26/2019 11:03:58 AM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 11:03:58 AM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 11:03:58 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 11:03:58 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 11:03:58 AM INFO Product automaton size is: (33, 121)
09/26/2019 11:03:58 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 11:03:58 AM INFO Product automaton size is: (33, 122)
09/26/2019 11:06:11 AM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 11:06:11 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/26/2019 11:06:11 AM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 11:06:11 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/26/2019 11:06:11 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/26/2019 11:06:11 AM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/26/2019 11:06:11 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/26/2019 11:06:11 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 11:06:11 AM DEBUG [spec] No of nodes: 7
09/26/2019 11:06:11 AM DEBUG [spec] No of edges: 12
09/26/2019 11:06:11 AM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 11:06:11 AM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/26/2019 11:06:11 AM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 11:06:11 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 G )
09/26/2019 11:06:11 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 G ) 0 7 )
09/26/2019 11:06:11 AM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 G]^[0, 7]
09/26/2019 11:06:11 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 G ) 0 7 ) )
Directed: True
Multi: False
Props: {'G': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'})]
		
09/26/2019 11:06:11 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 11:06:11 AM DEBUG [spec] No of nodes: 7
09/26/2019 11:06:11 AM DEBUG [spec] No of edges: 12
09/26/2019 11:06:11 AM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 11:06:11 AM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 11:06:11 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 11:06:11 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 11:06:11 AM INFO Product automaton size is: (33, 121)
09/26/2019 11:06:11 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 11:06:11 AM INFO Product automaton size is: (33, 122)
09/26/2019 11:06:52 AM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 11:06:52 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/26/2019 11:06:52 AM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 11:06:52 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/26/2019 11:06:52 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/26/2019 11:06:52 AM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/26/2019 11:06:52 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/26/2019 11:06:52 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 11:06:52 AM DEBUG [spec] No of nodes: 7
09/26/2019 11:06:52 AM DEBUG [spec] No of edges: 12
09/26/2019 11:06:52 AM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 11:06:52 AM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/26/2019 11:06:52 AM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 11:06:52 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 G )
09/26/2019 11:06:52 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 G ) 0 7 )
09/26/2019 11:06:52 AM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 G]^[0, 7]
09/26/2019 11:06:52 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 G ) 0 7 ) )
Directed: True
Multi: False
Props: {'G': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'})]
		
09/26/2019 11:06:52 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 11:06:52 AM DEBUG [spec] No of nodes: 7
09/26/2019 11:06:52 AM DEBUG [spec] No of edges: 12
09/26/2019 11:06:52 AM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 11:06:52 AM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 11:06:52 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 11:06:52 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 11:06:52 AM INFO Product automaton size is: (33, 121)
09/26/2019 11:06:52 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 11:06:52 AM INFO Product automaton size is: (33, 122)
09/26/2019 11:07:30 AM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 11:07:30 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/26/2019 11:07:30 AM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 11:07:30 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/26/2019 11:07:30 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/26/2019 11:07:30 AM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/26/2019 11:07:30 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/26/2019 11:07:30 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 11:07:30 AM DEBUG [spec] No of nodes: 7
09/26/2019 11:07:30 AM DEBUG [spec] No of edges: 12
09/26/2019 11:07:30 AM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 11:07:30 AM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/26/2019 11:07:30 AM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 11:07:30 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 G )
09/26/2019 11:07:30 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 G ) 0 7 )
09/26/2019 11:07:30 AM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 G]^[0, 7]
09/26/2019 11:07:30 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 G ) 0 7 ) )
Directed: True
Multi: False
Props: {'G': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'})]
		
09/26/2019 11:07:30 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 11:07:30 AM DEBUG [spec] No of nodes: 7
09/26/2019 11:07:30 AM DEBUG [spec] No of edges: 12
09/26/2019 11:07:30 AM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 11:07:30 AM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 11:07:30 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 11:07:30 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 11:07:30 AM INFO Product automaton size is: (33, 121)
09/26/2019 11:07:30 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 11:07:30 AM INFO Product automaton size is: (33, 122)
09/26/2019 11:13:11 AM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 11:13:11 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/26/2019 11:13:11 AM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 11:13:11 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/26/2019 11:13:11 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/26/2019 11:13:11 AM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/26/2019 11:13:11 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/26/2019 11:13:11 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 11:13:11 AM DEBUG [spec] No of nodes: 7
09/26/2019 11:13:11 AM DEBUG [spec] No of edges: 12
09/26/2019 11:13:11 AM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 11:13:11 AM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/26/2019 11:13:11 AM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 11:13:11 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 G )
09/26/2019 11:13:11 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 G ) 0 7 )
09/26/2019 11:13:11 AM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 G]^[0, 7]
09/26/2019 11:13:11 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 G ) 0 7 ) )
Directed: True
Multi: False
Props: {'G': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'})]
		
09/26/2019 11:13:11 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 11:13:11 AM DEBUG [spec] No of nodes: 7
09/26/2019 11:13:11 AM DEBUG [spec] No of edges: 12
09/26/2019 11:13:11 AM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 11:13:11 AM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 11:13:11 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 11:13:11 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 11:13:11 AM INFO Product automaton size is: (33, 121)
09/26/2019 11:13:11 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 11:13:11 AM INFO Product automaton size is: (33, 122)
09/26/2019 11:15:44 AM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 11:15:44 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/26/2019 11:15:44 AM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 11:15:44 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/26/2019 11:15:44 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/26/2019 11:15:44 AM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/26/2019 11:15:44 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/26/2019 11:15:44 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 11:15:44 AM DEBUG [spec] No of nodes: 7
09/26/2019 11:15:44 AM DEBUG [spec] No of edges: 12
09/26/2019 11:15:44 AM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 11:15:44 AM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/26/2019 11:15:44 AM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 11:15:44 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 G )
09/26/2019 11:15:44 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 G ) 0 7 )
09/26/2019 11:15:44 AM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 G]^[0, 7]
09/26/2019 11:15:44 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 G ) 0 7 ) )
Directed: True
Multi: False
Props: {'G': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'})]
		
09/26/2019 11:15:44 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 11:15:44 AM DEBUG [spec] No of nodes: 7
09/26/2019 11:15:44 AM DEBUG [spec] No of edges: 12
09/26/2019 11:15:44 AM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 11:15:44 AM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 11:15:44 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 11:15:44 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 11:15:44 AM INFO Product automaton size is: (33, 121)
09/26/2019 11:15:44 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 11:15:44 AM INFO Product automaton size is: (33, 122)
09/26/2019 11:18:59 AM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 11:18:59 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/26/2019 11:18:59 AM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 11:18:59 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/26/2019 11:18:59 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/26/2019 11:18:59 AM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/26/2019 11:18:59 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/26/2019 11:18:59 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 11:18:59 AM DEBUG [spec] No of nodes: 7
09/26/2019 11:18:59 AM DEBUG [spec] No of edges: 12
09/26/2019 11:18:59 AM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 11:18:59 AM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/26/2019 11:18:59 AM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 11:18:59 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 G )
09/26/2019 11:18:59 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 G ) 0 7 )
09/26/2019 11:18:59 AM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 G]^[0, 7]
09/26/2019 11:18:59 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 G ) 0 7 ) )
Directed: True
Multi: False
Props: {'G': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'})]
		
09/26/2019 11:18:59 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 11:18:59 AM DEBUG [spec] No of nodes: 7
09/26/2019 11:18:59 AM DEBUG [spec] No of edges: 12
09/26/2019 11:18:59 AM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 11:18:59 AM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 11:18:59 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 11:18:59 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 11:18:59 AM INFO Product automaton size is: (33, 121)
09/26/2019 11:18:59 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 11:18:59 AM INFO Product automaton size is: (33, 122)
09/26/2019 11:21:29 AM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 11:21:29 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/26/2019 11:21:29 AM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 11:21:29 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/26/2019 11:21:29 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/26/2019 11:21:29 AM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/26/2019 11:21:29 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/26/2019 11:21:29 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 11:21:29 AM DEBUG [spec] No of nodes: 7
09/26/2019 11:21:29 AM DEBUG [spec] No of edges: 12
09/26/2019 11:21:29 AM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 11:21:29 AM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/26/2019 11:21:29 AM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 11:21:29 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 G )
09/26/2019 11:21:29 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 G ) 0 7 )
09/26/2019 11:21:29 AM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 G]^[0, 7]
09/26/2019 11:21:29 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 G ) 0 7 ) )
Directed: True
Multi: False
Props: {'G': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'})]
		
09/26/2019 11:21:29 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 11:21:29 AM DEBUG [spec] No of nodes: 7
09/26/2019 11:21:29 AM DEBUG [spec] No of edges: 12
09/26/2019 11:21:29 AM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 11:21:29 AM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 11:21:29 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 11:21:29 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 11:21:29 AM INFO Product automaton size is: (33, 121)
09/26/2019 11:21:29 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 11:21:29 AM INFO Product automaton size is: (33, 122)
09/26/2019 11:23:22 AM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 11:23:22 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/26/2019 11:23:22 AM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 11:23:22 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/26/2019 11:23:22 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/26/2019 11:23:22 AM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/26/2019 11:23:22 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/26/2019 11:23:22 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 11:23:22 AM DEBUG [spec] No of nodes: 7
09/26/2019 11:23:22 AM DEBUG [spec] No of edges: 12
09/26/2019 11:23:22 AM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 11:23:22 AM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/26/2019 11:23:22 AM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 11:23:22 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 G )
09/26/2019 11:23:22 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 G ) 0 7 )
09/26/2019 11:23:22 AM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 G]^[0, 7]
09/26/2019 11:23:22 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 G ) 0 7 ) )
Directed: True
Multi: False
Props: {'G': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'})]
		
09/26/2019 11:23:22 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 11:23:22 AM DEBUG [spec] No of nodes: 7
09/26/2019 11:23:22 AM DEBUG [spec] No of edges: 12
09/26/2019 11:23:22 AM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 11:23:22 AM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 11:23:22 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 11:23:22 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 11:23:22 AM INFO Product automaton size is: (33, 121)
09/26/2019 11:23:22 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 11:23:22 AM INFO Product automaton size is: (33, 122)
09/26/2019 11:25:24 AM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 11:25:24 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/26/2019 11:25:24 AM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 11:25:24 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/26/2019 11:25:24 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/26/2019 11:25:24 AM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/26/2019 11:25:24 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/26/2019 11:25:24 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 11:25:24 AM DEBUG [spec] No of nodes: 7
09/26/2019 11:25:24 AM DEBUG [spec] No of edges: 12
09/26/2019 11:25:24 AM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 11:25:24 AM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/26/2019 11:25:24 AM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 11:25:24 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 G )
09/26/2019 11:25:24 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 G ) 0 7 )
09/26/2019 11:25:24 AM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 G]^[0, 7]
09/26/2019 11:25:24 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 G ) 0 7 ) )
Directed: True
Multi: False
Props: {'G': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'})]
		
09/26/2019 11:25:24 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 11:25:24 AM DEBUG [spec] No of nodes: 7
09/26/2019 11:25:24 AM DEBUG [spec] No of edges: 12
09/26/2019 11:25:24 AM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 11:25:24 AM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 11:25:24 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 11:25:24 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 11:25:24 AM INFO Product automaton size is: (33, 121)
09/26/2019 11:25:24 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 11:25:24 AM INFO Product automaton size is: (33, 122)
09/26/2019 11:26:05 AM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 11:26:05 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/26/2019 11:26:05 AM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 11:26:05 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/26/2019 11:26:05 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/26/2019 11:26:05 AM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/26/2019 11:26:05 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/26/2019 11:26:05 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 11:26:05 AM DEBUG [spec] No of nodes: 7
09/26/2019 11:26:05 AM DEBUG [spec] No of edges: 12
09/26/2019 11:26:05 AM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 11:26:05 AM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/26/2019 11:26:05 AM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 11:26:05 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 G )
09/26/2019 11:26:05 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 G ) 0 7 )
09/26/2019 11:26:05 AM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 G]^[0, 7]
09/26/2019 11:26:05 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 G ) 0 7 ) )
Directed: True
Multi: False
Props: {'G': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'})]
		
09/26/2019 11:26:05 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 11:26:05 AM DEBUG [spec] No of nodes: 7
09/26/2019 11:26:05 AM DEBUG [spec] No of edges: 12
09/26/2019 11:26:05 AM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 11:26:05 AM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 11:26:05 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 11:26:05 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 11:26:05 AM INFO Product automaton size is: (33, 121)
09/26/2019 11:26:05 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 11:26:05 AM INFO Product automaton size is: (33, 122)
09/26/2019 11:26:58 AM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 11:26:58 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/26/2019 11:26:58 AM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 11:26:58 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/26/2019 11:26:58 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/26/2019 11:26:58 AM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/26/2019 11:26:58 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/26/2019 11:26:58 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 11:26:58 AM DEBUG [spec] No of nodes: 7
09/26/2019 11:26:58 AM DEBUG [spec] No of edges: 12
09/26/2019 11:26:58 AM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 11:26:58 AM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/26/2019 11:26:58 AM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 11:26:58 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 G )
09/26/2019 11:26:58 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 G ) 0 7 )
09/26/2019 11:26:58 AM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 G]^[0, 7]
09/26/2019 11:26:58 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 G ) 0 7 ) )
Directed: True
Multi: False
Props: {'G': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'})]
		
09/26/2019 11:26:58 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 11:26:58 AM DEBUG [spec] No of nodes: 7
09/26/2019 11:26:58 AM DEBUG [spec] No of edges: 12
09/26/2019 11:26:58 AM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 11:26:58 AM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 11:26:58 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 11:26:58 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 11:26:58 AM INFO Product automaton size is: (33, 121)
09/26/2019 11:26:58 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 11:26:58 AM INFO Product automaton size is: (33, 122)
09/26/2019 11:28:33 AM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 11:28:33 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/26/2019 11:28:33 AM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 11:28:33 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/26/2019 11:28:33 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/26/2019 11:28:33 AM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/26/2019 11:28:33 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/26/2019 11:28:33 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 11:28:33 AM DEBUG [spec] No of nodes: 7
09/26/2019 11:28:33 AM DEBUG [spec] No of edges: 12
09/26/2019 11:28:33 AM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 11:28:33 AM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/26/2019 11:28:33 AM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 11:28:33 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 G )
09/26/2019 11:28:33 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 G ) 0 7 )
09/26/2019 11:28:33 AM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 G]^[0, 7]
09/26/2019 11:28:33 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 G ) 0 7 ) )
Directed: True
Multi: False
Props: {'G': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'})]
		
09/26/2019 11:28:33 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 11:28:33 AM DEBUG [spec] No of nodes: 7
09/26/2019 11:28:33 AM DEBUG [spec] No of edges: 12
09/26/2019 11:28:33 AM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 11:28:33 AM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 11:28:33 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 11:28:33 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 11:28:33 AM INFO Product automaton size is: (33, 121)
09/26/2019 11:28:33 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 11:28:33 AM INFO Product automaton size is: (33, 122)
09/26/2019 11:29:30 AM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 11:29:30 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/26/2019 11:29:30 AM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 11:29:30 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/26/2019 11:29:30 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/26/2019 11:29:30 AM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/26/2019 11:29:30 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/26/2019 11:29:30 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 11:29:30 AM DEBUG [spec] No of nodes: 7
09/26/2019 11:29:30 AM DEBUG [spec] No of edges: 12
09/26/2019 11:29:30 AM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 11:29:30 AM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/26/2019 11:29:30 AM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 11:29:30 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 G )
09/26/2019 11:29:30 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 G ) 0 7 )
09/26/2019 11:29:30 AM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 G]^[0, 7]
09/26/2019 11:29:30 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 G ) 0 7 ) )
Directed: True
Multi: False
Props: {'G': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'})]
		
09/26/2019 11:29:30 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 11:29:30 AM DEBUG [spec] No of nodes: 7
09/26/2019 11:29:30 AM DEBUG [spec] No of edges: 12
09/26/2019 11:29:30 AM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 11:29:30 AM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 11:29:30 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 11:29:30 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 11:29:30 AM INFO Product automaton size is: (33, 121)
09/26/2019 11:29:30 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 11:29:30 AM INFO Product automaton size is: (33, 122)
09/26/2019 11:30:36 AM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 11:30:36 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/26/2019 11:30:36 AM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 11:30:36 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/26/2019 11:30:36 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/26/2019 11:30:36 AM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/26/2019 11:30:36 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/26/2019 11:30:36 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 11:30:36 AM DEBUG [spec] No of nodes: 7
09/26/2019 11:30:36 AM DEBUG [spec] No of edges: 12
09/26/2019 11:30:36 AM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 11:30:36 AM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/26/2019 11:30:36 AM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 11:30:36 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 G )
09/26/2019 11:30:36 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 G ) 0 7 )
09/26/2019 11:30:36 AM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 G]^[0, 7]
09/26/2019 11:30:36 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 G ) 0 7 ) )
Directed: True
Multi: False
Props: {'G': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'})]
		
09/26/2019 11:30:36 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 11:30:36 AM DEBUG [spec] No of nodes: 7
09/26/2019 11:30:36 AM DEBUG [spec] No of edges: 12
09/26/2019 11:30:36 AM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 11:30:36 AM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 11:30:36 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 11:30:36 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 11:30:36 AM INFO Product automaton size is: (33, 121)
09/26/2019 11:30:36 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 11:30:36 AM INFO Product automaton size is: (33, 122)
09/26/2019 11:36:20 AM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 11:36:20 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/26/2019 11:36:20 AM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 11:36:20 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/26/2019 11:36:20 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/26/2019 11:36:20 AM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/26/2019 11:36:20 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/26/2019 11:36:20 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 11:36:20 AM DEBUG [spec] No of nodes: 7
09/26/2019 11:36:20 AM DEBUG [spec] No of edges: 12
09/26/2019 11:36:20 AM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 11:36:20 AM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/26/2019 11:36:20 AM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 11:36:20 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 G )
09/26/2019 11:36:20 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 G ) 0 7 )
09/26/2019 11:36:20 AM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 G]^[0, 7]
09/26/2019 11:36:20 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 G ) 0 7 ) )
Directed: True
Multi: False
Props: {'G': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'})]
		
09/26/2019 11:36:20 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 11:36:20 AM DEBUG [spec] No of nodes: 7
09/26/2019 11:36:20 AM DEBUG [spec] No of edges: 12
09/26/2019 11:36:20 AM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 11:36:20 AM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 11:36:20 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 11:36:20 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 11:36:20 AM INFO Product automaton size is: (33, 121)
09/26/2019 11:36:20 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 11:36:20 AM INFO Product automaton size is: (33, 122)
09/26/2019 11:53:48 AM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 11:53:48 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/26/2019 11:53:48 AM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 11:53:48 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/26/2019 11:53:48 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/26/2019 11:53:48 AM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/26/2019 11:53:48 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/26/2019 11:53:48 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 11:53:48 AM DEBUG [spec] No of nodes: 7
09/26/2019 11:53:48 AM DEBUG [spec] No of edges: 12
09/26/2019 11:53:48 AM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 11:53:48 AM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/26/2019 11:53:48 AM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 11:53:48 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 G )
09/26/2019 11:53:48 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 G ) 0 7 )
09/26/2019 11:53:48 AM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 G]^[0, 7]
09/26/2019 11:53:48 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 G ) 0 7 ) )
Directed: True
Multi: False
Props: {'G': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'})]
		
09/26/2019 11:53:48 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 11:53:48 AM DEBUG [spec] No of nodes: 7
09/26/2019 11:53:48 AM DEBUG [spec] No of edges: 12
09/26/2019 11:53:48 AM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 11:53:48 AM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 11:53:48 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 11:53:48 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 11:53:48 AM INFO Product automaton size is: (33, 121)
09/26/2019 11:53:48 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 11:53:48 AM INFO Product automaton size is: (33, 122)
09/26/2019 11:58:32 AM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 11:58:32 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/26/2019 11:58:32 AM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 11:58:32 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/26/2019 11:58:32 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/26/2019 11:58:32 AM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/26/2019 11:58:32 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/26/2019 11:58:32 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 11:58:32 AM DEBUG [spec] No of nodes: 7
09/26/2019 11:58:32 AM DEBUG [spec] No of edges: 12
09/26/2019 11:58:32 AM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 11:58:32 AM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/26/2019 11:58:32 AM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 11:58:32 AM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 G )
09/26/2019 11:58:32 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 G ) 0 7 )
09/26/2019 11:58:32 AM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 G]^[0, 7]
09/26/2019 11:58:32 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 G ) 0 7 ) )
Directed: True
Multi: False
Props: {'G': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'})]
		
09/26/2019 11:58:32 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 11:58:32 AM DEBUG [spec] No of nodes: 7
09/26/2019 11:58:32 AM DEBUG [spec] No of edges: 12
09/26/2019 11:58:32 AM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 11:58:32 AM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 11:58:32 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 11:58:32 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 11:58:32 AM INFO Product automaton size is: (33, 121)
09/26/2019 11:58:32 AM INFO Constructing product automaton with infinity DFA!
09/26/2019 11:58:32 AM INFO Product automaton size is: (33, 122)
09/26/2019 12:01:11 PM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 12:01:11 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/26/2019 12:01:11 PM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 12:01:11 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/26/2019 12:01:11 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/26/2019 12:01:11 PM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/26/2019 12:01:11 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/26/2019 12:01:11 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 12:01:11 PM DEBUG [spec] No of nodes: 7
09/26/2019 12:01:11 PM DEBUG [spec] No of edges: 12
09/26/2019 12:01:11 PM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 12:01:11 PM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/26/2019 12:01:11 PM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 12:01:11 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 G )
09/26/2019 12:01:11 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 G ) 0 7 )
09/26/2019 12:01:11 PM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 G]^[0, 7]
09/26/2019 12:01:11 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 G ) 0 7 ) )
Directed: True
Multi: False
Props: {'G': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'})]
		
09/26/2019 12:01:11 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 12:01:11 PM DEBUG [spec] No of nodes: 7
09/26/2019 12:01:11 PM DEBUG [spec] No of edges: 12
09/26/2019 12:01:11 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 12:01:11 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 12:01:11 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 12:01:11 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 12:01:11 PM INFO Product automaton size is: (33, 121)
09/26/2019 12:01:11 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 12:01:11 PM INFO Product automaton size is: (33, 122)
09/26/2019 12:06:36 PM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 12:06:36 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/26/2019 12:06:36 PM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 12:06:36 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/26/2019 12:06:36 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/26/2019 12:06:36 PM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/26/2019 12:06:36 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/26/2019 12:06:36 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 12:06:36 PM DEBUG [spec] No of nodes: 7
09/26/2019 12:06:36 PM DEBUG [spec] No of edges: 12
09/26/2019 12:06:36 PM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 12:06:36 PM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/26/2019 12:06:36 PM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 12:06:36 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 G )
09/26/2019 12:06:36 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 G ) 0 7 )
09/26/2019 12:06:36 PM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 G]^[0, 7]
09/26/2019 12:06:36 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 G ) 0 7 ) )
Directed: True
Multi: False
Props: {'G': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'})]
		
09/26/2019 12:06:36 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 12:06:36 PM DEBUG [spec] No of nodes: 7
09/26/2019 12:06:36 PM DEBUG [spec] No of edges: 12
09/26/2019 12:06:36 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 12:06:36 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 12:06:36 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 12:06:36 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 12:06:36 PM INFO Product automaton size is: (33, 121)
09/26/2019 12:06:36 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 12:06:36 PM INFO Product automaton size is: (33, 122)
09/26/2019 12:12:58 PM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 12:12:58 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/26/2019 12:12:58 PM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 12:12:58 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/26/2019 12:12:58 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/26/2019 12:12:58 PM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/26/2019 12:12:58 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/26/2019 12:12:58 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 12:12:58 PM DEBUG [spec] No of nodes: 7
09/26/2019 12:12:58 PM DEBUG [spec] No of edges: 12
09/26/2019 12:12:58 PM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 12:12:58 PM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/26/2019 12:12:58 PM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 12:12:58 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 G )
09/26/2019 12:12:58 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 G ) 0 7 )
09/26/2019 12:12:58 PM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 G]^[0, 7]
09/26/2019 12:12:58 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 G ) 0 7 ) )
Directed: True
Multi: False
Props: {'G': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'})]
		
09/26/2019 12:12:58 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 12:12:58 PM DEBUG [spec] No of nodes: 7
09/26/2019 12:12:58 PM DEBUG [spec] No of edges: 12
09/26/2019 12:12:58 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 12:12:58 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 12:12:58 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 12:12:58 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 12:12:58 PM INFO Product automaton size is: (33, 121)
09/26/2019 12:12:58 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 12:12:58 PM INFO Product automaton size is: (33, 122)
09/26/2019 12:16:41 PM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 12:16:41 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/26/2019 12:16:41 PM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 12:16:41 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/26/2019 12:16:41 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/26/2019 12:16:41 PM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/26/2019 12:16:41 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/26/2019 12:16:41 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 12:16:41 PM DEBUG [spec] No of nodes: 7
09/26/2019 12:16:41 PM DEBUG [spec] No of edges: 12
09/26/2019 12:16:41 PM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 12:16:41 PM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/26/2019 12:16:41 PM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 12:16:41 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 G )
09/26/2019 12:16:41 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 G ) 0 7 )
09/26/2019 12:16:41 PM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 G]^[0, 7]
09/26/2019 12:16:41 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 G ) 0 7 ) )
Directed: True
Multi: False
Props: {'G': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'})]
		
09/26/2019 12:16:41 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 12:16:41 PM DEBUG [spec] No of nodes: 7
09/26/2019 12:16:41 PM DEBUG [spec] No of edges: 12
09/26/2019 12:16:41 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 12:16:41 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 12:16:41 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 12:16:41 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 12:16:41 PM INFO Product automaton size is: (33, 121)
09/26/2019 12:16:41 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 12:16:41 PM INFO Product automaton size is: (33, 122)
09/26/2019 12:19:12 PM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 12:19:12 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/26/2019 12:19:12 PM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 12:19:12 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/26/2019 12:19:12 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/26/2019 12:19:12 PM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/26/2019 12:19:12 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/26/2019 12:19:12 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 12:19:12 PM DEBUG [spec] No of nodes: 7
09/26/2019 12:19:12 PM DEBUG [spec] No of edges: 12
09/26/2019 12:19:12 PM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 12:19:12 PM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/26/2019 12:19:12 PM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 12:19:12 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 G )
09/26/2019 12:19:12 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 G ) 0 7 )
09/26/2019 12:19:12 PM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 G]^[0, 7]
09/26/2019 12:19:12 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 G ) 0 7 ) )
Directed: True
Multi: False
Props: {'G': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'})]
		
09/26/2019 12:19:12 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 12:19:12 PM DEBUG [spec] No of nodes: 7
09/26/2019 12:19:12 PM DEBUG [spec] No of edges: 12
09/26/2019 12:19:12 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 12:19:12 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 12:19:12 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 12:19:12 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 12:19:12 PM INFO Product automaton size is: (33, 121)
09/26/2019 12:19:12 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 12:19:12 PM INFO Product automaton size is: (33, 122)
09/26/2019 12:20:51 PM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 12:20:51 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/26/2019 12:20:51 PM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 12:20:51 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/26/2019 12:20:51 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/26/2019 12:20:51 PM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/26/2019 12:20:51 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/26/2019 12:20:51 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 12:20:51 PM DEBUG [spec] No of nodes: 7
09/26/2019 12:20:51 PM DEBUG [spec] No of edges: 12
09/26/2019 12:20:51 PM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 12:20:51 PM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/26/2019 12:20:51 PM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 12:20:51 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 G )
09/26/2019 12:20:51 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 G ) 0 7 )
09/26/2019 12:20:51 PM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 G]^[0, 7]
09/26/2019 12:20:51 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 G ) 0 7 ) )
Directed: True
Multi: False
Props: {'G': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'})]
		
09/26/2019 12:20:51 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 12:20:51 PM DEBUG [spec] No of nodes: 7
09/26/2019 12:20:51 PM DEBUG [spec] No of edges: 12
09/26/2019 12:20:51 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 12:20:51 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 12:20:51 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 12:20:51 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 12:20:51 PM INFO Product automaton size is: (33, 121)
09/26/2019 12:20:51 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 12:20:51 PM INFO Product automaton size is: (33, 122)
09/26/2019 12:21:56 PM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 12:21:56 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/26/2019 12:21:56 PM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 12:21:56 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/26/2019 12:21:56 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/26/2019 12:21:56 PM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/26/2019 12:21:56 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/26/2019 12:21:56 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 12:21:56 PM DEBUG [spec] No of nodes: 7
09/26/2019 12:21:56 PM DEBUG [spec] No of edges: 12
09/26/2019 12:21:56 PM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 12:21:56 PM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/26/2019 12:21:56 PM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 12:21:56 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 G )
09/26/2019 12:21:56 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 G ) 0 7 )
09/26/2019 12:21:56 PM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 G]^[0, 7]
09/26/2019 12:21:56 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 G ) 0 7 ) )
Directed: True
Multi: False
Props: {'G': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'})]
		
09/26/2019 12:21:56 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 12:21:56 PM DEBUG [spec] No of nodes: 7
09/26/2019 12:21:56 PM DEBUG [spec] No of edges: 12
09/26/2019 12:21:56 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 12:21:56 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 12:21:56 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 12:21:56 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 12:21:56 PM INFO Product automaton size is: (33, 121)
09/26/2019 12:21:56 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 12:21:56 PM INFO Product automaton size is: (33, 122)
09/26/2019 12:25:19 PM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 12:25:19 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/26/2019 12:25:19 PM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 12:25:19 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/26/2019 12:25:19 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/26/2019 12:25:19 PM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/26/2019 12:25:19 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/26/2019 12:25:19 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 12:25:19 PM DEBUG [spec] No of nodes: 7
09/26/2019 12:25:19 PM DEBUG [spec] No of edges: 12
09/26/2019 12:25:19 PM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 12:25:19 PM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/26/2019 12:25:19 PM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 12:25:19 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 G )
09/26/2019 12:25:19 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 G ) 0 7 )
09/26/2019 12:25:19 PM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 G]^[0, 7]
09/26/2019 12:25:19 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 G ) 0 7 ) )
Directed: True
Multi: False
Props: {'G': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'})]
		
09/26/2019 12:25:19 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 12:25:19 PM DEBUG [spec] No of nodes: 7
09/26/2019 12:25:19 PM DEBUG [spec] No of edges: 12
09/26/2019 12:25:19 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 12:25:19 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 12:25:19 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 12:25:19 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 12:25:19 PM INFO Product automaton size is: (33, 121)
09/26/2019 12:25:19 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 12:25:19 PM INFO Product automaton size is: (33, 122)
09/26/2019 12:25:44 PM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 12:25:44 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/26/2019 12:25:44 PM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 12:25:44 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/26/2019 12:25:44 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/26/2019 12:25:44 PM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/26/2019 12:25:44 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/26/2019 12:25:44 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 12:25:44 PM DEBUG [spec] No of nodes: 7
09/26/2019 12:25:44 PM DEBUG [spec] No of edges: 12
09/26/2019 12:25:44 PM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 12:25:44 PM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/26/2019 12:25:44 PM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 12:25:44 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 G )
09/26/2019 12:25:44 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 G ) 0 7 )
09/26/2019 12:25:44 PM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 G]^[0, 7]
09/26/2019 12:25:44 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 G ) 0 7 ) )
Directed: True
Multi: False
Props: {'G': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'})]
		
09/26/2019 12:25:44 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 12:25:44 PM DEBUG [spec] No of nodes: 7
09/26/2019 12:25:44 PM DEBUG [spec] No of edges: 12
09/26/2019 12:25:44 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 12:25:44 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 12:25:44 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 12:25:44 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 12:25:44 PM INFO Product automaton size is: (33, 121)
09/26/2019 12:25:44 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 12:25:44 PM INFO Product automaton size is: (33, 122)
09/26/2019 12:26:14 PM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 12:26:14 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/26/2019 12:26:14 PM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 12:26:14 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/26/2019 12:26:14 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/26/2019 12:26:14 PM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/26/2019 12:26:14 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/26/2019 12:26:14 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 12:26:14 PM DEBUG [spec] No of nodes: 7
09/26/2019 12:26:14 PM DEBUG [spec] No of edges: 12
09/26/2019 12:26:14 PM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 12:26:14 PM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/26/2019 12:26:14 PM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 12:26:14 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 G )
09/26/2019 12:26:14 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 G ) 0 7 )
09/26/2019 12:26:14 PM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 G]^[0, 7]
09/26/2019 12:26:14 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 G ) 0 7 ) )
Directed: True
Multi: False
Props: {'G': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'})]
		
09/26/2019 12:26:14 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 12:26:14 PM DEBUG [spec] No of nodes: 7
09/26/2019 12:26:14 PM DEBUG [spec] No of edges: 12
09/26/2019 12:26:14 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 12:26:14 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 12:26:14 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 12:26:14 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 12:26:14 PM INFO Product automaton size is: (33, 121)
09/26/2019 12:26:14 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 12:26:14 PM INFO Product automaton size is: (33, 122)
09/26/2019 12:29:57 PM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 12:29:57 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/26/2019 12:29:57 PM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 12:29:57 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/26/2019 12:29:57 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/26/2019 12:29:57 PM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/26/2019 12:29:57 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/26/2019 12:29:57 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 12:29:57 PM DEBUG [spec] No of nodes: 7
09/26/2019 12:29:57 PM DEBUG [spec] No of edges: 12
09/26/2019 12:29:57 PM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['D', 'N'])
09/26/2019 12:29:57 PM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/26/2019 12:29:57 PM DEBUG [hold] Prop: D Duration: 2 Negation: False Props: set(['D', 'N'])
09/26/2019 12:29:57 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 D )
09/26/2019 12:29:57 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 D ) 0 7 )
09/26/2019 12:29:57 PM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 D]^[0, 7]
09/26/2019 12:29:57 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 D ) 0 7 ) )
Directed: True
Multi: False
Props: {'D': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'D', 'weight': 0, 'label': u'D'})]
		
09/26/2019 12:29:57 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 12:29:57 PM DEBUG [spec] No of nodes: 7
09/26/2019 12:29:57 PM DEBUG [spec] No of edges: 12
09/26/2019 12:29:57 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 12:29:57 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 12:29:57 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 12:29:57 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 12:29:57 PM INFO Product automaton size is: (33, 121)
09/26/2019 12:29:57 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 12:29:57 PM INFO Product automaton size is: (33, 120)
09/26/2019 12:31:22 PM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 12:31:22 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/26/2019 12:31:22 PM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 12:31:22 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/26/2019 12:31:22 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/26/2019 12:31:22 PM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/26/2019 12:31:22 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/26/2019 12:31:22 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 12:31:22 PM DEBUG [spec] No of nodes: 7
09/26/2019 12:31:22 PM DEBUG [spec] No of edges: 12
09/26/2019 12:31:22 PM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['K', 'N'])
09/26/2019 12:31:22 PM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/26/2019 12:31:22 PM DEBUG [hold] Prop: K Duration: 2 Negation: False Props: set(['K', 'N'])
09/26/2019 12:31:22 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 K )
09/26/2019 12:31:22 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 K ) 0 7 )
09/26/2019 12:31:22 PM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 K]^[0, 7]
09/26/2019 12:31:22 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 K ) 0 7 ) )
Directed: True
Multi: False
Props: {'K': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'K', 'weight': 0, 'label': u'K'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'K', 'weight': 0, 'label': u'K'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'K', 'weight': 0, 'label': u'K'})]
		
09/26/2019 12:31:22 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 12:31:22 PM DEBUG [spec] No of nodes: 7
09/26/2019 12:31:22 PM DEBUG [spec] No of edges: 12
09/26/2019 12:31:22 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 12:31:22 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 12:31:22 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 12:31:22 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 12:31:22 PM INFO Product automaton size is: (33, 121)
09/26/2019 12:31:22 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 12:31:22 PM INFO Product automaton size is: (33, 121)
09/26/2019 12:31:50 PM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 12:31:50 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/26/2019 12:31:50 PM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 12:31:50 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/26/2019 12:31:50 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/26/2019 12:31:50 PM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/26/2019 12:31:50 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/26/2019 12:31:50 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 12:31:50 PM DEBUG [spec] No of nodes: 7
09/26/2019 12:31:50 PM DEBUG [spec] No of edges: 12
09/26/2019 12:31:50 PM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 12:31:50 PM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/26/2019 12:31:50 PM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 12:31:50 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 G )
09/26/2019 12:31:50 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 G ) 0 7 )
09/26/2019 12:31:50 PM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 G]^[0, 7]
09/26/2019 12:31:50 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 G ) 0 7 ) )
Directed: True
Multi: False
Props: {'G': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'})]
		
09/26/2019 12:31:50 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 12:31:50 PM DEBUG [spec] No of nodes: 7
09/26/2019 12:31:50 PM DEBUG [spec] No of edges: 12
09/26/2019 12:31:50 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 12:31:50 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 12:31:50 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 12:31:50 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 12:31:50 PM INFO Product automaton size is: (33, 121)
09/26/2019 12:31:50 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 12:31:50 PM INFO Product automaton size is: (33, 122)
09/26/2019 12:33:34 PM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 12:33:34 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/26/2019 12:33:34 PM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 12:33:34 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/26/2019 12:33:34 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/26/2019 12:33:34 PM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/26/2019 12:33:34 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/26/2019 12:33:34 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 12:33:34 PM DEBUG [spec] No of nodes: 7
09/26/2019 12:33:34 PM DEBUG [spec] No of edges: 12
09/26/2019 12:33:34 PM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['D', 'N'])
09/26/2019 12:33:34 PM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/26/2019 12:33:34 PM DEBUG [hold] Prop: D Duration: 2 Negation: False Props: set(['D', 'N'])
09/26/2019 12:33:34 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 D )
09/26/2019 12:33:34 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 D ) 0 7 )
09/26/2019 12:33:34 PM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 D]^[0, 7]
09/26/2019 12:33:34 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 D ) 0 7 ) )
Directed: True
Multi: False
Props: {'D': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'D', 'weight': 0, 'label': u'D'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'D', 'weight': 0, 'label': u'D'})]
		
09/26/2019 12:33:34 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 12:33:34 PM DEBUG [spec] No of nodes: 7
09/26/2019 12:33:34 PM DEBUG [spec] No of edges: 12
09/26/2019 12:33:34 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 12:33:34 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 12:33:34 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 12:33:34 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 12:33:34 PM INFO Product automaton size is: (33, 121)
09/26/2019 12:33:34 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 12:33:34 PM INFO Product automaton size is: (33, 120)
09/26/2019 12:37:44 PM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 12:37:44 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/26/2019 12:37:44 PM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 12:37:44 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/26/2019 12:37:44 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/26/2019 12:37:44 PM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/26/2019 12:37:44 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/26/2019 12:37:44 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 12:37:44 PM DEBUG [spec] No of nodes: 7
09/26/2019 12:37:44 PM DEBUG [spec] No of edges: 12
09/26/2019 12:37:44 PM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['K', 'N'])
09/26/2019 12:37:44 PM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/26/2019 12:37:44 PM DEBUG [hold] Prop: K Duration: 2 Negation: False Props: set(['K', 'N'])
09/26/2019 12:37:44 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 K )
09/26/2019 12:37:44 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 K ) 0 7 )
09/26/2019 12:37:44 PM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 K]^[0, 7]
09/26/2019 12:37:44 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 K ) 0 7 ) )
Directed: True
Multi: False
Props: {'K': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'K', 'weight': 0, 'label': u'K'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'K', 'weight': 0, 'label': u'K'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'K', 'weight': 0, 'label': u'K'})]
		
09/26/2019 12:37:44 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 12:37:44 PM DEBUG [spec] No of nodes: 7
09/26/2019 12:37:44 PM DEBUG [spec] No of edges: 12
09/26/2019 12:37:44 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 12:37:44 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 12:37:44 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 12:37:44 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 12:37:44 PM INFO Product automaton size is: (33, 121)
09/26/2019 12:37:44 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 12:37:44 PM INFO Product automaton size is: (33, 121)
09/26/2019 12:39:05 PM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 12:39:05 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/26/2019 12:39:05 PM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 12:39:05 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/26/2019 12:39:05 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/26/2019 12:39:05 PM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/26/2019 12:39:05 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/26/2019 12:39:05 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 12:39:05 PM DEBUG [spec] No of nodes: 7
09/26/2019 12:39:05 PM DEBUG [spec] No of edges: 12
09/26/2019 12:39:05 PM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['K', 'N'])
09/26/2019 12:39:05 PM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/26/2019 12:39:05 PM DEBUG [hold] Prop: K Duration: 2 Negation: False Props: set(['K', 'N'])
09/26/2019 12:39:05 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 K )
09/26/2019 12:39:05 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 K ) 0 7 )
09/26/2019 12:39:05 PM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 K]^[0, 7]
09/26/2019 12:39:05 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 K ) 0 7 ) )
Directed: True
Multi: False
Props: {'K': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'K', 'weight': 0, 'label': u'K'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'K', 'weight': 0, 'label': u'K'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'K', 'weight': 0, 'label': u'K'})]
		
09/26/2019 12:39:05 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 12:39:05 PM DEBUG [spec] No of nodes: 7
09/26/2019 12:39:05 PM DEBUG [spec] No of edges: 12
09/26/2019 12:39:05 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 12:39:05 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 12:39:05 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 12:39:05 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 12:39:05 PM INFO Product automaton size is: (33, 121)
09/26/2019 12:39:05 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 12:39:05 PM INFO Product automaton size is: (33, 121)
09/26/2019 12:43:11 PM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 12:43:11 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/26/2019 12:43:11 PM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 12:43:11 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/26/2019 12:43:11 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/26/2019 12:43:11 PM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/26/2019 12:43:11 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/26/2019 12:43:11 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 12:43:11 PM DEBUG [spec] No of nodes: 7
09/26/2019 12:43:11 PM DEBUG [spec] No of edges: 12
09/26/2019 12:43:11 PM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['E', 'N'])
09/26/2019 12:43:11 PM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/26/2019 12:43:11 PM DEBUG [hold] Prop: E Duration: 2 Negation: False Props: set(['E', 'N'])
09/26/2019 12:43:11 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 E )
09/26/2019 12:43:11 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 E ) 0 7 )
09/26/2019 12:43:11 PM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 E]^[0, 7]
09/26/2019 12:43:11 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 E ) 0 7 ) )
Directed: True
Multi: False
Props: {'E': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'E', 'weight': 0, 'label': u'E'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'E', 'weight': 0, 'label': u'E'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'E', 'weight': 0, 'label': u'E'})]
		
09/26/2019 12:43:11 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 12:43:11 PM DEBUG [spec] No of nodes: 7
09/26/2019 12:43:11 PM DEBUG [spec] No of edges: 12
09/26/2019 12:43:11 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 12:43:11 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 12:43:11 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 12:43:11 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 12:43:11 PM INFO Product automaton size is: (33, 121)
09/26/2019 12:43:11 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 12:43:11 PM INFO Product automaton size is: (33, 121)
09/26/2019 12:56:32 PM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 12:56:32 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/26/2019 12:56:32 PM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 12:56:32 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/26/2019 12:56:32 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/26/2019 12:56:32 PM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/26/2019 12:56:32 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/26/2019 12:56:32 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 12:56:32 PM DEBUG [spec] No of nodes: 7
09/26/2019 12:56:32 PM DEBUG [spec] No of edges: 12
09/26/2019 12:56:32 PM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 12:56:32 PM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/26/2019 12:56:32 PM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 12:56:32 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 G )
09/26/2019 12:56:32 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 G ) 0 7 )
09/26/2019 12:56:32 PM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 G]^[0, 7]
09/26/2019 12:56:32 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 G ) 0 7 ) )
Directed: True
Multi: False
Props: {'G': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'})]
		
09/26/2019 12:56:32 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 12:56:32 PM DEBUG [spec] No of nodes: 7
09/26/2019 12:56:32 PM DEBUG [spec] No of edges: 12
09/26/2019 12:56:32 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 12:56:32 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 12:56:32 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 12:56:32 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 12:56:32 PM INFO Product automaton size is: (33, 121)
09/26/2019 12:56:32 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 12:56:32 PM INFO Product automaton size is: (33, 122)
09/26/2019 01:03:05 PM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 01:03:05 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/26/2019 01:03:05 PM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 01:03:05 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/26/2019 01:03:05 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/26/2019 01:03:05 PM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/26/2019 01:03:05 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/26/2019 01:03:05 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 01:03:05 PM DEBUG [spec] No of nodes: 7
09/26/2019 01:03:05 PM DEBUG [spec] No of edges: 12
09/26/2019 01:03:05 PM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 01:03:05 PM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/26/2019 01:03:05 PM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 01:03:05 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 G )
09/26/2019 01:03:05 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 G ) 0 7 )
09/26/2019 01:03:05 PM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 G]^[0, 7]
09/26/2019 01:03:05 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 G ) 0 7 ) )
Directed: True
Multi: False
Props: {'G': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'})]
		
09/26/2019 01:03:05 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 01:03:05 PM DEBUG [spec] No of nodes: 7
09/26/2019 01:03:05 PM DEBUG [spec] No of edges: 12
09/26/2019 01:03:05 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 01:03:05 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 01:03:05 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 01:03:05 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 01:03:05 PM INFO Product automaton size is: (33, 121)
09/26/2019 01:03:05 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 01:03:05 PM INFO Product automaton size is: (33, 122)
09/26/2019 01:04:53 PM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 01:04:53 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/26/2019 01:04:53 PM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 01:04:53 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/26/2019 01:04:53 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/26/2019 01:04:53 PM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/26/2019 01:04:53 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/26/2019 01:04:53 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 01:04:53 PM DEBUG [spec] No of nodes: 7
09/26/2019 01:04:53 PM DEBUG [spec] No of edges: 12
09/26/2019 01:04:53 PM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 01:04:53 PM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/26/2019 01:04:53 PM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 01:04:53 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 G )
09/26/2019 01:04:53 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 G ) 0 7 )
09/26/2019 01:04:53 PM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 G]^[0, 7]
09/26/2019 01:04:53 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 G ) 0 7 ) )
Directed: True
Multi: False
Props: {'G': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'})]
		
09/26/2019 01:04:53 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 01:04:53 PM DEBUG [spec] No of nodes: 7
09/26/2019 01:04:53 PM DEBUG [spec] No of edges: 12
09/26/2019 01:04:53 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 01:04:53 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 01:04:53 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 01:04:53 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 01:04:53 PM INFO Product automaton size is: (33, 121)
09/26/2019 01:04:53 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 01:04:53 PM INFO Product automaton size is: (33, 122)
09/26/2019 01:11:49 PM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 01:11:49 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/26/2019 01:11:49 PM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 01:11:49 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/26/2019 01:11:49 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/26/2019 01:11:49 PM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/26/2019 01:11:49 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/26/2019 01:11:49 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 01:11:49 PM DEBUG [spec] No of nodes: 7
09/26/2019 01:11:49 PM DEBUG [spec] No of edges: 12
09/26/2019 01:11:49 PM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 01:11:49 PM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/26/2019 01:11:49 PM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 01:11:49 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 G )
09/26/2019 01:11:49 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 G ) 0 7 )
09/26/2019 01:11:49 PM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 G]^[0, 7]
09/26/2019 01:11:49 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 G ) 0 7 ) )
Directed: True
Multi: False
Props: {'G': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'})]
		
09/26/2019 01:11:49 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 01:11:49 PM DEBUG [spec] No of nodes: 7
09/26/2019 01:11:49 PM DEBUG [spec] No of edges: 12
09/26/2019 01:11:49 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 01:11:49 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 01:11:49 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 01:11:49 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 01:11:49 PM INFO Product automaton size is: (33, 121)
09/26/2019 01:11:49 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 01:11:49 PM INFO Product automaton size is: (33, 122)
09/26/2019 01:25:23 PM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 01:25:23 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/26/2019 01:25:23 PM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 01:25:23 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/26/2019 01:25:23 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/26/2019 01:25:23 PM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/26/2019 01:25:23 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/26/2019 01:25:23 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 01:25:23 PM DEBUG [spec] No of nodes: 7
09/26/2019 01:25:23 PM DEBUG [spec] No of edges: 12
09/26/2019 01:25:23 PM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 01:25:23 PM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/26/2019 01:25:23 PM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 01:25:23 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 G )
09/26/2019 01:25:23 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 G ) 0 7 )
09/26/2019 01:25:23 PM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 G]^[0, 7]
09/26/2019 01:25:23 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 G ) 0 7 ) )
Directed: True
Multi: False
Props: {'G': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'})]
		
09/26/2019 01:25:23 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 01:25:23 PM DEBUG [spec] No of nodes: 7
09/26/2019 01:25:23 PM DEBUG [spec] No of edges: 12
09/26/2019 01:25:23 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 01:25:23 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 01:25:23 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 01:25:23 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 01:25:23 PM INFO Product automaton size is: (33, 121)
09/26/2019 01:25:23 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 01:25:23 PM INFO Product automaton size is: (33, 122)
09/26/2019 01:29:46 PM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 01:29:46 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/26/2019 01:29:46 PM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 01:29:46 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/26/2019 01:29:46 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/26/2019 01:29:46 PM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/26/2019 01:29:46 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/26/2019 01:29:46 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 01:29:46 PM DEBUG [spec] No of nodes: 7
09/26/2019 01:29:46 PM DEBUG [spec] No of edges: 12
09/26/2019 01:29:46 PM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 01:29:46 PM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/26/2019 01:29:46 PM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 01:29:46 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 G )
09/26/2019 01:29:46 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 G ) 0 7 )
09/26/2019 01:29:46 PM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 G]^[0, 7]
09/26/2019 01:29:46 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 G ) 0 7 ) )
Directed: True
Multi: False
Props: {'G': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'})]
		
09/26/2019 01:29:46 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 01:29:46 PM DEBUG [spec] No of nodes: 7
09/26/2019 01:29:46 PM DEBUG [spec] No of edges: 12
09/26/2019 01:29:46 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 01:29:46 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 01:29:46 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 01:29:46 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 01:29:46 PM INFO Product automaton size is: (33, 121)
09/26/2019 01:29:46 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 01:29:46 PM INFO Product automaton size is: (33, 122)
09/26/2019 01:31:57 PM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 01:31:57 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/26/2019 01:31:57 PM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 01:31:57 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/26/2019 01:31:57 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/26/2019 01:31:57 PM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/26/2019 01:31:57 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/26/2019 01:31:57 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 01:31:57 PM DEBUG [spec] No of nodes: 7
09/26/2019 01:31:57 PM DEBUG [spec] No of edges: 12
09/26/2019 01:31:57 PM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 01:31:57 PM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/26/2019 01:31:57 PM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 01:31:57 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 G )
09/26/2019 01:31:57 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 G ) 0 7 )
09/26/2019 01:31:57 PM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 G]^[0, 7]
09/26/2019 01:31:57 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 G ) 0 7 ) )
Directed: True
Multi: False
Props: {'G': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'})]
		
09/26/2019 01:31:57 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 01:31:57 PM DEBUG [spec] No of nodes: 7
09/26/2019 01:31:57 PM DEBUG [spec] No of edges: 12
09/26/2019 01:31:57 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 01:31:57 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 01:31:57 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 01:31:57 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 01:31:57 PM INFO Product automaton size is: (33, 121)
09/26/2019 01:31:57 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 01:31:57 PM INFO Product automaton size is: (33, 122)
09/26/2019 01:37:59 PM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 01:37:59 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/26/2019 01:37:59 PM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 01:37:59 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/26/2019 01:37:59 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/26/2019 01:37:59 PM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/26/2019 01:37:59 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/26/2019 01:37:59 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 01:37:59 PM DEBUG [spec] No of nodes: 7
09/26/2019 01:37:59 PM DEBUG [spec] No of edges: 12
09/26/2019 01:37:59 PM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 01:37:59 PM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/26/2019 01:37:59 PM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 01:37:59 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 G )
09/26/2019 01:37:59 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 G ) 0 7 )
09/26/2019 01:37:59 PM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 G]^[0, 7]
09/26/2019 01:37:59 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 G ) 0 7 ) )
Directed: True
Multi: False
Props: {'G': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'})]
		
09/26/2019 01:37:59 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 01:37:59 PM DEBUG [spec] No of nodes: 7
09/26/2019 01:37:59 PM DEBUG [spec] No of edges: 12
09/26/2019 01:37:59 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 01:37:59 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 01:37:59 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 01:37:59 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 01:37:59 PM INFO Product automaton size is: (33, 121)
09/26/2019 01:37:59 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 01:37:59 PM INFO Product automaton size is: (33, 122)
09/26/2019 01:40:46 PM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 01:40:46 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/26/2019 01:40:46 PM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 01:40:46 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/26/2019 01:40:46 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/26/2019 01:40:46 PM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/26/2019 01:40:46 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/26/2019 01:40:46 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 01:40:46 PM DEBUG [spec] No of nodes: 7
09/26/2019 01:40:46 PM DEBUG [spec] No of edges: 12
09/26/2019 01:40:46 PM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 01:40:46 PM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/26/2019 01:40:46 PM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 01:40:46 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 G )
09/26/2019 01:40:46 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 G ) 0 7 )
09/26/2019 01:40:46 PM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 G]^[0, 7]
09/26/2019 01:40:46 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 G ) 0 7 ) )
Directed: True
Multi: False
Props: {'G': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'})]
		
09/26/2019 01:40:46 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 01:40:46 PM DEBUG [spec] No of nodes: 7
09/26/2019 01:40:46 PM DEBUG [spec] No of edges: 12
09/26/2019 01:40:46 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 01:40:46 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 01:40:46 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 01:40:46 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 01:40:46 PM INFO Product automaton size is: (33, 121)
09/26/2019 01:40:46 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 01:40:46 PM INFO Product automaton size is: (33, 122)
09/26/2019 01:42:45 PM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 01:42:45 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/26/2019 01:42:45 PM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 01:42:45 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/26/2019 01:42:45 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/26/2019 01:42:45 PM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/26/2019 01:42:45 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/26/2019 01:42:45 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 01:42:45 PM DEBUG [spec] No of nodes: 7
09/26/2019 01:42:45 PM DEBUG [spec] No of edges: 12
09/26/2019 01:42:45 PM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 01:42:45 PM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/26/2019 01:42:45 PM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 01:42:45 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 G )
09/26/2019 01:42:45 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 G ) 0 7 )
09/26/2019 01:42:45 PM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 G]^[0, 7]
09/26/2019 01:42:45 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 G ) 0 7 ) )
Directed: True
Multi: False
Props: {'G': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'})]
		
09/26/2019 01:42:45 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 01:42:45 PM DEBUG [spec] No of nodes: 7
09/26/2019 01:42:45 PM DEBUG [spec] No of edges: 12
09/26/2019 01:42:45 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 01:42:45 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 01:42:45 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 01:42:45 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 01:42:45 PM INFO Product automaton size is: (33, 121)
09/26/2019 01:42:45 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 01:42:45 PM INFO Product automaton size is: (33, 122)
09/26/2019 02:19:09 PM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 02:19:09 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/26/2019 02:19:09 PM DEBUG [hold] Prop: P Duration: 2 Negation: False Props: set(['P', 'F'])
09/26/2019 02:19:09 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 P )
09/26/2019 02:19:09 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 F ) 0 7 ) DFA2: (Eventually (Hold 2 P ) 0 7 )
09/26/2019 02:19:09 PM DEBUG [spec] spec: [H^2 F]^[0, 7] * [H^2 P]^[0, 7]
09/26/2019 02:19:09 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 F ) 0 7 ) (Eventually (Hold 2 P ) 0 7 ) )
Directed: True
Multi: False
Props: {'P': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'P', 'weight': 0, 'label': u'P'})]
		
09/26/2019 02:19:09 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 02:19:09 PM DEBUG [spec] No of nodes: 7
09/26/2019 02:19:09 PM DEBUG [spec] No of edges: 12
09/26/2019 02:19:09 PM DEBUG [hold] Prop: N Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 02:19:09 PM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 N )
09/26/2019 02:19:09 PM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['G', 'N'])
09/26/2019 02:19:09 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 G )
09/26/2019 02:19:09 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 N ) 0 8 ) DFA2: (Eventually (Hold 2 G ) 0 7 )
09/26/2019 02:19:09 PM DEBUG [spec] spec: [H^2 N]^[0, 8] * [H^2 G]^[0, 7]
09/26/2019 02:19:09 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 N ) 0 8 ) (Eventually (Hold 2 G ) 0 7 ) )
Directed: True
Multi: False
Props: {'G': 1, 'N': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'N', 'weight': 0, 'label': u'N'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'})]
		
09/26/2019 02:19:09 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/26/2019 02:19:09 PM DEBUG [spec] No of nodes: 7
09/26/2019 02:19:09 PM DEBUG [spec] No of edges: 12
09/26/2019 02:19:09 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 02:19:09 PM DEBUG [extend_ts] TS: (15, 57) ETS:(15, 57)
09/26/2019 02:19:09 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 02:19:09 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 02:19:10 PM INFO Product automaton size is: (33, 121)
09/26/2019 02:19:10 PM INFO Constructing product automaton with infinity DFA!
09/26/2019 02:19:10 PM INFO Product automaton size is: (33, 122)

11/27/2019 03:37:34 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
11/27/2019 03:37:34 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 r21 )
11/27/2019 03:37:34 PM DEBUG [hold] Prop: r12 Duration: 2 Negation: False Props: set(['r12', 'r21'])
11/27/2019 03:37:34 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 r12 )
11/27/2019 03:37:34 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 7 ) DFA2: (Eventually (Hold 2 r12 ) 0 7 )
11/27/2019 03:37:34 PM DEBUG [spec] spec: [H^2 r21]^[0, 7] * [H^2 r12]^[0, 7]
11/27/2019 03:37:34 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 7 ) (Eventually (Hold 2 r12 ) 0 7 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
11/27/2019 03:37:34 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

11/27/2019 03:37:34 PM DEBUG [spec] No of nodes: 7
11/27/2019 03:37:34 PM DEBUG [spec] No of edges: 12
11/27/2019 03:37:34 PM DEBUG 
End of translate


11/27/2019 03:37:34 PM INFO The bound of formula "[H^2 r21]^[0, 7] * [H^2 r12]^[0, 7]" is (5, 15)!
11/27/2019 03:37:34 PM INFO Translated formula "[H^2 r21]^[0, 7] * [H^2 r12]^[0, 7]" to infinity DFA of size (7, 12)!
11/27/2019 03:37:34 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r23', 'r21'])
11/27/2019 03:37:34 PM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 r21 )
11/27/2019 03:37:34 PM DEBUG [hold] Prop: r23 Duration: 2 Negation: False Props: set(['r23', 'r21'])
11/27/2019 03:37:34 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 r23 )
11/27/2019 03:37:34 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 8 ) DFA2: (Eventually (Hold 2 r23 ) 0 7 )
11/27/2019 03:37:34 PM DEBUG [spec] spec: [H^2 r21]^[0, 8] * [H^2 r23]^[0, 7]
11/27/2019 03:37:34 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 8 ) (Eventually (Hold 2 r23 ) 0 7 ) )
Directed: True
Multi: False
Props: {'r23': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r23', 'weight': 0, 'label': u'r23'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r23', 'weight': 0, 'label': u'r23'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'r23', 'weight': 0, 'label': u'r23'})]
		
11/27/2019 03:37:34 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

11/27/2019 03:37:34 PM DEBUG [spec] No of nodes: 7
11/27/2019 03:37:34 PM DEBUG [spec] No of edges: 12
11/27/2019 03:37:34 PM DEBUG 
End of translate


11/27/2019 03:37:34 PM INFO The bound of formula "[H^2 r21]^[0, 8] * [H^2 r23]^[0, 7]" is (5, 16)!
11/27/2019 03:37:34 PM INFO Translated formula "[H^2 r21]^[0, 8] * [H^2 r23]^[0, 7]" to infinity DFA of size (7, 12)!
11/27/2019 03:37:34 PM DEBUG 

Start policy computation

11/27/2019 03:37:34 PM DEBUG [extend_ts] TS: (34, 228) ETS:(34, 228)
11/27/2019 03:37:34 PM DEBUG [extend_ts] TS: (34, 228) ETS:(34, 228)
11/27/2019 03:37:34 PM INFO Constructing product automaton with infinity DFA!
11/27/2019 03:37:34 PM INFO Product automaton size is: (71, 470)
11/27/2019 03:37:34 PM INFO Constructing product automaton with infinity DFA!
11/27/2019 03:37:34 PM INFO Product automaton size is: (71, 469)
11/27/2019 03:37:34 PM INFO Generated control policy is: r32 -> 1 -> r26
11/27/2019 03:37:34 PM INFO Generated control policy is: r14 -> 1 -> r7 -> 1 -> r12 -> 1 -> r12 -> 1 -> r12
11/27/2019 03:37:34 PM INFO Max deadline: 2
11/27/2019 03:37:34 PM INFO Generated output word is: [(), (), (), ('r21',), ('r21',), ('r21',), (), (), ('r12',), ('r12',), ('r12',)]
11/27/2019 03:37:34 PM INFO Generated control policy is: Base -> 1 -> r25 -> 1 -> r26 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r14 -> 1 -> r7 -> 1 -> r12 -> 1 -> r12 -> 1 -> r12
11/27/2019 03:37:34 PM INFO Max deadline: -4
11/27/2019 03:37:34 PM INFO Generated output word is: [(), (), ('r21',), ('r21',), ('r21',), (), ('r23',), ('r23',), ('r23',)]
11/27/2019 03:37:34 PM INFO Generated control policy is: Base2 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r28 -> 1 -> r23 -> 1 -> r23 -> 1 -> r23

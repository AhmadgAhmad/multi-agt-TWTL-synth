01/10/2020 09:31:47 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
01/10/2020 09:31:47 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 r21 )
01/10/2020 09:31:47 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
01/10/2020 09:31:47 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 1 r12 )
01/10/2020 09:31:47 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 7 ) DFA2: (Eventually (Hold 1 r12 ) 0 7 )
01/10/2020 09:31:47 PM DEBUG [spec] spec: [H^2 r21]^[0, 7] * [H^1 r12]^[0, 7]
01/10/2020 09:31:47 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 7 ) (Eventually (Hold 1 r12 ) 0 7 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
01/10/2020 09:31:47 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

01/10/2020 09:31:47 PM DEBUG [spec] No of nodes: 6
01/10/2020 09:31:47 PM DEBUG [spec] No of edges: 10
01/10/2020 09:31:47 PM DEBUG 
End of translate


01/10/2020 09:31:47 PM INFO The bound of formula "[H^2 r21]^[0, 7] * [H^1 r12]^[0, 7]" is (4, 15)!
01/10/2020 09:31:47 PM INFO Translated formula "[H^2 r21]^[0, 7] * [H^1 r12]^[0, 7]" to infinity DFA of size (6, 10)!
01/10/2020 09:31:47 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r23', 'r21'])
01/10/2020 09:31:47 PM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 r21 )
01/10/2020 09:31:47 PM DEBUG [hold] Prop: r23 Duration: 1 Negation: False Props: set(['r23', 'r21'])
01/10/2020 09:31:47 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 1 r23 )
01/10/2020 09:31:47 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 8 ) DFA2: (Eventually (Hold 1 r23 ) 0 7 )
01/10/2020 09:31:47 PM DEBUG [spec] spec: [H^2 r21]^[0, 8] * [H^1 r23]^[0, 7]
01/10/2020 09:31:47 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 8 ) (Eventually (Hold 1 r23 ) 0 7 ) )
Directed: True
Multi: False
Props: {'r23': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r23', 'weight': 0, 'label': u'r23'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r23', 'weight': 0, 'label': u'r23'})]
		
01/10/2020 09:31:47 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

01/10/2020 09:31:47 PM DEBUG [spec] No of nodes: 6
01/10/2020 09:31:47 PM DEBUG [spec] No of edges: 10
01/10/2020 09:31:47 PM DEBUG 
End of translate


01/10/2020 09:31:47 PM INFO The bound of formula "[H^2 r21]^[0, 8] * [H^1 r23]^[0, 7]" is (4, 16)!
01/10/2020 09:31:47 PM INFO Translated formula "[H^2 r21]^[0, 8] * [H^1 r23]^[0, 7]" to infinity DFA of size (6, 10)!
01/10/2020 09:31:47 PM DEBUG [hold] Prop: r31 Duration: 2 Negation: False Props: set(['r31', 'r10'])
01/10/2020 09:31:47 PM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 r31 )
01/10/2020 09:31:47 PM DEBUG [hold] Prop: r10 Duration: 1 Negation: False Props: set(['r31', 'r10'])
01/10/2020 09:31:47 PM DEBUG [eventually] Low: 0 High: 10 DFA: (Hold 1 r10 )
01/10/2020 09:31:47 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r31 ) 0 8 ) DFA2: (Eventually (Hold 1 r10 ) 0 10 )
01/10/2020 09:31:47 PM DEBUG [spec] spec: [H^2 r31]^[0, 8] * [H^1 r10]^[0, 10]
01/10/2020 09:31:47 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r31 ) 0 8 ) (Eventually (Hold 1 r10 ) 0 10 ) )
Directed: True
Multi: False
Props: {'r31': 1, 'r10': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3]), 'guard': u'r31', 'weight': 0, 'label': u'r31'}), (1, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'r31', 'weight': 0, 'label': u'r31'}), (2, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3]), 'guard': u'r31', 'weight': 0, 'label': u'r31'}), (3, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([2, 3]), 'guard': u'r10', 'weight': 0, 'label': u'r10'}), (4, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([2, 3]), 'guard': u'r10', 'weight': 0, 'label': u'r10'})]
		
01/10/2020 09:31:47 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

01/10/2020 09:31:47 PM DEBUG [spec] No of nodes: 6
01/10/2020 09:31:47 PM DEBUG [spec] No of edges: 10
01/10/2020 09:31:47 PM DEBUG 
End of translate


01/10/2020 09:31:47 PM INFO The bound of formula "[H^2 r31]^[0, 8] * [H^1 r10]^[0, 10]" is (4, 19)!
01/10/2020 09:31:47 PM INFO Translated formula "[H^2 r31]^[0, 8] * [H^1 r10]^[0, 10]" to infinity DFA of size (6, 10)!
01/10/2020 09:31:47 PM DEBUG 

Start policy computation

01/10/2020 09:31:47 PM DEBUG [extend_ts] TS: (106, 1734) ETS:(106, 1734)
01/10/2020 09:31:47 PM DEBUG [extend_ts] TS: (106, 1734) ETS:(106, 1734)
01/10/2020 09:31:48 PM DEBUG [extend_ts] TS: (106, 1734) ETS:(106, 1734)
01/10/2020 09:31:48 PM INFO Constructing product automaton with infinity DFA!
01/10/2020 09:31:48 PM INFO Product automaton size is: (214, 3485)
01/10/2020 09:31:48 PM INFO Constructing product automaton with infinity DFA!
01/10/2020 09:31:48 PM INFO Product automaton size is: (214, 3485)
01/10/2020 09:31:48 PM INFO Constructing product automaton with infinity DFA!
01/10/2020 09:31:48 PM INFO Product automaton size is: (214, 3480)
01/10/2020 09:31:50 PM INFO Generated control policy is: r26 -> 1 -> r26
01/10/2020 09:31:50 PM INFO Generated control policy is: r15 -> 1 -> r10 -> 1 -> r10
01/10/2020 09:31:50 PM INFO Max deadline: -1
01/10/2020 09:31:50 PM INFO Generated control policy is: Base -> 1 -> r31 -> 1 -> r26 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r14 -> 1 -> r13 -> 1 -> r12 -> 1 -> r12
01/10/2020 09:31:50 PM INFO Max deadline: -5
01/10/2020 09:31:50 PM INFO Generated control policy is: Base2 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r22 -> 1 -> r23 -> 1 -> r23
01/10/2020 09:31:50 PM INFO Max deadline: -1
01/10/2020 09:31:50 PM INFO Generated control policy is: Base3 -> 1 -> r7 -> 1 -> r13 -> 1 -> r19 -> 1 -> r25 -> 1 -> r31 -> 1 -> r31 -> 1 -> r31 -> 1 -> r26 -> 1 -> r21 -> 1 -> r15 -> 1 -> r10 -> 1 -> r10

09/15/2019 06:31:00 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'G'])
09/15/2019 06:31:00 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 2 A )
09/15/2019 06:31:00 PM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['A', 'G'])
09/15/2019 06:31:00 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 G )
09/15/2019 06:31:00 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 A ) 0 3 ) DFA2: (Eventually (Hold 2 G ) 0 7 )
09/15/2019 06:31:00 PM DEBUG [spec] spec: [H^2 A]^[0, 3] * [H^2 G]^[0, 7]
09/15/2019 06:31:00 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 A ) 0 3 ) (Eventually (Hold 2 G ) 0 7 ) )
Directed: True
Multi: False
Props: {'A': 1, 'G': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (4, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (5, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'})]
		
09/15/2019 06:31:00 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/15/2019 06:31:00 PM DEBUG [spec] No of nodes: 7
09/15/2019 06:31:00 PM DEBUG [spec] No of edges: 12
09/15/2019 06:31:00 PM DEBUG alphabet: {'A': 1, 'G': 2}
09/15/2019 06:31:00 PM DEBUG (0, 0): {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:31:00 PM DEBUG (0, 1): {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}
09/15/2019 06:31:00 PM DEBUG (1, 0): {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:31:00 PM DEBUG (1, 2): {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}
09/15/2019 06:31:00 PM DEBUG (2, 0): {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:31:00 PM DEBUG (2, 3): {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}
09/15/2019 06:31:00 PM DEBUG (3, 3): {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:31:00 PM DEBUG (3, 4): {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}
09/15/2019 06:31:00 PM DEBUG (4, 3): {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:31:00 PM DEBUG (4, 5): {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}
09/15/2019 06:31:00 PM DEBUG (5, 3): {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:31:00 PM DEBUG (5, 6): {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}
09/15/2019 06:31:00 PM DEBUG 
End of translate


09/15/2019 06:31:00 PM INFO The bound of formula "[H^2 A]^[0, 3] * [H^2 G]^[0, 7]" is (5, 11)!
09/15/2019 06:31:00 PM INFO Translated formula "[H^2 A]^[0, 3] * [H^2 G]^[0, 7]" to infinity DFA of size (7, 12)!
09/15/2019 06:31:00 PM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['A', 'G'])
09/15/2019 06:31:00 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 2 G )
09/15/2019 06:31:00 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'G'])
09/15/2019 06:31:00 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 A )
09/15/2019 06:31:00 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 G ) 0 3 ) DFA2: (Eventually (Hold 2 A ) 0 7 )
09/15/2019 06:31:00 PM DEBUG [spec] spec: [H^2 G]^[0, 3] * [H^2 A]^[0, 7]
09/15/2019 06:31:00 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 G ) 0 3 ) (Eventually (Hold 2 A ) 0 7 ) )
Directed: True
Multi: False
Props: {'A': 1, 'G': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'})]
		
09/15/2019 06:31:00 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/15/2019 06:31:00 PM DEBUG [spec] No of nodes: 7
09/15/2019 06:31:00 PM DEBUG [spec] No of edges: 12
09/15/2019 06:31:00 PM DEBUG alphabet: {'A': 1, 'G': 2}
09/15/2019 06:31:00 PM DEBUG (0, 0): {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:31:00 PM DEBUG (0, 1): {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}
09/15/2019 06:31:00 PM DEBUG (1, 0): {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:31:00 PM DEBUG (1, 2): {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}
09/15/2019 06:31:00 PM DEBUG (2, 0): {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:31:00 PM DEBUG (2, 3): {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}
09/15/2019 06:31:00 PM DEBUG (3, 3): {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:31:00 PM DEBUG (3, 4): {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}
09/15/2019 06:31:00 PM DEBUG (4, 3): {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:31:00 PM DEBUG (4, 5): {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}
09/15/2019 06:31:00 PM DEBUG (5, 3): {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:31:00 PM DEBUG (5, 6): {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}
09/15/2019 06:31:00 PM DEBUG 
End of translate


09/15/2019 06:31:00 PM INFO The bound of formula "[H^2 G]^[0, 3] * [H^2 A]^[0, 7]" is (5, 11)!
09/15/2019 06:31:00 PM INFO Translated formula "[H^2 G]^[0, 3] * [H^2 A]^[0, 7]" to infinity DFA of size (7, 12)!
09/15/2019 06:31:00 PM DEBUG [hold] Prop: C Duration: 2 Negation: False Props: set(['C', 'F'])
09/15/2019 06:31:00 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 2 C )
09/15/2019 06:31:00 PM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['C', 'F'])
09/15/2019 06:31:00 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/15/2019 06:31:00 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 C ) 0 3 ) DFA2: (Eventually (Hold 2 F ) 0 7 )
09/15/2019 06:31:00 PM DEBUG [spec] spec: [H^2 C]^[0, 3] * [H^2 F]^[0, 7]
09/15/2019 06:31:00 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 C ) 0 3 ) (Eventually (Hold 2 F ) 0 7 ) )
Directed: True
Multi: False
Props: {'C': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3]), 'guard': u'C', 'weight': 0, 'label': u'C'}), (1, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'C', 'weight': 0, 'label': u'C'}), (2, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3]), 'guard': u'C', 'weight': 0, 'label': u'C'}), (3, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (4, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (5, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'})]
		
09/15/2019 06:31:00 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/15/2019 06:31:00 PM DEBUG [spec] No of nodes: 7
09/15/2019 06:31:00 PM DEBUG [spec] No of edges: 12
09/15/2019 06:31:00 PM DEBUG alphabet: {'C': 1, 'F': 2}
09/15/2019 06:31:00 PM DEBUG (0, 0): {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:31:00 PM DEBUG (0, 1): {'input': set([1, 3]), 'guard': u'C', 'weight': 0, 'label': u'C'}
09/15/2019 06:31:00 PM DEBUG (1, 0): {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:31:00 PM DEBUG (1, 2): {'input': set([1, 3]), 'guard': u'C', 'weight': 0, 'label': u'C'}
09/15/2019 06:31:00 PM DEBUG (2, 0): {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:31:00 PM DEBUG (2, 3): {'input': set([1, 3]), 'guard': u'C', 'weight': 0, 'label': u'C'}
09/15/2019 06:31:00 PM DEBUG (3, 3): {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:31:00 PM DEBUG (3, 4): {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}
09/15/2019 06:31:00 PM DEBUG (4, 3): {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:31:00 PM DEBUG (4, 5): {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}
09/15/2019 06:31:00 PM DEBUG (5, 3): {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:31:00 PM DEBUG (5, 6): {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}
09/15/2019 06:31:00 PM DEBUG 
End of translate


09/15/2019 06:31:00 PM INFO The bound of formula "[H^2 C]^[0, 3] * [H^2 F]^[0, 7]" is (5, 11)!
09/15/2019 06:31:00 PM INFO Translated formula "[H^2 C]^[0, 3] * [H^2 F]^[0, 7]" to infinity DFA of size (7, 12)!
09/15/2019 06:31:00 PM DEBUG 

Start policy computation

09/15/2019 06:31:00 PM DEBUG [extend_ts] TS: (9, 33) ETS:(9, 33)
09/15/2019 06:31:00 PM DEBUG [extend_ts] TS: (9, 33) ETS:(9, 33)
09/15/2019 06:31:00 PM DEBUG [extend_ts] TS: (9, 33) ETS:(9, 33)
09/15/2019 06:31:00 PM INFO Constructing product automaton with infinity DFA!
09/15/2019 06:31:00 PM INFO Product automaton size is: (21, 72)
09/15/2019 06:31:00 PM DEBUG ('A', 1) -> [('B', 0), ('Base', 0), ('A', 2)]
09/15/2019 06:31:00 PM DEBUG ('Base2', 0) -> [('Base2', 0), ('F', 0), ('G', 0), ('D', 0)]
09/15/2019 06:31:00 PM DEBUG ('F', 0) -> [('Base2', 0), ('F', 0), ('G', 0), ('E', 0)]
09/15/2019 06:31:00 PM DEBUG ('B', 3) -> [('A', 3), ('C', 3), ('B', 3)]
09/15/2019 06:31:00 PM DEBUG ('G', 4) -> [('F', 3), ('Base2', 3), ('G', 5)]
09/15/2019 06:31:00 PM DEBUG ('B', 0) -> [('A', 1), ('C', 0), ('B', 0)]
09/15/2019 06:31:00 PM DEBUG ('G', 6) -> []
09/15/2019 06:31:00 PM DEBUG ('G', 0) -> [('Base2', 0), ('F', 0), ('G', 0)]
09/15/2019 06:31:00 PM DEBUG ('F', 3) -> [('G', 4), ('Base2', 3), ('E', 3), ('F', 3)]
09/15/2019 06:31:00 PM DEBUG ('E', 3) -> [('F', 3), ('Base', 3), ('E', 3), ('D', 3)]
09/15/2019 06:31:00 PM DEBUG ('C', 0) -> [('B', 0), ('C', 0), ('D', 0)]
09/15/2019 06:31:00 PM DEBUG ('C', 3) -> [('C', 3), ('B', 3), ('D', 3)]
09/15/2019 06:31:00 PM DEBUG ('Base', 3) -> [('A', 3), ('Base', 3), ('E', 3), ('D', 3)]
09/15/2019 06:31:00 PM DEBUG ('D', 0) -> [('Base', 0), ('C', 0), ('E', 0), ('D', 0), ('Base2', 0)]
09/15/2019 06:31:00 PM DEBUG ('Base', 0) -> [('A', 1), ('Base', 0), ('D', 0), ('E', 0)]
09/15/2019 06:31:00 PM DEBUG ('Base2', 3) -> [('G', 4), ('Base2', 3), ('F', 3), ('D', 3)]
09/15/2019 06:31:00 PM DEBUG ('A', 3) -> [('A', 3), ('B', 3), ('Base', 3)]
09/15/2019 06:31:00 PM DEBUG ('D', 3) -> [('Base2', 3), ('C', 3), ('Base', 3), ('E', 3), ('D', 3)]
09/15/2019 06:31:00 PM DEBUG ('A', 2) -> [('B', 0), ('Base', 0), ('A', 3)]
09/15/2019 06:31:00 PM DEBUG ('G', 5) -> [('F', 3), ('Base2', 3), ('G', 6)]
09/15/2019 06:31:00 PM DEBUG ('E', 0) -> [('Base', 0), ('F', 0), ('D', 0), ('E', 0)]
09/15/2019 06:31:00 PM INFO Constructing product automaton with infinity DFA!
09/15/2019 06:31:00 PM INFO Product automaton size is: (21, 72)
09/15/2019 06:31:00 PM DEBUG ('Base2', 0) -> [('Base2', 0), ('G', 1), ('F', 0), ('D', 0)]
09/15/2019 06:31:00 PM DEBUG ('A', 5) -> [('A', 6), ('B', 3), ('Base', 3)]
09/15/2019 06:31:00 PM DEBUG ('A', 0) -> [('B', 0), ('Base', 0), ('A', 0)]
09/15/2019 06:31:00 PM DEBUG ('F', 0) -> [('Base2', 0), ('G', 1), ('F', 0), ('E', 0)]
09/15/2019 06:31:00 PM DEBUG ('E', 3) -> [('F', 3), ('Base', 3), ('E', 3), ('D', 3)]
09/15/2019 06:31:00 PM DEBUG ('F', 3) -> [('G', 3), ('F', 3), ('Base2', 3), ('E', 3)]
09/15/2019 06:31:00 PM DEBUG ('B', 0) -> [('B', 0), ('C', 0), ('A', 0)]
09/15/2019 06:31:00 PM DEBUG ('G', 1) -> [('Base2', 0), ('G', 2), ('F', 0)]
09/15/2019 06:31:00 PM DEBUG ('A', 4) -> [('A', 5), ('B', 3), ('Base', 3)]
09/15/2019 06:31:00 PM DEBUG ('G', 3) -> [('G', 3), ('F', 3), ('Base2', 3)]
09/15/2019 06:31:00 PM DEBUG ('C', 0) -> [('B', 0), ('C', 0), ('D', 0)]
09/15/2019 06:31:00 PM DEBUG ('G', 2) -> [('G', 3), ('Base2', 0), ('F', 0)]
09/15/2019 06:31:00 PM DEBUG ('C', 3) -> [('C', 3), ('B', 3), ('D', 3)]
09/15/2019 06:31:00 PM DEBUG ('Base', 3) -> [('D', 3), ('Base', 3), ('E', 3), ('A', 4)]
09/15/2019 06:31:00 PM DEBUG ('D', 0) -> [('Base', 0), ('C', 0), ('E', 0), ('D', 0), ('Base2', 0)]
09/15/2019 06:31:00 PM DEBUG ('B', 3) -> [('C', 3), ('B', 3), ('A', 4)]
09/15/2019 06:31:00 PM DEBUG ('Base', 0) -> [('Base', 0), ('A', 0), ('D', 0), ('E', 0)]
09/15/2019 06:31:00 PM DEBUG ('Base2', 3) -> [('G', 3), ('F', 3), ('Base2', 3), ('D', 3)]
09/15/2019 06:31:00 PM DEBUG ('A', 6) -> []
09/15/2019 06:31:00 PM DEBUG ('D', 3) -> [('Base2', 3), ('C', 3), ('Base', 3), ('E', 3), ('D', 3)]
09/15/2019 06:31:00 PM DEBUG ('E', 0) -> [('Base', 0), ('F', 0), ('D', 0), ('E', 0)]
09/15/2019 06:31:00 PM INFO Constructing product automaton with infinity DFA!
09/15/2019 06:31:00 PM INFO Product automaton size is: (21, 73)
09/15/2019 06:31:00 PM DEBUG ('Base2', 0) -> [('Base2', 0), ('F', 0), ('G', 0), ('D', 0)]
09/15/2019 06:31:00 PM DEBUG ('A', 0) -> [('B', 0), ('Base', 0), ('A', 0)]
09/15/2019 06:31:00 PM DEBUG ('F', 0) -> [('Base2', 0), ('F', 0), ('G', 0), ('E', 0)]
09/15/2019 06:31:00 PM DEBUG ('B', 3) -> [('A', 3), ('C', 3), ('B', 3)]
09/15/2019 06:31:00 PM DEBUG ('B', 0) -> [('B', 0), ('A', 0), ('C', 1)]
09/15/2019 06:31:00 PM DEBUG ('F', 6) -> []
09/15/2019 06:31:00 PM DEBUG ('G', 0) -> [('Base2', 0), ('F', 0), ('G', 0)]
09/15/2019 06:31:00 PM DEBUG ('C', 1) -> [('B', 0), ('D', 0), ('C', 2)]
09/15/2019 06:31:00 PM DEBUG ('E', 3) -> [('F', 4), ('Base', 3), ('E', 3), ('D', 3)]
09/15/2019 06:31:00 PM DEBUG ('F', 4) -> [('G', 3), ('F', 5), ('Base2', 3), ('E', 3)]
09/15/2019 06:31:00 PM DEBUG ('F', 5) -> [('G', 3), ('F', 6), ('Base2', 3), ('E', 3)]
09/15/2019 06:31:00 PM DEBUG ('C', 3) -> [('C', 3), ('B', 3), ('D', 3)]
09/15/2019 06:31:00 PM DEBUG ('Base', 3) -> [('A', 3), ('Base', 3), ('E', 3), ('D', 3)]
09/15/2019 06:31:00 PM DEBUG ('D', 0) -> [('Base', 0), ('Base2', 0), ('D', 0), ('C', 1), ('E', 0)]
09/15/2019 06:31:00 PM DEBUG ('C', 2) -> [('B', 0), ('C', 3), ('D', 0)]
09/15/2019 06:31:00 PM DEBUG ('Base', 0) -> [('Base', 0), ('A', 0), ('D', 0), ('E', 0)]
09/15/2019 06:31:00 PM DEBUG ('Base2', 3) -> [('G', 3), ('F', 4), ('Base2', 3), ('D', 3)]
09/15/2019 06:31:00 PM DEBUG ('G', 3) -> [('G', 3), ('F', 4), ('Base2', 3)]
09/15/2019 06:31:00 PM DEBUG ('D', 3) -> [('Base2', 3), ('C', 3), ('Base', 3), ('E', 3), ('D', 3)]
09/15/2019 06:31:00 PM DEBUG ('A', 3) -> [('A', 3), ('B', 3), ('Base', 3)]
09/15/2019 06:31:00 PM DEBUG ('E', 0) -> [('Base', 0), ('F', 0), ('D', 0), ('E', 0)]
09/15/2019 06:31:00 PM DEBUG [PartialControl] init: set([0]), final: set([3]), constraint: None
09/15/2019 06:31:00 PM DEBUG [PartialControl] init: set([3]), final: set([6]), constraint: None
09/15/2019 06:31:00 PM DEBUG [Cat] accept || 2 >> : (('Base2', 0), ('D', 0), ('Base', 0), ('A', 1), ('A', 2), ('A', 3)) + || -1 >> : (('A', 3), ('Base', 3), ('E', 3), ('F', 3), ('G', 4), ('G', 5), ('G', 6)) ; max(2, -1)
09/15/2019 06:31:00 PM DEBUG [Cat] accept || 1 >> : (('E', 0), ('Base', 0), ('A', 1), ('A', 2), ('A', 3)) + || -1 >> : (('A', 3), ('Base', 3), ('E', 3), ('F', 3), ('G', 4), ('G', 5), ('G', 6)) ; max(1, -1)
09/15/2019 06:31:00 PM DEBUG [Cat] accept || 2 >> : (('F', 0), ('E', 0), ('Base', 0), ('A', 1), ('A', 2), ('A', 3)) + || -1 >> : (('A', 3), ('Base', 3), ('E', 3), ('F', 3), ('G', 4), ('G', 5), ('G', 6)) ; max(2, -1)
09/15/2019 06:31:00 PM DEBUG [Cat] accept || 0 >> : (('B', 0), ('A', 1), ('A', 2), ('A', 3)) + || -1 >> : (('A', 3), ('Base', 3), ('E', 3), ('F', 3), ('G', 4), ('G', 5), ('G', 6)) ; max(0, -1)
09/15/2019 06:31:00 PM DEBUG [Cat] accept || 3 >> : (('G', 0), ('Base2', 0), ('D', 0), ('Base', 0), ('A', 1), ('A', 2), ('A', 3)) + || -1 >> : (('A', 3), ('Base', 3), ('E', 3), ('F', 3), ('G', 4), ('G', 5), ('G', 6)) ; max(3, -1)
09/15/2019 06:31:00 PM DEBUG [Cat] accept || 1 >> : (('C', 0), ('B', 0), ('A', 1), ('A', 2), ('A', 3)) + || -1 >> : (('A', 3), ('Base', 3), ('E', 3), ('F', 3), ('G', 4), ('G', 5), ('G', 6)) ; max(1, -1)
09/15/2019 06:31:00 PM DEBUG [Cat] accept || 0 >> : (('Base', 0), ('A', 1), ('A', 2), ('A', 3)) + || -1 >> : (('A', 3), ('Base', 3), ('E', 3), ('F', 3), ('G', 4), ('G', 5), ('G', 6)) ; max(0, -1)
09/15/2019 06:31:00 PM DEBUG [Cat] accept || 1 >> : (('D', 0), ('Base', 0), ('A', 1), ('A', 2), ('A', 3)) + || -1 >> : (('A', 3), ('Base', 3), ('E', 3), ('F', 3), ('G', 4), ('G', 5), ('G', 6)) ; max(1, -1)
09/15/2019 06:31:00 PM DEBUG [PartialControl] init: set([0]), final: set([3]), constraint: None
09/15/2019 06:31:00 PM DEBUG [PartialControl] init: set([3]), final: set([6]), constraint: None
09/15/2019 06:31:00 PM DEBUG [Cat] accept || 3 >> : (('A', 0), ('Base', 0), ('D', 0), ('Base2', 0), ('G', 1), ('G', 2), ('G', 3)) + || -1 >> : (('G', 3), ('F', 3), ('E', 3), ('Base', 3), ('A', 4), ('A', 5), ('A', 6)) ; max(3, -1)
09/15/2019 06:31:00 PM DEBUG [Cat] accept || 0 >> : (('F', 0), ('G', 1), ('G', 2), ('G', 3)) + || -1 >> : (('G', 3), ('F', 3), ('E', 3), ('Base', 3), ('A', 4), ('A', 5), ('A', 6)) ; max(0, -1)
09/15/2019 06:31:00 PM DEBUG [Cat] accept || 1 >> : (('D', 0), ('Base2', 0), ('G', 1), ('G', 2), ('G', 3)) + || -1 >> : (('G', 3), ('F', 3), ('E', 3), ('Base', 3), ('A', 4), ('A', 5), ('A', 6)) ; max(1, -1)
09/15/2019 06:31:00 PM DEBUG [Cat] accept || 0 >> : (('Base2', 0), ('G', 1), ('G', 2), ('G', 3)) + || -1 >> : (('G', 3), ('F', 3), ('E', 3), ('Base', 3), ('A', 4), ('A', 5), ('A', 6)) ; max(0, -1)
09/15/2019 06:31:00 PM DEBUG [Cat] accept || 3 >> : (('B', 0), ('C', 0), ('D', 0), ('Base2', 0), ('G', 1), ('G', 2), ('G', 3)) + || -1 >> : (('G', 3), ('F', 3), ('E', 3), ('Base', 3), ('A', 4), ('A', 5), ('A', 6)) ; max(3, -1)
09/15/2019 06:31:00 PM DEBUG [Cat] accept || 1 >> : (('E', 0), ('F', 0), ('G', 1), ('G', 2), ('G', 3)) + || -1 >> : (('G', 3), ('F', 3), ('E', 3), ('Base', 3), ('A', 4), ('A', 5), ('A', 6)) ; max(1, -1)
09/15/2019 06:31:00 PM DEBUG [Cat] accept || 2 >> : (('C', 0), ('D', 0), ('Base2', 0), ('G', 1), ('G', 2), ('G', 3)) + || -1 >> : (('G', 3), ('F', 3), ('E', 3), ('Base', 3), ('A', 4), ('A', 5), ('A', 6)) ; max(2, -1)
09/15/2019 06:31:00 PM DEBUG [Cat] accept || 2 >> : (('Base', 0), ('D', 0), ('Base2', 0), ('G', 1), ('G', 2), ('G', 3)) + || -1 >> : (('G', 3), ('F', 3), ('E', 3), ('Base', 3), ('A', 4), ('A', 5), ('A', 6)) ; max(2, -1)
09/15/2019 06:31:00 PM DEBUG [PartialControl] init: set([0]), final: set([3]), constraint: None
09/15/2019 06:31:00 PM DEBUG [PartialControl] init: set([3]), final: set([6]), constraint: None
09/15/2019 06:31:00 PM DEBUG [Cat] accept || 1 >> : (('Base2', 0), ('D', 0), ('C', 1), ('C', 2), ('C', 3)) + || -2 >> : (('C', 3), ('D', 3), ('Base2', 3), ('F', 4), ('F', 5), ('F', 6)) ; max(1, -2)
09/15/2019 06:31:00 PM DEBUG [Cat] accept || 1 >> : (('E', 0), ('D', 0), ('C', 1), ('C', 2), ('C', 3)) + || -2 >> : (('C', 3), ('D', 3), ('Base2', 3), ('F', 4), ('F', 5), ('F', 6)) ; max(1, -2)
09/15/2019 06:31:00 PM DEBUG [Cat] accept || 1 >> : (('A', 0), ('B', 0), ('C', 1), ('C', 2), ('C', 3)) + || -2 >> : (('C', 3), ('D', 3), ('Base2', 3), ('F', 4), ('F', 5), ('F', 6)) ; max(1, -2)
09/15/2019 06:31:00 PM DEBUG [Cat] accept || 2 >> : (('F', 0), ('Base2', 0), ('D', 0), ('C', 1), ('C', 2), ('C', 3)) + || -2 >> : (('C', 3), ('D', 3), ('Base2', 3), ('F', 4), ('F', 5), ('F', 6)) ; max(2, -2)
09/15/2019 06:31:00 PM DEBUG [Cat] accept || 0 >> : (('B', 0), ('C', 1), ('C', 2), ('C', 3)) + || -2 >> : (('C', 3), ('D', 3), ('Base2', 3), ('F', 4), ('F', 5), ('F', 6)) ; max(0, -2)
09/15/2019 06:31:00 PM DEBUG [Cat] accept || 2 >> : (('G', 0), ('Base2', 0), ('D', 0), ('C', 1), ('C', 2), ('C', 3)) + || -2 >> : (('C', 3), ('D', 3), ('Base2', 3), ('F', 4), ('F', 5), ('F', 6)) ; max(2, -2)
09/15/2019 06:31:00 PM DEBUG [Cat] accept || 1 >> : (('Base', 0), ('D', 0), ('C', 1), ('C', 2), ('C', 3)) + || -2 >> : (('C', 3), ('D', 3), ('Base2', 3), ('F', 4), ('F', 5), ('F', 6)) ; max(1, -2)
09/15/2019 06:31:00 PM DEBUG [Cat] accept || 0 >> : (('D', 0), ('C', 1), ('C', 2), ('C', 3)) + || -2 >> : (('C', 3), ('D', 3), ('Base2', 3), ('F', 4), ('F', 5), ('F', 6)) ; max(0, -2)
09/15/2019 06:31:00 PM INFO Generated control policy is: F -> 1 -> Base2 -> 1 -> D -> 1 -> Base -> 1 -> A -> 1 -> A -> 1 -> A
09/15/2019 06:31:00 PM INFO Generated control policy is: Base2 -> 1 -> F -> 1 -> F -> 1 -> F
09/15/2019 06:31:00 PM INFO Max deadline: 0
09/15/2019 06:31:00 PM INFO Generated output word is: [(), ('A',), ('A',), ('A',), (), (), (), ('G',), ('G',), ('G',)]
09/15/2019 06:31:00 PM INFO Generated control policy is: Base -> 1 -> A -> 1 -> A -> 1 -> A -> 1 -> Base -> 1 -> E -> 1 -> F -> 1 -> G -> 1 -> G -> 1 -> G
09/15/2019 06:31:00 PM INFO Max deadline: 0
09/15/2019 06:31:00 PM INFO Generated output word is: [(), ('G',), ('G',), ('G',), (), (), (), ('A',), ('A',), ('A',)]
09/15/2019 06:31:00 PM INFO Generated control policy is: Base2 -> 1 -> G -> 1 -> G -> 1 -> G -> 1 -> F -> 1 -> E -> 1 -> Base -> 1 -> A -> 1 -> A -> 1 -> A
09/15/2019 06:31:00 PM INFO Max deadline: 0
09/15/2019 06:31:00 PM INFO Generated output word is: [(), ('C',), ('C',), ('C',), (), (), ('F',), ('F',), ('F',)]
09/15/2019 06:31:00 PM INFO Generated control policy is: B -> 1 -> C -> 1 -> C -> 1 -> C -> 1 -> D -> 1 -> Base2 -> 1 -> F -> 1 -> F -> 1 -> F
09/15/2019 06:41:56 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'G'])
09/15/2019 06:41:56 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 2 A )
09/15/2019 06:41:56 PM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['A', 'G'])
09/15/2019 06:41:56 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 G )
09/15/2019 06:41:56 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 A ) 0 3 ) DFA2: (Eventually (Hold 2 G ) 0 7 )
09/15/2019 06:41:56 PM DEBUG [spec] spec: [H^2 A]^[0, 3] * [H^2 G]^[0, 7]
09/15/2019 06:41:56 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 A ) 0 3 ) (Eventually (Hold 2 G ) 0 7 ) )
Directed: True
Multi: False
Props: {'A': 1, 'G': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (4, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (5, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'})]
		
09/15/2019 06:41:56 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/15/2019 06:41:56 PM DEBUG [spec] No of nodes: 7
09/15/2019 06:41:56 PM DEBUG [spec] No of edges: 12
09/15/2019 06:41:56 PM DEBUG alphabet: {'A': 1, 'G': 2}
09/15/2019 06:41:56 PM DEBUG (0, 0): {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:41:56 PM DEBUG (0, 1): {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}
09/15/2019 06:41:56 PM DEBUG (1, 0): {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:41:56 PM DEBUG (1, 2): {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}
09/15/2019 06:41:56 PM DEBUG (2, 0): {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:41:56 PM DEBUG (2, 3): {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}
09/15/2019 06:41:56 PM DEBUG (3, 3): {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:41:56 PM DEBUG (3, 4): {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}
09/15/2019 06:41:56 PM DEBUG (4, 3): {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:41:56 PM DEBUG (4, 5): {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}
09/15/2019 06:41:56 PM DEBUG (5, 3): {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:41:56 PM DEBUG (5, 6): {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}
09/15/2019 06:41:56 PM DEBUG 
End of translate


09/15/2019 06:41:56 PM INFO The bound of formula "[H^2 A]^[0, 3] * [H^2 G]^[0, 7]" is (5, 11)!
09/15/2019 06:41:56 PM INFO Translated formula "[H^2 A]^[0, 3] * [H^2 G]^[0, 7]" to infinity DFA of size (7, 12)!
09/15/2019 06:41:56 PM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['A', 'G'])
09/15/2019 06:41:56 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 2 G )
09/15/2019 06:41:56 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'G'])
09/15/2019 06:41:56 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 A )
09/15/2019 06:41:56 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 G ) 0 3 ) DFA2: (Eventually (Hold 2 A ) 0 7 )
09/15/2019 06:41:56 PM DEBUG [spec] spec: [H^2 G]^[0, 3] * [H^2 A]^[0, 7]
09/15/2019 06:41:56 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 G ) 0 3 ) (Eventually (Hold 2 A ) 0 7 ) )
Directed: True
Multi: False
Props: {'A': 1, 'G': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'})]
		
09/15/2019 06:41:56 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/15/2019 06:41:56 PM DEBUG [spec] No of nodes: 7
09/15/2019 06:41:56 PM DEBUG [spec] No of edges: 12
09/15/2019 06:41:56 PM DEBUG alphabet: {'A': 1, 'G': 2}
09/15/2019 06:41:56 PM DEBUG (0, 0): {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:41:56 PM DEBUG (0, 1): {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}
09/15/2019 06:41:56 PM DEBUG (1, 0): {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:41:56 PM DEBUG (1, 2): {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}
09/15/2019 06:41:56 PM DEBUG (2, 0): {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:41:56 PM DEBUG (2, 3): {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}
09/15/2019 06:41:56 PM DEBUG (3, 3): {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:41:56 PM DEBUG (3, 4): {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}
09/15/2019 06:41:56 PM DEBUG (4, 3): {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:41:56 PM DEBUG (4, 5): {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}
09/15/2019 06:41:56 PM DEBUG (5, 3): {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:41:56 PM DEBUG (5, 6): {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}
09/15/2019 06:41:56 PM DEBUG 
End of translate


09/15/2019 06:41:56 PM INFO The bound of formula "[H^2 G]^[0, 3] * [H^2 A]^[0, 7]" is (5, 11)!
09/15/2019 06:41:56 PM INFO Translated formula "[H^2 G]^[0, 3] * [H^2 A]^[0, 7]" to infinity DFA of size (7, 12)!
09/15/2019 06:41:56 PM DEBUG [hold] Prop: C Duration: 2 Negation: False Props: set(['C', 'F'])
09/15/2019 06:41:56 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 2 C )
09/15/2019 06:41:56 PM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['C', 'F'])
09/15/2019 06:41:56 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/15/2019 06:41:56 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 C ) 0 3 ) DFA2: (Eventually (Hold 2 F ) 0 7 )
09/15/2019 06:41:56 PM DEBUG [spec] spec: [H^2 C]^[0, 3] * [H^2 F]^[0, 7]
09/15/2019 06:41:56 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 C ) 0 3 ) (Eventually (Hold 2 F ) 0 7 ) )
Directed: True
Multi: False
Props: {'C': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3]), 'guard': u'C', 'weight': 0, 'label': u'C'}), (1, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'C', 'weight': 0, 'label': u'C'}), (2, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3]), 'guard': u'C', 'weight': 0, 'label': u'C'}), (3, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (4, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (5, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'})]
		
09/15/2019 06:41:56 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/15/2019 06:41:56 PM DEBUG [spec] No of nodes: 7
09/15/2019 06:41:56 PM DEBUG [spec] No of edges: 12
09/15/2019 06:41:56 PM DEBUG alphabet: {'C': 1, 'F': 2}
09/15/2019 06:41:56 PM DEBUG (0, 0): {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:41:56 PM DEBUG (0, 1): {'input': set([1, 3]), 'guard': u'C', 'weight': 0, 'label': u'C'}
09/15/2019 06:41:56 PM DEBUG (1, 0): {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:41:56 PM DEBUG (1, 2): {'input': set([1, 3]), 'guard': u'C', 'weight': 0, 'label': u'C'}
09/15/2019 06:41:56 PM DEBUG (2, 0): {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:41:56 PM DEBUG (2, 3): {'input': set([1, 3]), 'guard': u'C', 'weight': 0, 'label': u'C'}
09/15/2019 06:41:56 PM DEBUG (3, 3): {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:41:56 PM DEBUG (3, 4): {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}
09/15/2019 06:41:56 PM DEBUG (4, 3): {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:41:56 PM DEBUG (4, 5): {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}
09/15/2019 06:41:56 PM DEBUG (5, 3): {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:41:56 PM DEBUG (5, 6): {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}
09/15/2019 06:41:56 PM DEBUG 
End of translate


09/15/2019 06:41:56 PM INFO The bound of formula "[H^2 C]^[0, 3] * [H^2 F]^[0, 7]" is (5, 11)!
09/15/2019 06:41:56 PM INFO Translated formula "[H^2 C]^[0, 3] * [H^2 F]^[0, 7]" to infinity DFA of size (7, 12)!
09/15/2019 06:41:56 PM DEBUG 

Start policy computation

09/15/2019 06:41:56 PM DEBUG [extend_ts] TS: (9, 33) ETS:(9, 33)
09/15/2019 06:41:56 PM DEBUG [extend_ts] TS: (9, 33) ETS:(9, 33)
09/15/2019 06:41:56 PM DEBUG [extend_ts] TS: (9, 33) ETS:(9, 33)
09/15/2019 06:41:56 PM INFO Constructing product automaton with infinity DFA!
09/15/2019 06:41:56 PM INFO Product automaton size is: (21, 72)
09/15/2019 06:41:56 PM DEBUG ('A', 1) -> [('B', 0), ('Base', 0), ('A', 2)]
09/15/2019 06:41:56 PM DEBUG ('Base2', 0) -> [('Base2', 0), ('F', 0), ('G', 0), ('D', 0)]
09/15/2019 06:41:56 PM DEBUG ('F', 0) -> [('Base2', 0), ('F', 0), ('G', 0), ('E', 0)]
09/15/2019 06:41:56 PM DEBUG ('B', 3) -> [('A', 3), ('C', 3), ('B', 3)]
09/15/2019 06:41:56 PM DEBUG ('G', 4) -> [('F', 3), ('Base2', 3), ('G', 5)]
09/15/2019 06:41:56 PM DEBUG ('B', 0) -> [('A', 1), ('C', 0), ('B', 0)]
09/15/2019 06:41:56 PM DEBUG ('G', 6) -> []
09/15/2019 06:41:56 PM DEBUG ('G', 0) -> [('Base2', 0), ('F', 0), ('G', 0)]
09/15/2019 06:41:56 PM DEBUG ('F', 3) -> [('G', 4), ('Base2', 3), ('E', 3), ('F', 3)]
09/15/2019 06:41:56 PM DEBUG ('E', 3) -> [('F', 3), ('Base', 3), ('E', 3), ('D', 3)]
09/15/2019 06:41:56 PM DEBUG ('C', 0) -> [('B', 0), ('C', 0), ('D', 0)]
09/15/2019 06:41:56 PM DEBUG ('C', 3) -> [('C', 3), ('B', 3), ('D', 3)]
09/15/2019 06:41:56 PM DEBUG ('Base', 3) -> [('A', 3), ('Base', 3), ('E', 3), ('D', 3)]
09/15/2019 06:41:56 PM DEBUG ('D', 0) -> [('Base', 0), ('C', 0), ('E', 0), ('D', 0), ('Base2', 0)]
09/15/2019 06:41:56 PM DEBUG ('Base', 0) -> [('A', 1), ('Base', 0), ('D', 0), ('E', 0)]
09/15/2019 06:41:56 PM DEBUG ('Base2', 3) -> [('G', 4), ('Base2', 3), ('F', 3), ('D', 3)]
09/15/2019 06:41:56 PM DEBUG ('A', 3) -> [('A', 3), ('B', 3), ('Base', 3)]
09/15/2019 06:41:56 PM DEBUG ('D', 3) -> [('Base2', 3), ('C', 3), ('Base', 3), ('E', 3), ('D', 3)]
09/15/2019 06:41:56 PM DEBUG ('A', 2) -> [('B', 0), ('Base', 0), ('A', 3)]
09/15/2019 06:41:56 PM DEBUG ('G', 5) -> [('F', 3), ('Base2', 3), ('G', 6)]
09/15/2019 06:41:56 PM DEBUG ('E', 0) -> [('Base', 0), ('F', 0), ('D', 0), ('E', 0)]
09/15/2019 06:41:56 PM INFO Constructing product automaton with infinity DFA!
09/15/2019 06:41:56 PM INFO Product automaton size is: (21, 72)
09/15/2019 06:41:56 PM DEBUG ('Base2', 0) -> [('Base2', 0), ('G', 1), ('F', 0), ('D', 0)]
09/15/2019 06:41:56 PM DEBUG ('A', 5) -> [('A', 6), ('B', 3), ('Base', 3)]
09/15/2019 06:41:56 PM DEBUG ('A', 0) -> [('B', 0), ('Base', 0), ('A', 0)]
09/15/2019 06:41:56 PM DEBUG ('F', 0) -> [('Base2', 0), ('G', 1), ('F', 0), ('E', 0)]
09/15/2019 06:41:56 PM DEBUG ('E', 3) -> [('F', 3), ('Base', 3), ('E', 3), ('D', 3)]
09/15/2019 06:41:56 PM DEBUG ('F', 3) -> [('G', 3), ('F', 3), ('Base2', 3), ('E', 3)]
09/15/2019 06:41:56 PM DEBUG ('B', 0) -> [('B', 0), ('C', 0), ('A', 0)]
09/15/2019 06:41:56 PM DEBUG ('G', 1) -> [('Base2', 0), ('G', 2), ('F', 0)]
09/15/2019 06:41:56 PM DEBUG ('A', 4) -> [('A', 5), ('B', 3), ('Base', 3)]
09/15/2019 06:41:56 PM DEBUG ('G', 3) -> [('G', 3), ('F', 3), ('Base2', 3)]
09/15/2019 06:41:56 PM DEBUG ('C', 0) -> [('B', 0), ('C', 0), ('D', 0)]
09/15/2019 06:41:56 PM DEBUG ('G', 2) -> [('G', 3), ('Base2', 0), ('F', 0)]
09/15/2019 06:41:56 PM DEBUG ('C', 3) -> [('C', 3), ('B', 3), ('D', 3)]
09/15/2019 06:41:56 PM DEBUG ('Base', 3) -> [('D', 3), ('Base', 3), ('E', 3), ('A', 4)]
09/15/2019 06:41:56 PM DEBUG ('D', 0) -> [('Base', 0), ('C', 0), ('E', 0), ('D', 0), ('Base2', 0)]
09/15/2019 06:41:56 PM DEBUG ('B', 3) -> [('C', 3), ('B', 3), ('A', 4)]
09/15/2019 06:41:56 PM DEBUG ('Base', 0) -> [('Base', 0), ('A', 0), ('D', 0), ('E', 0)]
09/15/2019 06:41:56 PM DEBUG ('Base2', 3) -> [('G', 3), ('F', 3), ('Base2', 3), ('D', 3)]
09/15/2019 06:41:56 PM DEBUG ('A', 6) -> []
09/15/2019 06:41:56 PM DEBUG ('D', 3) -> [('Base2', 3), ('C', 3), ('Base', 3), ('E', 3), ('D', 3)]
09/15/2019 06:41:56 PM DEBUG ('E', 0) -> [('Base', 0), ('F', 0), ('D', 0), ('E', 0)]
09/15/2019 06:41:56 PM INFO Constructing product automaton with infinity DFA!
09/15/2019 06:41:56 PM INFO Product automaton size is: (21, 73)
09/15/2019 06:41:56 PM DEBUG ('Base2', 0) -> [('Base2', 0), ('F', 0), ('G', 0), ('D', 0)]
09/15/2019 06:41:56 PM DEBUG ('A', 0) -> [('B', 0), ('Base', 0), ('A', 0)]
09/15/2019 06:41:56 PM DEBUG ('F', 0) -> [('Base2', 0), ('F', 0), ('G', 0), ('E', 0)]
09/15/2019 06:41:56 PM DEBUG ('B', 3) -> [('A', 3), ('C', 3), ('B', 3)]
09/15/2019 06:41:56 PM DEBUG ('B', 0) -> [('B', 0), ('A', 0), ('C', 1)]
09/15/2019 06:41:56 PM DEBUG ('F', 6) -> []
09/15/2019 06:41:56 PM DEBUG ('G', 0) -> [('Base2', 0), ('F', 0), ('G', 0)]
09/15/2019 06:41:56 PM DEBUG ('C', 1) -> [('B', 0), ('D', 0), ('C', 2)]
09/15/2019 06:41:56 PM DEBUG ('E', 3) -> [('F', 4), ('Base', 3), ('E', 3), ('D', 3)]
09/15/2019 06:41:56 PM DEBUG ('F', 4) -> [('G', 3), ('F', 5), ('Base2', 3), ('E', 3)]
09/15/2019 06:41:56 PM DEBUG ('F', 5) -> [('G', 3), ('F', 6), ('Base2', 3), ('E', 3)]
09/15/2019 06:41:56 PM DEBUG ('C', 3) -> [('C', 3), ('B', 3), ('D', 3)]
09/15/2019 06:41:56 PM DEBUG ('Base', 3) -> [('A', 3), ('Base', 3), ('E', 3), ('D', 3)]
09/15/2019 06:41:56 PM DEBUG ('D', 0) -> [('Base', 0), ('Base2', 0), ('D', 0), ('C', 1), ('E', 0)]
09/15/2019 06:41:56 PM DEBUG ('C', 2) -> [('B', 0), ('C', 3), ('D', 0)]
09/15/2019 06:41:56 PM DEBUG ('Base', 0) -> [('Base', 0), ('A', 0), ('D', 0), ('E', 0)]
09/15/2019 06:41:56 PM DEBUG ('Base2', 3) -> [('G', 3), ('F', 4), ('Base2', 3), ('D', 3)]
09/15/2019 06:41:56 PM DEBUG ('G', 3) -> [('G', 3), ('F', 4), ('Base2', 3)]
09/15/2019 06:41:56 PM DEBUG ('D', 3) -> [('Base2', 3), ('C', 3), ('Base', 3), ('E', 3), ('D', 3)]
09/15/2019 06:41:56 PM DEBUG ('A', 3) -> [('A', 3), ('B', 3), ('Base', 3)]
09/15/2019 06:41:56 PM DEBUG ('E', 0) -> [('Base', 0), ('F', 0), ('D', 0), ('E', 0)]
09/15/2019 06:41:56 PM DEBUG [PartialControl] init: set([0]), final: set([3]), constraint: None
09/15/2019 06:41:56 PM DEBUG [PartialControl] init: set([3]), final: set([6]), constraint: None
09/15/2019 06:41:56 PM DEBUG [Cat] accept || 2 >> : (('Base2', 0), ('D', 0), ('Base', 0), ('A', 1), ('A', 2), ('A', 3)) + || -1 >> : (('A', 3), ('Base', 3), ('E', 3), ('F', 3), ('G', 4), ('G', 5), ('G', 6)) ; max(2, -1)
09/15/2019 06:41:56 PM DEBUG [Cat] accept || 1 >> : (('E', 0), ('Base', 0), ('A', 1), ('A', 2), ('A', 3)) + || -1 >> : (('A', 3), ('Base', 3), ('E', 3), ('F', 3), ('G', 4), ('G', 5), ('G', 6)) ; max(1, -1)
09/15/2019 06:41:56 PM DEBUG [Cat] accept || 2 >> : (('F', 0), ('E', 0), ('Base', 0), ('A', 1), ('A', 2), ('A', 3)) + || -1 >> : (('A', 3), ('Base', 3), ('E', 3), ('F', 3), ('G', 4), ('G', 5), ('G', 6)) ; max(2, -1)
09/15/2019 06:41:56 PM DEBUG [Cat] accept || 0 >> : (('B', 0), ('A', 1), ('A', 2), ('A', 3)) + || -1 >> : (('A', 3), ('Base', 3), ('E', 3), ('F', 3), ('G', 4), ('G', 5), ('G', 6)) ; max(0, -1)
09/15/2019 06:41:56 PM DEBUG [Cat] accept || 3 >> : (('G', 0), ('Base2', 0), ('D', 0), ('Base', 0), ('A', 1), ('A', 2), ('A', 3)) + || -1 >> : (('A', 3), ('Base', 3), ('E', 3), ('F', 3), ('G', 4), ('G', 5), ('G', 6)) ; max(3, -1)
09/15/2019 06:41:56 PM DEBUG [Cat] accept || 1 >> : (('C', 0), ('B', 0), ('A', 1), ('A', 2), ('A', 3)) + || -1 >> : (('A', 3), ('Base', 3), ('E', 3), ('F', 3), ('G', 4), ('G', 5), ('G', 6)) ; max(1, -1)
09/15/2019 06:41:56 PM DEBUG [Cat] accept || 0 >> : (('Base', 0), ('A', 1), ('A', 2), ('A', 3)) + || -1 >> : (('A', 3), ('Base', 3), ('E', 3), ('F', 3), ('G', 4), ('G', 5), ('G', 6)) ; max(0, -1)
09/15/2019 06:41:56 PM DEBUG [Cat] accept || 1 >> : (('D', 0), ('Base', 0), ('A', 1), ('A', 2), ('A', 3)) + || -1 >> : (('A', 3), ('Base', 3), ('E', 3), ('F', 3), ('G', 4), ('G', 5), ('G', 6)) ; max(1, -1)
09/15/2019 06:41:56 PM DEBUG [PartialControl] init: set([0]), final: set([3]), constraint: None
09/15/2019 06:41:56 PM DEBUG [PartialControl] init: set([3]), final: set([6]), constraint: None
09/15/2019 06:41:56 PM DEBUG [Cat] accept || 3 >> : (('A', 0), ('Base', 0), ('D', 0), ('Base2', 0), ('G', 1), ('G', 2), ('G', 3)) + || -1 >> : (('G', 3), ('F', 3), ('E', 3), ('Base', 3), ('A', 4), ('A', 5), ('A', 6)) ; max(3, -1)
09/15/2019 06:41:56 PM DEBUG [Cat] accept || 0 >> : (('F', 0), ('G', 1), ('G', 2), ('G', 3)) + || -1 >> : (('G', 3), ('F', 3), ('E', 3), ('Base', 3), ('A', 4), ('A', 5), ('A', 6)) ; max(0, -1)
09/15/2019 06:41:56 PM DEBUG [Cat] accept || 1 >> : (('D', 0), ('Base2', 0), ('G', 1), ('G', 2), ('G', 3)) + || -1 >> : (('G', 3), ('F', 3), ('E', 3), ('Base', 3), ('A', 4), ('A', 5), ('A', 6)) ; max(1, -1)
09/15/2019 06:41:56 PM DEBUG [Cat] accept || 0 >> : (('Base2', 0), ('G', 1), ('G', 2), ('G', 3)) + || -1 >> : (('G', 3), ('F', 3), ('E', 3), ('Base', 3), ('A', 4), ('A', 5), ('A', 6)) ; max(0, -1)
09/15/2019 06:41:56 PM DEBUG [Cat] accept || 3 >> : (('B', 0), ('C', 0), ('D', 0), ('Base2', 0), ('G', 1), ('G', 2), ('G', 3)) + || -1 >> : (('G', 3), ('F', 3), ('E', 3), ('Base', 3), ('A', 4), ('A', 5), ('A', 6)) ; max(3, -1)
09/15/2019 06:41:56 PM DEBUG [Cat] accept || 1 >> : (('E', 0), ('F', 0), ('G', 1), ('G', 2), ('G', 3)) + || -1 >> : (('G', 3), ('F', 3), ('E', 3), ('Base', 3), ('A', 4), ('A', 5), ('A', 6)) ; max(1, -1)
09/15/2019 06:41:56 PM DEBUG [Cat] accept || 2 >> : (('C', 0), ('D', 0), ('Base2', 0), ('G', 1), ('G', 2), ('G', 3)) + || -1 >> : (('G', 3), ('F', 3), ('E', 3), ('Base', 3), ('A', 4), ('A', 5), ('A', 6)) ; max(2, -1)
09/15/2019 06:41:56 PM DEBUG [Cat] accept || 2 >> : (('Base', 0), ('D', 0), ('Base2', 0), ('G', 1), ('G', 2), ('G', 3)) + || -1 >> : (('G', 3), ('F', 3), ('E', 3), ('Base', 3), ('A', 4), ('A', 5), ('A', 6)) ; max(2, -1)
09/15/2019 06:41:56 PM DEBUG [PartialControl] init: set([0]), final: set([3]), constraint: None
09/15/2019 06:41:56 PM DEBUG [PartialControl] init: set([3]), final: set([6]), constraint: None
09/15/2019 06:41:56 PM DEBUG [Cat] accept || 1 >> : (('Base2', 0), ('D', 0), ('C', 1), ('C', 2), ('C', 3)) + || -2 >> : (('C', 3), ('D', 3), ('Base2', 3), ('F', 4), ('F', 5), ('F', 6)) ; max(1, -2)
09/15/2019 06:41:56 PM DEBUG [Cat] accept || 1 >> : (('E', 0), ('D', 0), ('C', 1), ('C', 2), ('C', 3)) + || -2 >> : (('C', 3), ('D', 3), ('Base2', 3), ('F', 4), ('F', 5), ('F', 6)) ; max(1, -2)
09/15/2019 06:41:56 PM DEBUG [Cat] accept || 1 >> : (('A', 0), ('B', 0), ('C', 1), ('C', 2), ('C', 3)) + || -2 >> : (('C', 3), ('D', 3), ('Base2', 3), ('F', 4), ('F', 5), ('F', 6)) ; max(1, -2)
09/15/2019 06:41:56 PM DEBUG [Cat] accept || 2 >> : (('F', 0), ('Base2', 0), ('D', 0), ('C', 1), ('C', 2), ('C', 3)) + || -2 >> : (('C', 3), ('D', 3), ('Base2', 3), ('F', 4), ('F', 5), ('F', 6)) ; max(2, -2)
09/15/2019 06:41:56 PM DEBUG [Cat] accept || 0 >> : (('B', 0), ('C', 1), ('C', 2), ('C', 3)) + || -2 >> : (('C', 3), ('D', 3), ('Base2', 3), ('F', 4), ('F', 5), ('F', 6)) ; max(0, -2)
09/15/2019 06:41:56 PM DEBUG [Cat] accept || 2 >> : (('G', 0), ('Base2', 0), ('D', 0), ('C', 1), ('C', 2), ('C', 3)) + || -2 >> : (('C', 3), ('D', 3), ('Base2', 3), ('F', 4), ('F', 5), ('F', 6)) ; max(2, -2)
09/15/2019 06:41:56 PM DEBUG [Cat] accept || 1 >> : (('Base', 0), ('D', 0), ('C', 1), ('C', 2), ('C', 3)) + || -2 >> : (('C', 3), ('D', 3), ('Base2', 3), ('F', 4), ('F', 5), ('F', 6)) ; max(1, -2)
09/15/2019 06:41:56 PM DEBUG [Cat] accept || 0 >> : (('D', 0), ('C', 1), ('C', 2), ('C', 3)) + || -2 >> : (('C', 3), ('D', 3), ('Base2', 3), ('F', 4), ('F', 5), ('F', 6)) ; max(0, -2)
09/15/2019 06:41:56 PM INFO Generated control policy is: F -> 1 -> Base2 -> 1 -> D -> 1 -> Base -> 1 -> A -> 1 -> A -> 1 -> A
09/15/2019 06:41:56 PM INFO Generated control policy is: Base2 -> 1 -> F -> 1 -> F -> 1 -> F
09/15/2019 06:41:56 PM INFO Max deadline: 0
09/15/2019 06:41:56 PM INFO Generated output word is: [(), ('A',), ('A',), ('A',), (), (), (), ('G',), ('G',), ('G',)]
09/15/2019 06:41:56 PM INFO Generated control policy is: Base -> 1 -> A -> 1 -> A -> 1 -> A -> 1 -> Base -> 1 -> E -> 1 -> F -> 1 -> G -> 1 -> G -> 1 -> G
09/15/2019 06:46:31 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'G'])
09/15/2019 06:46:31 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 2 A )
09/15/2019 06:46:31 PM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['A', 'G'])
09/15/2019 06:46:31 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 G )
09/15/2019 06:46:31 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 A ) 0 3 ) DFA2: (Eventually (Hold 2 G ) 0 7 )
09/15/2019 06:46:31 PM DEBUG [spec] spec: [H^2 A]^[0, 3] * [H^2 G]^[0, 7]
09/15/2019 06:46:31 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 A ) 0 3 ) (Eventually (Hold 2 G ) 0 7 ) )
Directed: True
Multi: False
Props: {'A': 1, 'G': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (4, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (5, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'})]
		
09/15/2019 06:46:31 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/15/2019 06:46:31 PM DEBUG [spec] No of nodes: 7
09/15/2019 06:46:31 PM DEBUG [spec] No of edges: 12
09/15/2019 06:46:31 PM DEBUG alphabet: {'A': 1, 'G': 2}
09/15/2019 06:46:31 PM DEBUG (0, 0): {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:46:31 PM DEBUG (0, 1): {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}
09/15/2019 06:46:31 PM DEBUG (1, 0): {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:46:31 PM DEBUG (1, 2): {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}
09/15/2019 06:46:31 PM DEBUG (2, 0): {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:46:31 PM DEBUG (2, 3): {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}
09/15/2019 06:46:31 PM DEBUG (3, 3): {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:46:31 PM DEBUG (3, 4): {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}
09/15/2019 06:46:31 PM DEBUG (4, 3): {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:46:31 PM DEBUG (4, 5): {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}
09/15/2019 06:46:31 PM DEBUG (5, 3): {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:46:31 PM DEBUG (5, 6): {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}
09/15/2019 06:46:31 PM DEBUG 
End of translate


09/15/2019 06:46:31 PM INFO The bound of formula "[H^2 A]^[0, 3] * [H^2 G]^[0, 7]" is (5, 11)!
09/15/2019 06:46:31 PM INFO Translated formula "[H^2 A]^[0, 3] * [H^2 G]^[0, 7]" to infinity DFA of size (7, 12)!
09/15/2019 06:46:31 PM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['A', 'G'])
09/15/2019 06:46:31 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 2 G )
09/15/2019 06:46:31 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'G'])
09/15/2019 06:46:31 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 A )
09/15/2019 06:46:31 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 G ) 0 3 ) DFA2: (Eventually (Hold 2 A ) 0 7 )
09/15/2019 06:46:31 PM DEBUG [spec] spec: [H^2 G]^[0, 3] * [H^2 A]^[0, 7]
09/15/2019 06:46:31 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 G ) 0 3 ) (Eventually (Hold 2 A ) 0 7 ) )
Directed: True
Multi: False
Props: {'A': 1, 'G': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'})]
		
09/15/2019 06:46:31 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/15/2019 06:46:31 PM DEBUG [spec] No of nodes: 7
09/15/2019 06:46:31 PM DEBUG [spec] No of edges: 12
09/15/2019 06:46:31 PM DEBUG alphabet: {'A': 1, 'G': 2}
09/15/2019 06:46:31 PM DEBUG (0, 0): {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:46:31 PM DEBUG (0, 1): {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}
09/15/2019 06:46:31 PM DEBUG (1, 0): {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:46:31 PM DEBUG (1, 2): {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}
09/15/2019 06:46:31 PM DEBUG (2, 0): {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:46:31 PM DEBUG (2, 3): {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}
09/15/2019 06:46:31 PM DEBUG (3, 3): {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:46:31 PM DEBUG (3, 4): {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}
09/15/2019 06:46:31 PM DEBUG (4, 3): {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:46:31 PM DEBUG (4, 5): {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}
09/15/2019 06:46:31 PM DEBUG (5, 3): {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:46:31 PM DEBUG (5, 6): {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}
09/15/2019 06:46:31 PM DEBUG 
End of translate


09/15/2019 06:46:31 PM INFO The bound of formula "[H^2 G]^[0, 3] * [H^2 A]^[0, 7]" is (5, 11)!
09/15/2019 06:46:31 PM INFO Translated formula "[H^2 G]^[0, 3] * [H^2 A]^[0, 7]" to infinity DFA of size (7, 12)!
09/15/2019 06:46:31 PM DEBUG [hold] Prop: C Duration: 2 Negation: False Props: set(['C', 'F'])
09/15/2019 06:46:31 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 2 C )
09/15/2019 06:46:31 PM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['C', 'F'])
09/15/2019 06:46:31 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/15/2019 06:46:31 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 C ) 0 3 ) DFA2: (Eventually (Hold 2 F ) 0 7 )
09/15/2019 06:46:31 PM DEBUG [spec] spec: [H^2 C]^[0, 3] * [H^2 F]^[0, 7]
09/15/2019 06:46:31 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 C ) 0 3 ) (Eventually (Hold 2 F ) 0 7 ) )
Directed: True
Multi: False
Props: {'C': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3]), 'guard': u'C', 'weight': 0, 'label': u'C'}), (1, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'C', 'weight': 0, 'label': u'C'}), (2, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3]), 'guard': u'C', 'weight': 0, 'label': u'C'}), (3, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (4, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (5, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'})]
		
09/15/2019 06:46:31 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/15/2019 06:46:31 PM DEBUG [spec] No of nodes: 7
09/15/2019 06:46:31 PM DEBUG [spec] No of edges: 12
09/15/2019 06:46:31 PM DEBUG alphabet: {'C': 1, 'F': 2}
09/15/2019 06:46:31 PM DEBUG (0, 0): {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:46:31 PM DEBUG (0, 1): {'input': set([1, 3]), 'guard': u'C', 'weight': 0, 'label': u'C'}
09/15/2019 06:46:31 PM DEBUG (1, 0): {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:46:31 PM DEBUG (1, 2): {'input': set([1, 3]), 'guard': u'C', 'weight': 0, 'label': u'C'}
09/15/2019 06:46:31 PM DEBUG (2, 0): {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:46:31 PM DEBUG (2, 3): {'input': set([1, 3]), 'guard': u'C', 'weight': 0, 'label': u'C'}
09/15/2019 06:46:31 PM DEBUG (3, 3): {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:46:31 PM DEBUG (3, 4): {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}
09/15/2019 06:46:31 PM DEBUG (4, 3): {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:46:31 PM DEBUG (4, 5): {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}
09/15/2019 06:46:31 PM DEBUG (5, 3): {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:46:31 PM DEBUG (5, 6): {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}
09/15/2019 06:46:31 PM DEBUG 
End of translate


09/15/2019 06:46:31 PM INFO The bound of formula "[H^2 C]^[0, 3] * [H^2 F]^[0, 7]" is (5, 11)!
09/15/2019 06:46:31 PM INFO Translated formula "[H^2 C]^[0, 3] * [H^2 F]^[0, 7]" to infinity DFA of size (7, 12)!
09/15/2019 06:46:31 PM DEBUG 

Start policy computation

09/15/2019 06:46:31 PM DEBUG [extend_ts] TS: (9, 33) ETS:(9, 33)
09/15/2019 06:46:31 PM DEBUG [extend_ts] TS: (9, 33) ETS:(9, 33)
09/15/2019 06:46:31 PM DEBUG [extend_ts] TS: (9, 33) ETS:(9, 33)
09/15/2019 06:46:31 PM INFO Constructing product automaton with infinity DFA!
09/15/2019 06:46:31 PM INFO Product automaton size is: (21, 72)
09/15/2019 06:46:31 PM DEBUG ('A', 1) -> [('B', 0), ('Base', 0), ('A', 2)]
09/15/2019 06:46:31 PM DEBUG ('Base2', 0) -> [('Base2', 0), ('F', 0), ('G', 0), ('D', 0)]
09/15/2019 06:46:31 PM DEBUG ('F', 0) -> [('Base2', 0), ('F', 0), ('G', 0), ('E', 0)]
09/15/2019 06:46:31 PM DEBUG ('B', 3) -> [('A', 3), ('C', 3), ('B', 3)]
09/15/2019 06:46:31 PM DEBUG ('G', 4) -> [('F', 3), ('Base2', 3), ('G', 5)]
09/15/2019 06:46:31 PM DEBUG ('B', 0) -> [('A', 1), ('C', 0), ('B', 0)]
09/15/2019 06:46:31 PM DEBUG ('G', 6) -> []
09/15/2019 06:46:31 PM DEBUG ('G', 0) -> [('Base2', 0), ('F', 0), ('G', 0)]
09/15/2019 06:46:31 PM DEBUG ('F', 3) -> [('G', 4), ('Base2', 3), ('E', 3), ('F', 3)]
09/15/2019 06:46:31 PM DEBUG ('E', 3) -> [('F', 3), ('Base', 3), ('E', 3), ('D', 3)]
09/15/2019 06:46:31 PM DEBUG ('C', 0) -> [('B', 0), ('C', 0), ('D', 0)]
09/15/2019 06:46:31 PM DEBUG ('C', 3) -> [('C', 3), ('B', 3), ('D', 3)]
09/15/2019 06:46:31 PM DEBUG ('Base', 3) -> [('A', 3), ('Base', 3), ('E', 3), ('D', 3)]
09/15/2019 06:46:31 PM DEBUG ('D', 0) -> [('Base', 0), ('C', 0), ('E', 0), ('D', 0), ('Base2', 0)]
09/15/2019 06:46:31 PM DEBUG ('Base', 0) -> [('A', 1), ('Base', 0), ('D', 0), ('E', 0)]
09/15/2019 06:46:31 PM DEBUG ('Base2', 3) -> [('G', 4), ('Base2', 3), ('F', 3), ('D', 3)]
09/15/2019 06:46:31 PM DEBUG ('A', 3) -> [('A', 3), ('B', 3), ('Base', 3)]
09/15/2019 06:46:31 PM DEBUG ('D', 3) -> [('Base2', 3), ('C', 3), ('Base', 3), ('E', 3), ('D', 3)]
09/15/2019 06:46:31 PM DEBUG ('A', 2) -> [('B', 0), ('Base', 0), ('A', 3)]
09/15/2019 06:46:31 PM DEBUG ('G', 5) -> [('F', 3), ('Base2', 3), ('G', 6)]
09/15/2019 06:46:31 PM DEBUG ('E', 0) -> [('Base', 0), ('F', 0), ('D', 0), ('E', 0)]
09/15/2019 06:46:31 PM INFO Constructing product automaton with infinity DFA!
09/15/2019 06:46:31 PM INFO Product automaton size is: (21, 72)
09/15/2019 06:46:31 PM DEBUG ('Base2', 0) -> [('Base2', 0), ('G', 1), ('F', 0), ('D', 0)]
09/15/2019 06:46:31 PM DEBUG ('A', 5) -> [('A', 6), ('B', 3), ('Base', 3)]
09/15/2019 06:46:31 PM DEBUG ('A', 0) -> [('B', 0), ('Base', 0), ('A', 0)]
09/15/2019 06:46:31 PM DEBUG ('F', 0) -> [('Base2', 0), ('G', 1), ('F', 0), ('E', 0)]
09/15/2019 06:46:31 PM DEBUG ('E', 3) -> [('F', 3), ('Base', 3), ('E', 3), ('D', 3)]
09/15/2019 06:46:31 PM DEBUG ('F', 3) -> [('G', 3), ('F', 3), ('Base2', 3), ('E', 3)]
09/15/2019 06:46:31 PM DEBUG ('B', 0) -> [('B', 0), ('C', 0), ('A', 0)]
09/15/2019 06:46:31 PM DEBUG ('G', 1) -> [('Base2', 0), ('G', 2), ('F', 0)]
09/15/2019 06:46:31 PM DEBUG ('A', 4) -> [('A', 5), ('B', 3), ('Base', 3)]
09/15/2019 06:46:31 PM DEBUG ('G', 3) -> [('G', 3), ('F', 3), ('Base2', 3)]
09/15/2019 06:46:31 PM DEBUG ('C', 0) -> [('B', 0), ('C', 0), ('D', 0)]
09/15/2019 06:46:31 PM DEBUG ('G', 2) -> [('G', 3), ('Base2', 0), ('F', 0)]
09/15/2019 06:46:31 PM DEBUG ('C', 3) -> [('C', 3), ('B', 3), ('D', 3)]
09/15/2019 06:46:31 PM DEBUG ('Base', 3) -> [('D', 3), ('Base', 3), ('E', 3), ('A', 4)]
09/15/2019 06:46:31 PM DEBUG ('D', 0) -> [('Base', 0), ('C', 0), ('E', 0), ('D', 0), ('Base2', 0)]
09/15/2019 06:46:31 PM DEBUG ('B', 3) -> [('C', 3), ('B', 3), ('A', 4)]
09/15/2019 06:46:31 PM DEBUG ('Base', 0) -> [('Base', 0), ('A', 0), ('D', 0), ('E', 0)]
09/15/2019 06:46:31 PM DEBUG ('Base2', 3) -> [('G', 3), ('F', 3), ('Base2', 3), ('D', 3)]
09/15/2019 06:46:31 PM DEBUG ('A', 6) -> []
09/15/2019 06:46:31 PM DEBUG ('D', 3) -> [('Base2', 3), ('C', 3), ('Base', 3), ('E', 3), ('D', 3)]
09/15/2019 06:46:31 PM DEBUG ('E', 0) -> [('Base', 0), ('F', 0), ('D', 0), ('E', 0)]
09/15/2019 06:46:31 PM INFO Constructing product automaton with infinity DFA!
09/15/2019 06:46:31 PM INFO Product automaton size is: (21, 73)
09/15/2019 06:46:31 PM DEBUG ('Base2', 0) -> [('Base2', 0), ('F', 0), ('G', 0), ('D', 0)]
09/15/2019 06:46:31 PM DEBUG ('A', 0) -> [('B', 0), ('Base', 0), ('A', 0)]
09/15/2019 06:46:31 PM DEBUG ('F', 0) -> [('Base2', 0), ('F', 0), ('G', 0), ('E', 0)]
09/15/2019 06:46:31 PM DEBUG ('B', 3) -> [('A', 3), ('C', 3), ('B', 3)]
09/15/2019 06:46:31 PM DEBUG ('B', 0) -> [('B', 0), ('A', 0), ('C', 1)]
09/15/2019 06:46:31 PM DEBUG ('F', 6) -> []
09/15/2019 06:46:31 PM DEBUG ('G', 0) -> [('Base2', 0), ('F', 0), ('G', 0)]
09/15/2019 06:46:31 PM DEBUG ('C', 1) -> [('B', 0), ('D', 0), ('C', 2)]
09/15/2019 06:46:31 PM DEBUG ('E', 3) -> [('F', 4), ('Base', 3), ('E', 3), ('D', 3)]
09/15/2019 06:46:31 PM DEBUG ('F', 4) -> [('G', 3), ('F', 5), ('Base2', 3), ('E', 3)]
09/15/2019 06:46:31 PM DEBUG ('F', 5) -> [('G', 3), ('F', 6), ('Base2', 3), ('E', 3)]
09/15/2019 06:46:31 PM DEBUG ('C', 3) -> [('C', 3), ('B', 3), ('D', 3)]
09/15/2019 06:46:31 PM DEBUG ('Base', 3) -> [('A', 3), ('Base', 3), ('E', 3), ('D', 3)]
09/15/2019 06:46:31 PM DEBUG ('D', 0) -> [('Base', 0), ('Base2', 0), ('D', 0), ('C', 1), ('E', 0)]
09/15/2019 06:46:31 PM DEBUG ('C', 2) -> [('B', 0), ('C', 3), ('D', 0)]
09/15/2019 06:46:31 PM DEBUG ('Base', 0) -> [('Base', 0), ('A', 0), ('D', 0), ('E', 0)]
09/15/2019 06:46:31 PM DEBUG ('Base2', 3) -> [('G', 3), ('F', 4), ('Base2', 3), ('D', 3)]
09/15/2019 06:46:31 PM DEBUG ('G', 3) -> [('G', 3), ('F', 4), ('Base2', 3)]
09/15/2019 06:46:31 PM DEBUG ('D', 3) -> [('Base2', 3), ('C', 3), ('Base', 3), ('E', 3), ('D', 3)]
09/15/2019 06:46:31 PM DEBUG ('A', 3) -> [('A', 3), ('B', 3), ('Base', 3)]
09/15/2019 06:46:31 PM DEBUG ('E', 0) -> [('Base', 0), ('F', 0), ('D', 0), ('E', 0)]
09/15/2019 06:46:31 PM DEBUG [PartialControl] init: set([0]), final: set([3]), constraint: None
09/15/2019 06:46:31 PM DEBUG [PartialControl] init: set([3]), final: set([6]), constraint: None
09/15/2019 06:46:31 PM DEBUG [Cat] accept || 2 >> : (('Base2', 0), ('D', 0), ('Base', 0), ('A', 1), ('A', 2), ('A', 3)) + || -1 >> : (('A', 3), ('Base', 3), ('E', 3), ('F', 3), ('G', 4), ('G', 5), ('G', 6)) ; max(2, -1)
09/15/2019 06:46:31 PM DEBUG [Cat] accept || 1 >> : (('E', 0), ('Base', 0), ('A', 1), ('A', 2), ('A', 3)) + || -1 >> : (('A', 3), ('Base', 3), ('E', 3), ('F', 3), ('G', 4), ('G', 5), ('G', 6)) ; max(1, -1)
09/15/2019 06:46:31 PM DEBUG [Cat] accept || 2 >> : (('F', 0), ('E', 0), ('Base', 0), ('A', 1), ('A', 2), ('A', 3)) + || -1 >> : (('A', 3), ('Base', 3), ('E', 3), ('F', 3), ('G', 4), ('G', 5), ('G', 6)) ; max(2, -1)
09/15/2019 06:46:31 PM DEBUG [Cat] accept || 0 >> : (('B', 0), ('A', 1), ('A', 2), ('A', 3)) + || -1 >> : (('A', 3), ('Base', 3), ('E', 3), ('F', 3), ('G', 4), ('G', 5), ('G', 6)) ; max(0, -1)
09/15/2019 06:46:31 PM DEBUG [Cat] accept || 3 >> : (('G', 0), ('Base2', 0), ('D', 0), ('Base', 0), ('A', 1), ('A', 2), ('A', 3)) + || -1 >> : (('A', 3), ('Base', 3), ('E', 3), ('F', 3), ('G', 4), ('G', 5), ('G', 6)) ; max(3, -1)
09/15/2019 06:46:31 PM DEBUG [Cat] accept || 1 >> : (('C', 0), ('B', 0), ('A', 1), ('A', 2), ('A', 3)) + || -1 >> : (('A', 3), ('Base', 3), ('E', 3), ('F', 3), ('G', 4), ('G', 5), ('G', 6)) ; max(1, -1)
09/15/2019 06:46:31 PM DEBUG [Cat] accept || 0 >> : (('Base', 0), ('A', 1), ('A', 2), ('A', 3)) + || -1 >> : (('A', 3), ('Base', 3), ('E', 3), ('F', 3), ('G', 4), ('G', 5), ('G', 6)) ; max(0, -1)
09/15/2019 06:46:31 PM DEBUG [Cat] accept || 1 >> : (('D', 0), ('Base', 0), ('A', 1), ('A', 2), ('A', 3)) + || -1 >> : (('A', 3), ('Base', 3), ('E', 3), ('F', 3), ('G', 4), ('G', 5), ('G', 6)) ; max(1, -1)
09/15/2019 06:46:31 PM DEBUG [PartialControl] init: set([0]), final: set([3]), constraint: None
09/15/2019 06:46:31 PM DEBUG [PartialControl] init: set([3]), final: set([6]), constraint: None
09/15/2019 06:46:31 PM DEBUG [Cat] accept || 3 >> : (('A', 0), ('Base', 0), ('D', 0), ('Base2', 0), ('G', 1), ('G', 2), ('G', 3)) + || -1 >> : (('G', 3), ('F', 3), ('E', 3), ('Base', 3), ('A', 4), ('A', 5), ('A', 6)) ; max(3, -1)
09/15/2019 06:46:31 PM DEBUG [Cat] accept || 0 >> : (('F', 0), ('G', 1), ('G', 2), ('G', 3)) + || -1 >> : (('G', 3), ('F', 3), ('E', 3), ('Base', 3), ('A', 4), ('A', 5), ('A', 6)) ; max(0, -1)
09/15/2019 06:46:31 PM DEBUG [Cat] accept || 1 >> : (('D', 0), ('Base2', 0), ('G', 1), ('G', 2), ('G', 3)) + || -1 >> : (('G', 3), ('F', 3), ('E', 3), ('Base', 3), ('A', 4), ('A', 5), ('A', 6)) ; max(1, -1)
09/15/2019 06:46:31 PM DEBUG [Cat] accept || 0 >> : (('Base2', 0), ('G', 1), ('G', 2), ('G', 3)) + || -1 >> : (('G', 3), ('F', 3), ('E', 3), ('Base', 3), ('A', 4), ('A', 5), ('A', 6)) ; max(0, -1)
09/15/2019 06:46:31 PM DEBUG [Cat] accept || 3 >> : (('B', 0), ('C', 0), ('D', 0), ('Base2', 0), ('G', 1), ('G', 2), ('G', 3)) + || -1 >> : (('G', 3), ('F', 3), ('E', 3), ('Base', 3), ('A', 4), ('A', 5), ('A', 6)) ; max(3, -1)
09/15/2019 06:46:31 PM DEBUG [Cat] accept || 1 >> : (('E', 0), ('F', 0), ('G', 1), ('G', 2), ('G', 3)) + || -1 >> : (('G', 3), ('F', 3), ('E', 3), ('Base', 3), ('A', 4), ('A', 5), ('A', 6)) ; max(1, -1)
09/15/2019 06:46:31 PM DEBUG [Cat] accept || 2 >> : (('C', 0), ('D', 0), ('Base2', 0), ('G', 1), ('G', 2), ('G', 3)) + || -1 >> : (('G', 3), ('F', 3), ('E', 3), ('Base', 3), ('A', 4), ('A', 5), ('A', 6)) ; max(2, -1)
09/15/2019 06:46:31 PM DEBUG [Cat] accept || 2 >> : (('Base', 0), ('D', 0), ('Base2', 0), ('G', 1), ('G', 2), ('G', 3)) + || -1 >> : (('G', 3), ('F', 3), ('E', 3), ('Base', 3), ('A', 4), ('A', 5), ('A', 6)) ; max(2, -1)
09/15/2019 06:46:31 PM DEBUG [PartialControl] init: set([0]), final: set([3]), constraint: None
09/15/2019 06:46:31 PM DEBUG [PartialControl] init: set([3]), final: set([6]), constraint: None
09/15/2019 06:46:31 PM DEBUG [Cat] accept || 1 >> : (('Base2', 0), ('D', 0), ('C', 1), ('C', 2), ('C', 3)) + || -2 >> : (('C', 3), ('D', 3), ('Base2', 3), ('F', 4), ('F', 5), ('F', 6)) ; max(1, -2)
09/15/2019 06:46:31 PM DEBUG [Cat] accept || 1 >> : (('E', 0), ('D', 0), ('C', 1), ('C', 2), ('C', 3)) + || -2 >> : (('C', 3), ('D', 3), ('Base2', 3), ('F', 4), ('F', 5), ('F', 6)) ; max(1, -2)
09/15/2019 06:46:31 PM DEBUG [Cat] accept || 1 >> : (('A', 0), ('B', 0), ('C', 1), ('C', 2), ('C', 3)) + || -2 >> : (('C', 3), ('D', 3), ('Base2', 3), ('F', 4), ('F', 5), ('F', 6)) ; max(1, -2)
09/15/2019 06:46:31 PM DEBUG [Cat] accept || 2 >> : (('F', 0), ('Base2', 0), ('D', 0), ('C', 1), ('C', 2), ('C', 3)) + || -2 >> : (('C', 3), ('D', 3), ('Base2', 3), ('F', 4), ('F', 5), ('F', 6)) ; max(2, -2)
09/15/2019 06:46:31 PM DEBUG [Cat] accept || 0 >> : (('B', 0), ('C', 1), ('C', 2), ('C', 3)) + || -2 >> : (('C', 3), ('D', 3), ('Base2', 3), ('F', 4), ('F', 5), ('F', 6)) ; max(0, -2)
09/15/2019 06:46:31 PM DEBUG [Cat] accept || 2 >> : (('G', 0), ('Base2', 0), ('D', 0), ('C', 1), ('C', 2), ('C', 3)) + || -2 >> : (('C', 3), ('D', 3), ('Base2', 3), ('F', 4), ('F', 5), ('F', 6)) ; max(2, -2)
09/15/2019 06:46:31 PM DEBUG [Cat] accept || 1 >> : (('Base', 0), ('D', 0), ('C', 1), ('C', 2), ('C', 3)) + || -2 >> : (('C', 3), ('D', 3), ('Base2', 3), ('F', 4), ('F', 5), ('F', 6)) ; max(1, -2)
09/15/2019 06:46:31 PM DEBUG [Cat] accept || 0 >> : (('D', 0), ('C', 1), ('C', 2), ('C', 3)) + || -2 >> : (('C', 3), ('D', 3), ('Base2', 3), ('F', 4), ('F', 5), ('F', 6)) ; max(0, -2)
09/15/2019 06:46:31 PM INFO Generated control policy is: F -> 1 -> Base2 -> 1 -> D -> 1 -> Base -> 1 -> A -> 1 -> A -> 1 -> A
09/15/2019 06:46:31 PM INFO Generated control policy is: Base2 -> 1 -> F -> 1 -> F -> 1 -> F
09/15/2019 06:46:31 PM INFO Max deadline: 0
09/15/2019 06:46:31 PM INFO Generated output word is: [(), ('A',), ('A',), ('A',), (), (), (), ('G',), ('G',), ('G',)]
09/15/2019 06:46:31 PM INFO Generated control policy is: Base -> 1 -> A -> 1 -> A -> 1 -> A -> 1 -> Base -> 1 -> E -> 1 -> F -> 1 -> G -> 1 -> G -> 1 -> G
09/15/2019 06:47:03 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'G'])
09/15/2019 06:47:03 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 2 A )
09/15/2019 06:47:03 PM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['A', 'G'])
09/15/2019 06:47:03 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 G )
09/15/2019 06:47:03 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 A ) 0 3 ) DFA2: (Eventually (Hold 2 G ) 0 7 )
09/15/2019 06:47:03 PM DEBUG [spec] spec: [H^2 A]^[0, 3] * [H^2 G]^[0, 7]
09/15/2019 06:47:03 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 A ) 0 3 ) (Eventually (Hold 2 G ) 0 7 ) )
Directed: True
Multi: False
Props: {'A': 1, 'G': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (4, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (5, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'})]
		
09/15/2019 06:47:03 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/15/2019 06:47:03 PM DEBUG [spec] No of nodes: 7
09/15/2019 06:47:03 PM DEBUG [spec] No of edges: 12
09/15/2019 06:47:03 PM DEBUG alphabet: {'A': 1, 'G': 2}
09/15/2019 06:47:03 PM DEBUG (0, 0): {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:47:03 PM DEBUG (0, 1): {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}
09/15/2019 06:47:03 PM DEBUG (1, 0): {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:47:03 PM DEBUG (1, 2): {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}
09/15/2019 06:47:03 PM DEBUG (2, 0): {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:47:03 PM DEBUG (2, 3): {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}
09/15/2019 06:47:03 PM DEBUG (3, 3): {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:47:03 PM DEBUG (3, 4): {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}
09/15/2019 06:47:03 PM DEBUG (4, 3): {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:47:03 PM DEBUG (4, 5): {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}
09/15/2019 06:47:03 PM DEBUG (5, 3): {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:47:03 PM DEBUG (5, 6): {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}
09/15/2019 06:47:03 PM DEBUG 
End of translate


09/15/2019 06:47:03 PM INFO The bound of formula "[H^2 A]^[0, 3] * [H^2 G]^[0, 7]" is (5, 11)!
09/15/2019 06:47:03 PM INFO Translated formula "[H^2 A]^[0, 3] * [H^2 G]^[0, 7]" to infinity DFA of size (7, 12)!
09/15/2019 06:47:03 PM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['A', 'G'])
09/15/2019 06:47:03 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 2 G )
09/15/2019 06:47:03 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'G'])
09/15/2019 06:47:03 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 A )
09/15/2019 06:47:03 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 G ) 0 3 ) DFA2: (Eventually (Hold 2 A ) 0 7 )
09/15/2019 06:47:03 PM DEBUG [spec] spec: [H^2 G]^[0, 3] * [H^2 A]^[0, 7]
09/15/2019 06:47:03 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 G ) 0 3 ) (Eventually (Hold 2 A ) 0 7 ) )
Directed: True
Multi: False
Props: {'A': 1, 'G': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'})]
		
09/15/2019 06:47:03 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/15/2019 06:47:03 PM DEBUG [spec] No of nodes: 7
09/15/2019 06:47:03 PM DEBUG [spec] No of edges: 12
09/15/2019 06:47:03 PM DEBUG alphabet: {'A': 1, 'G': 2}
09/15/2019 06:47:03 PM DEBUG (0, 0): {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:47:03 PM DEBUG (0, 1): {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}
09/15/2019 06:47:03 PM DEBUG (1, 0): {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:47:03 PM DEBUG (1, 2): {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}
09/15/2019 06:47:03 PM DEBUG (2, 0): {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:47:03 PM DEBUG (2, 3): {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}
09/15/2019 06:47:03 PM DEBUG (3, 3): {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:47:03 PM DEBUG (3, 4): {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}
09/15/2019 06:47:03 PM DEBUG (4, 3): {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:47:03 PM DEBUG (4, 5): {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}
09/15/2019 06:47:03 PM DEBUG (5, 3): {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:47:03 PM DEBUG (5, 6): {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}
09/15/2019 06:47:03 PM DEBUG 
End of translate


09/15/2019 06:47:03 PM INFO The bound of formula "[H^2 G]^[0, 3] * [H^2 A]^[0, 7]" is (5, 11)!
09/15/2019 06:47:03 PM INFO Translated formula "[H^2 G]^[0, 3] * [H^2 A]^[0, 7]" to infinity DFA of size (7, 12)!
09/15/2019 06:47:03 PM DEBUG [hold] Prop: C Duration: 2 Negation: False Props: set(['C', 'F'])
09/15/2019 06:47:03 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 2 C )
09/15/2019 06:47:03 PM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['C', 'F'])
09/15/2019 06:47:03 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/15/2019 06:47:03 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 C ) 0 3 ) DFA2: (Eventually (Hold 2 F ) 0 7 )
09/15/2019 06:47:03 PM DEBUG [spec] spec: [H^2 C]^[0, 3] * [H^2 F]^[0, 7]
09/15/2019 06:47:03 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 C ) 0 3 ) (Eventually (Hold 2 F ) 0 7 ) )
Directed: True
Multi: False
Props: {'C': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3]), 'guard': u'C', 'weight': 0, 'label': u'C'}), (1, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'C', 'weight': 0, 'label': u'C'}), (2, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3]), 'guard': u'C', 'weight': 0, 'label': u'C'}), (3, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (4, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (5, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'})]
		
09/15/2019 06:47:03 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/15/2019 06:47:03 PM DEBUG [spec] No of nodes: 7
09/15/2019 06:47:03 PM DEBUG [spec] No of edges: 12
09/15/2019 06:47:03 PM DEBUG alphabet: {'C': 1, 'F': 2}
09/15/2019 06:47:03 PM DEBUG (0, 0): {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:47:03 PM DEBUG (0, 1): {'input': set([1, 3]), 'guard': u'C', 'weight': 0, 'label': u'C'}
09/15/2019 06:47:03 PM DEBUG (1, 0): {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:47:03 PM DEBUG (1, 2): {'input': set([1, 3]), 'guard': u'C', 'weight': 0, 'label': u'C'}
09/15/2019 06:47:03 PM DEBUG (2, 0): {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:47:03 PM DEBUG (2, 3): {'input': set([1, 3]), 'guard': u'C', 'weight': 0, 'label': u'C'}
09/15/2019 06:47:03 PM DEBUG (3, 3): {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:47:03 PM DEBUG (3, 4): {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}
09/15/2019 06:47:03 PM DEBUG (4, 3): {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:47:03 PM DEBUG (4, 5): {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}
09/15/2019 06:47:03 PM DEBUG (5, 3): {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:47:03 PM DEBUG (5, 6): {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}
09/15/2019 06:47:03 PM DEBUG 
End of translate


09/15/2019 06:47:03 PM INFO The bound of formula "[H^2 C]^[0, 3] * [H^2 F]^[0, 7]" is (5, 11)!
09/15/2019 06:47:03 PM INFO Translated formula "[H^2 C]^[0, 3] * [H^2 F]^[0, 7]" to infinity DFA of size (7, 12)!
09/15/2019 06:47:03 PM DEBUG 

Start policy computation

09/15/2019 06:47:03 PM DEBUG [extend_ts] TS: (9, 33) ETS:(9, 33)
09/15/2019 06:47:03 PM DEBUG [extend_ts] TS: (9, 33) ETS:(9, 33)
09/15/2019 06:47:03 PM DEBUG [extend_ts] TS: (9, 33) ETS:(9, 33)
09/15/2019 06:47:03 PM INFO Constructing product automaton with infinity DFA!
09/15/2019 06:47:03 PM INFO Product automaton size is: (21, 72)
09/15/2019 06:47:03 PM DEBUG ('A', 1) -> [('B', 0), ('Base', 0), ('A', 2)]
09/15/2019 06:47:03 PM DEBUG ('Base2', 0) -> [('Base2', 0), ('F', 0), ('G', 0), ('D', 0)]
09/15/2019 06:47:03 PM DEBUG ('F', 0) -> [('Base2', 0), ('F', 0), ('G', 0), ('E', 0)]
09/15/2019 06:47:03 PM DEBUG ('B', 3) -> [('A', 3), ('C', 3), ('B', 3)]
09/15/2019 06:47:03 PM DEBUG ('G', 4) -> [('F', 3), ('Base2', 3), ('G', 5)]
09/15/2019 06:47:03 PM DEBUG ('B', 0) -> [('A', 1), ('C', 0), ('B', 0)]
09/15/2019 06:47:03 PM DEBUG ('G', 6) -> []
09/15/2019 06:47:03 PM DEBUG ('G', 0) -> [('Base2', 0), ('F', 0), ('G', 0)]
09/15/2019 06:47:03 PM DEBUG ('F', 3) -> [('G', 4), ('Base2', 3), ('E', 3), ('F', 3)]
09/15/2019 06:47:03 PM DEBUG ('E', 3) -> [('F', 3), ('Base', 3), ('E', 3), ('D', 3)]
09/15/2019 06:47:03 PM DEBUG ('C', 0) -> [('B', 0), ('C', 0), ('D', 0)]
09/15/2019 06:47:03 PM DEBUG ('C', 3) -> [('C', 3), ('B', 3), ('D', 3)]
09/15/2019 06:47:03 PM DEBUG ('Base', 3) -> [('A', 3), ('Base', 3), ('E', 3), ('D', 3)]
09/15/2019 06:47:03 PM DEBUG ('D', 0) -> [('Base', 0), ('C', 0), ('E', 0), ('D', 0), ('Base2', 0)]
09/15/2019 06:47:03 PM DEBUG ('Base', 0) -> [('A', 1), ('Base', 0), ('D', 0), ('E', 0)]
09/15/2019 06:47:03 PM DEBUG ('Base2', 3) -> [('G', 4), ('Base2', 3), ('F', 3), ('D', 3)]
09/15/2019 06:47:03 PM DEBUG ('A', 3) -> [('A', 3), ('B', 3), ('Base', 3)]
09/15/2019 06:47:03 PM DEBUG ('D', 3) -> [('Base2', 3), ('C', 3), ('Base', 3), ('E', 3), ('D', 3)]
09/15/2019 06:47:03 PM DEBUG ('A', 2) -> [('B', 0), ('Base', 0), ('A', 3)]
09/15/2019 06:47:03 PM DEBUG ('G', 5) -> [('F', 3), ('Base2', 3), ('G', 6)]
09/15/2019 06:47:03 PM DEBUG ('E', 0) -> [('Base', 0), ('F', 0), ('D', 0), ('E', 0)]
09/15/2019 06:47:03 PM INFO Constructing product automaton with infinity DFA!
09/15/2019 06:47:03 PM INFO Product automaton size is: (21, 72)
09/15/2019 06:47:03 PM DEBUG ('Base2', 0) -> [('Base2', 0), ('G', 1), ('F', 0), ('D', 0)]
09/15/2019 06:47:03 PM DEBUG ('A', 5) -> [('A', 6), ('B', 3), ('Base', 3)]
09/15/2019 06:47:03 PM DEBUG ('A', 0) -> [('B', 0), ('Base', 0), ('A', 0)]
09/15/2019 06:47:03 PM DEBUG ('F', 0) -> [('Base2', 0), ('G', 1), ('F', 0), ('E', 0)]
09/15/2019 06:47:03 PM DEBUG ('E', 3) -> [('F', 3), ('Base', 3), ('E', 3), ('D', 3)]
09/15/2019 06:47:03 PM DEBUG ('F', 3) -> [('G', 3), ('F', 3), ('Base2', 3), ('E', 3)]
09/15/2019 06:47:03 PM DEBUG ('B', 0) -> [('B', 0), ('C', 0), ('A', 0)]
09/15/2019 06:47:03 PM DEBUG ('G', 1) -> [('Base2', 0), ('G', 2), ('F', 0)]
09/15/2019 06:47:03 PM DEBUG ('A', 4) -> [('A', 5), ('B', 3), ('Base', 3)]
09/15/2019 06:47:03 PM DEBUG ('G', 3) -> [('G', 3), ('F', 3), ('Base2', 3)]
09/15/2019 06:47:03 PM DEBUG ('C', 0) -> [('B', 0), ('C', 0), ('D', 0)]
09/15/2019 06:47:03 PM DEBUG ('G', 2) -> [('G', 3), ('Base2', 0), ('F', 0)]
09/15/2019 06:47:03 PM DEBUG ('C', 3) -> [('C', 3), ('B', 3), ('D', 3)]
09/15/2019 06:47:03 PM DEBUG ('Base', 3) -> [('D', 3), ('Base', 3), ('E', 3), ('A', 4)]
09/15/2019 06:47:03 PM DEBUG ('D', 0) -> [('Base', 0), ('C', 0), ('E', 0), ('D', 0), ('Base2', 0)]
09/15/2019 06:47:03 PM DEBUG ('B', 3) -> [('C', 3), ('B', 3), ('A', 4)]
09/15/2019 06:47:03 PM DEBUG ('Base', 0) -> [('Base', 0), ('A', 0), ('D', 0), ('E', 0)]
09/15/2019 06:47:03 PM DEBUG ('Base2', 3) -> [('G', 3), ('F', 3), ('Base2', 3), ('D', 3)]
09/15/2019 06:47:03 PM DEBUG ('A', 6) -> []
09/15/2019 06:47:03 PM DEBUG ('D', 3) -> [('Base2', 3), ('C', 3), ('Base', 3), ('E', 3), ('D', 3)]
09/15/2019 06:47:03 PM DEBUG ('E', 0) -> [('Base', 0), ('F', 0), ('D', 0), ('E', 0)]
09/15/2019 06:47:03 PM INFO Constructing product automaton with infinity DFA!
09/15/2019 06:47:03 PM INFO Product automaton size is: (21, 73)
09/15/2019 06:47:03 PM DEBUG ('Base2', 0) -> [('Base2', 0), ('F', 0), ('G', 0), ('D', 0)]
09/15/2019 06:47:03 PM DEBUG ('A', 0) -> [('B', 0), ('Base', 0), ('A', 0)]
09/15/2019 06:47:03 PM DEBUG ('F', 0) -> [('Base2', 0), ('F', 0), ('G', 0), ('E', 0)]
09/15/2019 06:47:03 PM DEBUG ('B', 3) -> [('A', 3), ('C', 3), ('B', 3)]
09/15/2019 06:47:03 PM DEBUG ('B', 0) -> [('B', 0), ('A', 0), ('C', 1)]
09/15/2019 06:47:03 PM DEBUG ('F', 6) -> []
09/15/2019 06:47:03 PM DEBUG ('G', 0) -> [('Base2', 0), ('F', 0), ('G', 0)]
09/15/2019 06:47:03 PM DEBUG ('C', 1) -> [('B', 0), ('D', 0), ('C', 2)]
09/15/2019 06:47:03 PM DEBUG ('E', 3) -> [('F', 4), ('Base', 3), ('E', 3), ('D', 3)]
09/15/2019 06:47:03 PM DEBUG ('F', 4) -> [('G', 3), ('F', 5), ('Base2', 3), ('E', 3)]
09/15/2019 06:47:03 PM DEBUG ('F', 5) -> [('G', 3), ('F', 6), ('Base2', 3), ('E', 3)]
09/15/2019 06:47:03 PM DEBUG ('C', 3) -> [('C', 3), ('B', 3), ('D', 3)]
09/15/2019 06:47:03 PM DEBUG ('Base', 3) -> [('A', 3), ('Base', 3), ('E', 3), ('D', 3)]
09/15/2019 06:47:03 PM DEBUG ('D', 0) -> [('Base', 0), ('Base2', 0), ('D', 0), ('C', 1), ('E', 0)]
09/15/2019 06:47:03 PM DEBUG ('C', 2) -> [('B', 0), ('C', 3), ('D', 0)]
09/15/2019 06:47:03 PM DEBUG ('Base', 0) -> [('Base', 0), ('A', 0), ('D', 0), ('E', 0)]
09/15/2019 06:47:03 PM DEBUG ('Base2', 3) -> [('G', 3), ('F', 4), ('Base2', 3), ('D', 3)]
09/15/2019 06:47:03 PM DEBUG ('G', 3) -> [('G', 3), ('F', 4), ('Base2', 3)]
09/15/2019 06:47:03 PM DEBUG ('D', 3) -> [('Base2', 3), ('C', 3), ('Base', 3), ('E', 3), ('D', 3)]
09/15/2019 06:47:03 PM DEBUG ('A', 3) -> [('A', 3), ('B', 3), ('Base', 3)]
09/15/2019 06:47:03 PM DEBUG ('E', 0) -> [('Base', 0), ('F', 0), ('D', 0), ('E', 0)]
09/15/2019 06:47:03 PM DEBUG [PartialControl] init: set([0]), final: set([3]), constraint: None
09/15/2019 06:47:03 PM DEBUG [PartialControl] init: set([3]), final: set([6]), constraint: None
09/15/2019 06:47:03 PM DEBUG [Cat] accept || 2 >> : (('Base2', 0), ('D', 0), ('Base', 0), ('A', 1), ('A', 2), ('A', 3)) + || -1 >> : (('A', 3), ('Base', 3), ('E', 3), ('F', 3), ('G', 4), ('G', 5), ('G', 6)) ; max(2, -1)
09/15/2019 06:47:03 PM DEBUG [Cat] accept || 1 >> : (('E', 0), ('Base', 0), ('A', 1), ('A', 2), ('A', 3)) + || -1 >> : (('A', 3), ('Base', 3), ('E', 3), ('F', 3), ('G', 4), ('G', 5), ('G', 6)) ; max(1, -1)
09/15/2019 06:47:03 PM DEBUG [Cat] accept || 2 >> : (('F', 0), ('E', 0), ('Base', 0), ('A', 1), ('A', 2), ('A', 3)) + || -1 >> : (('A', 3), ('Base', 3), ('E', 3), ('F', 3), ('G', 4), ('G', 5), ('G', 6)) ; max(2, -1)
09/15/2019 06:47:03 PM DEBUG [Cat] accept || 0 >> : (('B', 0), ('A', 1), ('A', 2), ('A', 3)) + || -1 >> : (('A', 3), ('Base', 3), ('E', 3), ('F', 3), ('G', 4), ('G', 5), ('G', 6)) ; max(0, -1)
09/15/2019 06:47:03 PM DEBUG [Cat] accept || 3 >> : (('G', 0), ('Base2', 0), ('D', 0), ('Base', 0), ('A', 1), ('A', 2), ('A', 3)) + || -1 >> : (('A', 3), ('Base', 3), ('E', 3), ('F', 3), ('G', 4), ('G', 5), ('G', 6)) ; max(3, -1)
09/15/2019 06:47:03 PM DEBUG [Cat] accept || 1 >> : (('C', 0), ('B', 0), ('A', 1), ('A', 2), ('A', 3)) + || -1 >> : (('A', 3), ('Base', 3), ('E', 3), ('F', 3), ('G', 4), ('G', 5), ('G', 6)) ; max(1, -1)
09/15/2019 06:47:03 PM DEBUG [Cat] accept || 0 >> : (('Base', 0), ('A', 1), ('A', 2), ('A', 3)) + || -1 >> : (('A', 3), ('Base', 3), ('E', 3), ('F', 3), ('G', 4), ('G', 5), ('G', 6)) ; max(0, -1)
09/15/2019 06:47:03 PM DEBUG [Cat] accept || 1 >> : (('D', 0), ('Base', 0), ('A', 1), ('A', 2), ('A', 3)) + || -1 >> : (('A', 3), ('Base', 3), ('E', 3), ('F', 3), ('G', 4), ('G', 5), ('G', 6)) ; max(1, -1)
09/15/2019 06:47:03 PM DEBUG [PartialControl] init: set([0]), final: set([3]), constraint: None
09/15/2019 06:47:03 PM DEBUG [PartialControl] init: set([3]), final: set([6]), constraint: None
09/15/2019 06:47:03 PM DEBUG [Cat] accept || 3 >> : (('A', 0), ('Base', 0), ('D', 0), ('Base2', 0), ('G', 1), ('G', 2), ('G', 3)) + || -1 >> : (('G', 3), ('F', 3), ('E', 3), ('Base', 3), ('A', 4), ('A', 5), ('A', 6)) ; max(3, -1)
09/15/2019 06:47:03 PM DEBUG [Cat] accept || 0 >> : (('F', 0), ('G', 1), ('G', 2), ('G', 3)) + || -1 >> : (('G', 3), ('F', 3), ('E', 3), ('Base', 3), ('A', 4), ('A', 5), ('A', 6)) ; max(0, -1)
09/15/2019 06:47:03 PM DEBUG [Cat] accept || 1 >> : (('D', 0), ('Base2', 0), ('G', 1), ('G', 2), ('G', 3)) + || -1 >> : (('G', 3), ('F', 3), ('E', 3), ('Base', 3), ('A', 4), ('A', 5), ('A', 6)) ; max(1, -1)
09/15/2019 06:47:03 PM DEBUG [Cat] accept || 0 >> : (('Base2', 0), ('G', 1), ('G', 2), ('G', 3)) + || -1 >> : (('G', 3), ('F', 3), ('E', 3), ('Base', 3), ('A', 4), ('A', 5), ('A', 6)) ; max(0, -1)
09/15/2019 06:47:03 PM DEBUG [Cat] accept || 3 >> : (('B', 0), ('C', 0), ('D', 0), ('Base2', 0), ('G', 1), ('G', 2), ('G', 3)) + || -1 >> : (('G', 3), ('F', 3), ('E', 3), ('Base', 3), ('A', 4), ('A', 5), ('A', 6)) ; max(3, -1)
09/15/2019 06:47:03 PM DEBUG [Cat] accept || 1 >> : (('E', 0), ('F', 0), ('G', 1), ('G', 2), ('G', 3)) + || -1 >> : (('G', 3), ('F', 3), ('E', 3), ('Base', 3), ('A', 4), ('A', 5), ('A', 6)) ; max(1, -1)
09/15/2019 06:47:03 PM DEBUG [Cat] accept || 2 >> : (('C', 0), ('D', 0), ('Base2', 0), ('G', 1), ('G', 2), ('G', 3)) + || -1 >> : (('G', 3), ('F', 3), ('E', 3), ('Base', 3), ('A', 4), ('A', 5), ('A', 6)) ; max(2, -1)
09/15/2019 06:47:03 PM DEBUG [Cat] accept || 2 >> : (('Base', 0), ('D', 0), ('Base2', 0), ('G', 1), ('G', 2), ('G', 3)) + || -1 >> : (('G', 3), ('F', 3), ('E', 3), ('Base', 3), ('A', 4), ('A', 5), ('A', 6)) ; max(2, -1)
09/15/2019 06:47:03 PM DEBUG [PartialControl] init: set([0]), final: set([3]), constraint: None
09/15/2019 06:47:03 PM DEBUG [PartialControl] init: set([3]), final: set([6]), constraint: None
09/15/2019 06:47:03 PM DEBUG [Cat] accept || 1 >> : (('Base2', 0), ('D', 0), ('C', 1), ('C', 2), ('C', 3)) + || -2 >> : (('C', 3), ('D', 3), ('Base2', 3), ('F', 4), ('F', 5), ('F', 6)) ; max(1, -2)
09/15/2019 06:47:03 PM DEBUG [Cat] accept || 1 >> : (('E', 0), ('D', 0), ('C', 1), ('C', 2), ('C', 3)) + || -2 >> : (('C', 3), ('D', 3), ('Base2', 3), ('F', 4), ('F', 5), ('F', 6)) ; max(1, -2)
09/15/2019 06:47:03 PM DEBUG [Cat] accept || 1 >> : (('A', 0), ('B', 0), ('C', 1), ('C', 2), ('C', 3)) + || -2 >> : (('C', 3), ('D', 3), ('Base2', 3), ('F', 4), ('F', 5), ('F', 6)) ; max(1, -2)
09/15/2019 06:47:03 PM DEBUG [Cat] accept || 2 >> : (('F', 0), ('Base2', 0), ('D', 0), ('C', 1), ('C', 2), ('C', 3)) + || -2 >> : (('C', 3), ('D', 3), ('Base2', 3), ('F', 4), ('F', 5), ('F', 6)) ; max(2, -2)
09/15/2019 06:47:03 PM DEBUG [Cat] accept || 0 >> : (('B', 0), ('C', 1), ('C', 2), ('C', 3)) + || -2 >> : (('C', 3), ('D', 3), ('Base2', 3), ('F', 4), ('F', 5), ('F', 6)) ; max(0, -2)
09/15/2019 06:47:03 PM DEBUG [Cat] accept || 2 >> : (('G', 0), ('Base2', 0), ('D', 0), ('C', 1), ('C', 2), ('C', 3)) + || -2 >> : (('C', 3), ('D', 3), ('Base2', 3), ('F', 4), ('F', 5), ('F', 6)) ; max(2, -2)
09/15/2019 06:47:03 PM DEBUG [Cat] accept || 1 >> : (('Base', 0), ('D', 0), ('C', 1), ('C', 2), ('C', 3)) + || -2 >> : (('C', 3), ('D', 3), ('Base2', 3), ('F', 4), ('F', 5), ('F', 6)) ; max(1, -2)
09/15/2019 06:47:03 PM DEBUG [Cat] accept || 0 >> : (('D', 0), ('C', 1), ('C', 2), ('C', 3)) + || -2 >> : (('C', 3), ('D', 3), ('Base2', 3), ('F', 4), ('F', 5), ('F', 6)) ; max(0, -2)
09/15/2019 06:47:03 PM INFO Generated control policy is: F -> 1 -> Base2 -> 1 -> D -> 1 -> Base -> 1 -> A -> 1 -> A -> 1 -> A
09/15/2019 06:47:03 PM INFO Generated control policy is: Base2 -> 1 -> F -> 1 -> F -> 1 -> F
09/15/2019 06:47:03 PM INFO Max deadline: 0
09/15/2019 06:47:03 PM INFO Generated output word is: [(), ('A',), ('A',), ('A',), (), (), (), ('G',), ('G',), ('G',)]
09/15/2019 06:47:03 PM INFO Generated control policy is: Base -> 1 -> A -> 1 -> A -> 1 -> A -> 1 -> Base -> 1 -> E -> 1 -> F -> 1 -> G -> 1 -> G -> 1 -> G
09/15/2019 06:47:03 PM INFO Max deadline: 0
09/15/2019 06:47:03 PM INFO Generated output word is: [(), ('G',), ('G',), ('G',), (), (), (), ('A',), ('A',), ('A',)]
09/15/2019 06:47:03 PM INFO Generated control policy is: Base2 -> 1 -> G -> 1 -> G -> 1 -> G -> 1 -> F -> 1 -> E -> 1 -> Base -> 1 -> A -> 1 -> A -> 1 -> A
09/15/2019 06:47:03 PM INFO Max deadline: 0
09/15/2019 06:47:03 PM INFO Generated output word is: [(), ('C',), ('C',), ('C',), (), (), ('F',), ('F',), ('F',)]
09/15/2019 06:47:03 PM INFO Generated control policy is: B -> 1 -> C -> 1 -> C -> 1 -> C -> 1 -> D -> 1 -> Base2 -> 1 -> F -> 1 -> F -> 1 -> F
09/15/2019 06:49:28 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'G'])
09/15/2019 06:49:28 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 2 A )
09/15/2019 06:49:28 PM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['A', 'G'])
09/15/2019 06:49:28 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 G )
09/15/2019 06:49:28 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 A ) 0 3 ) DFA2: (Eventually (Hold 2 G ) 0 7 )
09/15/2019 06:49:28 PM DEBUG [spec] spec: [H^2 A]^[0, 3] * [H^2 G]^[0, 7]
09/15/2019 06:49:28 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 A ) 0 3 ) (Eventually (Hold 2 G ) 0 7 ) )
Directed: True
Multi: False
Props: {'A': 1, 'G': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (4, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (5, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'})]
		
09/15/2019 06:49:28 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/15/2019 06:49:28 PM DEBUG [spec] No of nodes: 7
09/15/2019 06:49:28 PM DEBUG [spec] No of edges: 12
09/15/2019 06:49:28 PM DEBUG alphabet: {'A': 1, 'G': 2}
09/15/2019 06:49:28 PM DEBUG (0, 0): {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:49:28 PM DEBUG (0, 1): {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}
09/15/2019 06:49:28 PM DEBUG (1, 0): {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:49:28 PM DEBUG (1, 2): {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}
09/15/2019 06:49:28 PM DEBUG (2, 0): {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:49:28 PM DEBUG (2, 3): {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}
09/15/2019 06:49:28 PM DEBUG (3, 3): {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:49:28 PM DEBUG (3, 4): {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}
09/15/2019 06:49:28 PM DEBUG (4, 3): {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:49:28 PM DEBUG (4, 5): {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}
09/15/2019 06:49:28 PM DEBUG (5, 3): {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:49:28 PM DEBUG (5, 6): {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}
09/15/2019 06:49:28 PM DEBUG 
End of translate


09/15/2019 06:49:28 PM INFO The bound of formula "[H^2 A]^[0, 3] * [H^2 G]^[0, 7]" is (5, 11)!
09/15/2019 06:49:28 PM INFO Translated formula "[H^2 A]^[0, 3] * [H^2 G]^[0, 7]" to infinity DFA of size (7, 12)!
09/15/2019 06:49:28 PM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['A', 'G'])
09/15/2019 06:49:28 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 2 G )
09/15/2019 06:49:28 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'G'])
09/15/2019 06:49:28 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 A )
09/15/2019 06:49:28 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 G ) 0 3 ) DFA2: (Eventually (Hold 2 A ) 0 7 )
09/15/2019 06:49:28 PM DEBUG [spec] spec: [H^2 G]^[0, 3] * [H^2 A]^[0, 7]
09/15/2019 06:49:28 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 G ) 0 3 ) (Eventually (Hold 2 A ) 0 7 ) )
Directed: True
Multi: False
Props: {'A': 1, 'G': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'})]
		
09/15/2019 06:49:28 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/15/2019 06:49:28 PM DEBUG [spec] No of nodes: 7
09/15/2019 06:49:28 PM DEBUG [spec] No of edges: 12
09/15/2019 06:49:28 PM DEBUG alphabet: {'A': 1, 'G': 2}
09/15/2019 06:49:28 PM DEBUG (0, 0): {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:49:28 PM DEBUG (0, 1): {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}
09/15/2019 06:49:28 PM DEBUG (1, 0): {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:49:28 PM DEBUG (1, 2): {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}
09/15/2019 06:49:28 PM DEBUG (2, 0): {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:49:28 PM DEBUG (2, 3): {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}
09/15/2019 06:49:28 PM DEBUG (3, 3): {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:49:28 PM DEBUG (3, 4): {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}
09/15/2019 06:49:28 PM DEBUG (4, 3): {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:49:28 PM DEBUG (4, 5): {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}
09/15/2019 06:49:28 PM DEBUG (5, 3): {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:49:28 PM DEBUG (5, 6): {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}
09/15/2019 06:49:28 PM DEBUG 
End of translate


09/15/2019 06:49:28 PM INFO The bound of formula "[H^2 G]^[0, 3] * [H^2 A]^[0, 7]" is (5, 11)!
09/15/2019 06:49:28 PM INFO Translated formula "[H^2 G]^[0, 3] * [H^2 A]^[0, 7]" to infinity DFA of size (7, 12)!
09/15/2019 06:49:28 PM DEBUG [hold] Prop: C Duration: 2 Negation: False Props: set(['C', 'F'])
09/15/2019 06:49:28 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 2 C )
09/15/2019 06:49:28 PM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['C', 'F'])
09/15/2019 06:49:28 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/15/2019 06:49:28 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 C ) 0 3 ) DFA2: (Eventually (Hold 2 F ) 0 7 )
09/15/2019 06:49:28 PM DEBUG [spec] spec: [H^2 C]^[0, 3] * [H^2 F]^[0, 7]
09/15/2019 06:49:28 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 C ) 0 3 ) (Eventually (Hold 2 F ) 0 7 ) )
Directed: True
Multi: False
Props: {'C': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3]), 'guard': u'C', 'weight': 0, 'label': u'C'}), (1, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'C', 'weight': 0, 'label': u'C'}), (2, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3]), 'guard': u'C', 'weight': 0, 'label': u'C'}), (3, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (4, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (5, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'})]
		
09/15/2019 06:49:28 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/15/2019 06:49:28 PM DEBUG [spec] No of nodes: 7
09/15/2019 06:49:28 PM DEBUG [spec] No of edges: 12
09/15/2019 06:49:28 PM DEBUG alphabet: {'C': 1, 'F': 2}
09/15/2019 06:49:28 PM DEBUG (0, 0): {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:49:28 PM DEBUG (0, 1): {'input': set([1, 3]), 'guard': u'C', 'weight': 0, 'label': u'C'}
09/15/2019 06:49:28 PM DEBUG (1, 0): {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:49:28 PM DEBUG (1, 2): {'input': set([1, 3]), 'guard': u'C', 'weight': 0, 'label': u'C'}
09/15/2019 06:49:28 PM DEBUG (2, 0): {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:49:28 PM DEBUG (2, 3): {'input': set([1, 3]), 'guard': u'C', 'weight': 0, 'label': u'C'}
09/15/2019 06:49:28 PM DEBUG (3, 3): {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:49:28 PM DEBUG (3, 4): {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}
09/15/2019 06:49:28 PM DEBUG (4, 3): {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:49:28 PM DEBUG (4, 5): {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}
09/15/2019 06:49:28 PM DEBUG (5, 3): {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:49:28 PM DEBUG (5, 6): {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}
09/15/2019 06:49:28 PM DEBUG 
End of translate


09/15/2019 06:49:28 PM INFO The bound of formula "[H^2 C]^[0, 3] * [H^2 F]^[0, 7]" is (5, 11)!
09/15/2019 06:49:28 PM INFO Translated formula "[H^2 C]^[0, 3] * [H^2 F]^[0, 7]" to infinity DFA of size (7, 12)!
09/15/2019 06:49:28 PM DEBUG 

Start policy computation

09/15/2019 06:49:28 PM DEBUG [extend_ts] TS: (9, 33) ETS:(9, 33)
09/15/2019 06:49:28 PM DEBUG [extend_ts] TS: (9, 33) ETS:(9, 33)
09/15/2019 06:49:28 PM DEBUG [extend_ts] TS: (9, 33) ETS:(9, 33)
09/15/2019 06:49:28 PM INFO Constructing product automaton with infinity DFA!
09/15/2019 06:49:28 PM INFO Product automaton size is: (21, 72)
09/15/2019 06:49:28 PM DEBUG ('A', 1) -> [('B', 0), ('Base', 0), ('A', 2)]
09/15/2019 06:49:28 PM DEBUG ('Base2', 0) -> [('Base2', 0), ('F', 0), ('G', 0), ('D', 0)]
09/15/2019 06:49:28 PM DEBUG ('F', 0) -> [('Base2', 0), ('F', 0), ('G', 0), ('E', 0)]
09/15/2019 06:49:28 PM DEBUG ('B', 3) -> [('A', 3), ('C', 3), ('B', 3)]
09/15/2019 06:49:28 PM DEBUG ('G', 4) -> [('F', 3), ('Base2', 3), ('G', 5)]
09/15/2019 06:49:28 PM DEBUG ('B', 0) -> [('A', 1), ('C', 0), ('B', 0)]
09/15/2019 06:49:28 PM DEBUG ('G', 6) -> []
09/15/2019 06:49:28 PM DEBUG ('G', 0) -> [('Base2', 0), ('F', 0), ('G', 0)]
09/15/2019 06:49:28 PM DEBUG ('F', 3) -> [('G', 4), ('Base2', 3), ('E', 3), ('F', 3)]
09/15/2019 06:49:28 PM DEBUG ('E', 3) -> [('F', 3), ('Base', 3), ('E', 3), ('D', 3)]
09/15/2019 06:49:28 PM DEBUG ('C', 0) -> [('B', 0), ('C', 0), ('D', 0)]
09/15/2019 06:49:28 PM DEBUG ('C', 3) -> [('C', 3), ('B', 3), ('D', 3)]
09/15/2019 06:49:28 PM DEBUG ('Base', 3) -> [('A', 3), ('Base', 3), ('E', 3), ('D', 3)]
09/15/2019 06:49:28 PM DEBUG ('D', 0) -> [('Base', 0), ('C', 0), ('E', 0), ('D', 0), ('Base2', 0)]
09/15/2019 06:49:28 PM DEBUG ('Base', 0) -> [('A', 1), ('Base', 0), ('D', 0), ('E', 0)]
09/15/2019 06:49:28 PM DEBUG ('Base2', 3) -> [('G', 4), ('Base2', 3), ('F', 3), ('D', 3)]
09/15/2019 06:49:28 PM DEBUG ('A', 3) -> [('A', 3), ('B', 3), ('Base', 3)]
09/15/2019 06:49:28 PM DEBUG ('D', 3) -> [('Base2', 3), ('C', 3), ('Base', 3), ('E', 3), ('D', 3)]
09/15/2019 06:49:28 PM DEBUG ('A', 2) -> [('B', 0), ('Base', 0), ('A', 3)]
09/15/2019 06:49:28 PM DEBUG ('G', 5) -> [('F', 3), ('Base2', 3), ('G', 6)]
09/15/2019 06:49:28 PM DEBUG ('E', 0) -> [('Base', 0), ('F', 0), ('D', 0), ('E', 0)]
09/15/2019 06:49:28 PM INFO Constructing product automaton with infinity DFA!
09/15/2019 06:49:28 PM INFO Product automaton size is: (21, 72)
09/15/2019 06:49:28 PM DEBUG ('Base2', 0) -> [('Base2', 0), ('G', 1), ('F', 0), ('D', 0)]
09/15/2019 06:49:28 PM DEBUG ('A', 5) -> [('A', 6), ('B', 3), ('Base', 3)]
09/15/2019 06:49:28 PM DEBUG ('A', 0) -> [('B', 0), ('Base', 0), ('A', 0)]
09/15/2019 06:49:28 PM DEBUG ('F', 0) -> [('Base2', 0), ('G', 1), ('F', 0), ('E', 0)]
09/15/2019 06:49:28 PM DEBUG ('E', 3) -> [('F', 3), ('Base', 3), ('E', 3), ('D', 3)]
09/15/2019 06:49:28 PM DEBUG ('F', 3) -> [('G', 3), ('F', 3), ('Base2', 3), ('E', 3)]
09/15/2019 06:49:28 PM DEBUG ('B', 0) -> [('B', 0), ('C', 0), ('A', 0)]
09/15/2019 06:49:28 PM DEBUG ('G', 1) -> [('Base2', 0), ('G', 2), ('F', 0)]
09/15/2019 06:49:28 PM DEBUG ('A', 4) -> [('A', 5), ('B', 3), ('Base', 3)]
09/15/2019 06:49:28 PM DEBUG ('G', 3) -> [('G', 3), ('F', 3), ('Base2', 3)]
09/15/2019 06:49:28 PM DEBUG ('C', 0) -> [('B', 0), ('C', 0), ('D', 0)]
09/15/2019 06:49:28 PM DEBUG ('G', 2) -> [('G', 3), ('Base2', 0), ('F', 0)]
09/15/2019 06:49:28 PM DEBUG ('C', 3) -> [('C', 3), ('B', 3), ('D', 3)]
09/15/2019 06:49:28 PM DEBUG ('Base', 3) -> [('D', 3), ('Base', 3), ('E', 3), ('A', 4)]
09/15/2019 06:49:28 PM DEBUG ('D', 0) -> [('Base', 0), ('C', 0), ('E', 0), ('D', 0), ('Base2', 0)]
09/15/2019 06:49:28 PM DEBUG ('B', 3) -> [('C', 3), ('B', 3), ('A', 4)]
09/15/2019 06:49:28 PM DEBUG ('Base', 0) -> [('Base', 0), ('A', 0), ('D', 0), ('E', 0)]
09/15/2019 06:49:28 PM DEBUG ('Base2', 3) -> [('G', 3), ('F', 3), ('Base2', 3), ('D', 3)]
09/15/2019 06:49:28 PM DEBUG ('A', 6) -> []
09/15/2019 06:49:28 PM DEBUG ('D', 3) -> [('Base2', 3), ('C', 3), ('Base', 3), ('E', 3), ('D', 3)]
09/15/2019 06:49:28 PM DEBUG ('E', 0) -> [('Base', 0), ('F', 0), ('D', 0), ('E', 0)]
09/15/2019 06:49:28 PM INFO Constructing product automaton with infinity DFA!
09/15/2019 06:49:28 PM INFO Product automaton size is: (21, 73)
09/15/2019 06:49:28 PM DEBUG ('Base2', 0) -> [('Base2', 0), ('F', 0), ('G', 0), ('D', 0)]
09/15/2019 06:49:28 PM DEBUG ('A', 0) -> [('B', 0), ('Base', 0), ('A', 0)]
09/15/2019 06:49:28 PM DEBUG ('F', 0) -> [('Base2', 0), ('F', 0), ('G', 0), ('E', 0)]
09/15/2019 06:49:28 PM DEBUG ('B', 3) -> [('A', 3), ('C', 3), ('B', 3)]
09/15/2019 06:49:28 PM DEBUG ('B', 0) -> [('B', 0), ('A', 0), ('C', 1)]
09/15/2019 06:49:28 PM DEBUG ('F', 6) -> []
09/15/2019 06:49:28 PM DEBUG ('G', 0) -> [('Base2', 0), ('F', 0), ('G', 0)]
09/15/2019 06:49:28 PM DEBUG ('C', 1) -> [('B', 0), ('D', 0), ('C', 2)]
09/15/2019 06:49:28 PM DEBUG ('E', 3) -> [('F', 4), ('Base', 3), ('E', 3), ('D', 3)]
09/15/2019 06:49:28 PM DEBUG ('F', 4) -> [('G', 3), ('F', 5), ('Base2', 3), ('E', 3)]
09/15/2019 06:49:28 PM DEBUG ('F', 5) -> [('G', 3), ('F', 6), ('Base2', 3), ('E', 3)]
09/15/2019 06:49:28 PM DEBUG ('C', 3) -> [('C', 3), ('B', 3), ('D', 3)]
09/15/2019 06:49:28 PM DEBUG ('Base', 3) -> [('A', 3), ('Base', 3), ('E', 3), ('D', 3)]
09/15/2019 06:49:28 PM DEBUG ('D', 0) -> [('Base', 0), ('Base2', 0), ('D', 0), ('C', 1), ('E', 0)]
09/15/2019 06:49:28 PM DEBUG ('C', 2) -> [('B', 0), ('C', 3), ('D', 0)]
09/15/2019 06:49:28 PM DEBUG ('Base', 0) -> [('Base', 0), ('A', 0), ('D', 0), ('E', 0)]
09/15/2019 06:49:28 PM DEBUG ('Base2', 3) -> [('G', 3), ('F', 4), ('Base2', 3), ('D', 3)]
09/15/2019 06:49:28 PM DEBUG ('G', 3) -> [('G', 3), ('F', 4), ('Base2', 3)]
09/15/2019 06:49:28 PM DEBUG ('D', 3) -> [('Base2', 3), ('C', 3), ('Base', 3), ('E', 3), ('D', 3)]
09/15/2019 06:49:28 PM DEBUG ('A', 3) -> [('A', 3), ('B', 3), ('Base', 3)]
09/15/2019 06:49:28 PM DEBUG ('E', 0) -> [('Base', 0), ('F', 0), ('D', 0), ('E', 0)]
09/15/2019 06:49:28 PM DEBUG [PartialControl] init: set([0]), final: set([3]), constraint: None
09/15/2019 06:49:28 PM DEBUG [PartialControl] init: set([3]), final: set([6]), constraint: None
09/15/2019 06:49:28 PM DEBUG [Cat] accept || 2 >> : (('Base2', 0), ('D', 0), ('Base', 0), ('A', 1), ('A', 2), ('A', 3)) + || -1 >> : (('A', 3), ('Base', 3), ('E', 3), ('F', 3), ('G', 4), ('G', 5), ('G', 6)) ; max(2, -1)
09/15/2019 06:49:28 PM DEBUG [Cat] accept || 1 >> : (('E', 0), ('Base', 0), ('A', 1), ('A', 2), ('A', 3)) + || -1 >> : (('A', 3), ('Base', 3), ('E', 3), ('F', 3), ('G', 4), ('G', 5), ('G', 6)) ; max(1, -1)
09/15/2019 06:49:28 PM DEBUG [Cat] accept || 2 >> : (('F', 0), ('E', 0), ('Base', 0), ('A', 1), ('A', 2), ('A', 3)) + || -1 >> : (('A', 3), ('Base', 3), ('E', 3), ('F', 3), ('G', 4), ('G', 5), ('G', 6)) ; max(2, -1)
09/15/2019 06:49:28 PM DEBUG [Cat] accept || 0 >> : (('B', 0), ('A', 1), ('A', 2), ('A', 3)) + || -1 >> : (('A', 3), ('Base', 3), ('E', 3), ('F', 3), ('G', 4), ('G', 5), ('G', 6)) ; max(0, -1)
09/15/2019 06:49:28 PM DEBUG [Cat] accept || 3 >> : (('G', 0), ('Base2', 0), ('D', 0), ('Base', 0), ('A', 1), ('A', 2), ('A', 3)) + || -1 >> : (('A', 3), ('Base', 3), ('E', 3), ('F', 3), ('G', 4), ('G', 5), ('G', 6)) ; max(3, -1)
09/15/2019 06:49:28 PM DEBUG [Cat] accept || 1 >> : (('C', 0), ('B', 0), ('A', 1), ('A', 2), ('A', 3)) + || -1 >> : (('A', 3), ('Base', 3), ('E', 3), ('F', 3), ('G', 4), ('G', 5), ('G', 6)) ; max(1, -1)
09/15/2019 06:49:28 PM DEBUG [Cat] accept || 0 >> : (('Base', 0), ('A', 1), ('A', 2), ('A', 3)) + || -1 >> : (('A', 3), ('Base', 3), ('E', 3), ('F', 3), ('G', 4), ('G', 5), ('G', 6)) ; max(0, -1)
09/15/2019 06:49:28 PM DEBUG [Cat] accept || 1 >> : (('D', 0), ('Base', 0), ('A', 1), ('A', 2), ('A', 3)) + || -1 >> : (('A', 3), ('Base', 3), ('E', 3), ('F', 3), ('G', 4), ('G', 5), ('G', 6)) ; max(1, -1)
09/15/2019 06:49:28 PM DEBUG [PartialControl] init: set([0]), final: set([3]), constraint: None
09/15/2019 06:49:28 PM DEBUG [PartialControl] init: set([3]), final: set([6]), constraint: None
09/15/2019 06:49:28 PM DEBUG [Cat] accept || 3 >> : (('A', 0), ('Base', 0), ('D', 0), ('Base2', 0), ('G', 1), ('G', 2), ('G', 3)) + || -1 >> : (('G', 3), ('F', 3), ('E', 3), ('Base', 3), ('A', 4), ('A', 5), ('A', 6)) ; max(3, -1)
09/15/2019 06:49:28 PM DEBUG [Cat] accept || 0 >> : (('F', 0), ('G', 1), ('G', 2), ('G', 3)) + || -1 >> : (('G', 3), ('F', 3), ('E', 3), ('Base', 3), ('A', 4), ('A', 5), ('A', 6)) ; max(0, -1)
09/15/2019 06:49:28 PM DEBUG [Cat] accept || 1 >> : (('D', 0), ('Base2', 0), ('G', 1), ('G', 2), ('G', 3)) + || -1 >> : (('G', 3), ('F', 3), ('E', 3), ('Base', 3), ('A', 4), ('A', 5), ('A', 6)) ; max(1, -1)
09/15/2019 06:49:28 PM DEBUG [Cat] accept || 0 >> : (('Base2', 0), ('G', 1), ('G', 2), ('G', 3)) + || -1 >> : (('G', 3), ('F', 3), ('E', 3), ('Base', 3), ('A', 4), ('A', 5), ('A', 6)) ; max(0, -1)
09/15/2019 06:49:28 PM DEBUG [Cat] accept || 3 >> : (('B', 0), ('C', 0), ('D', 0), ('Base2', 0), ('G', 1), ('G', 2), ('G', 3)) + || -1 >> : (('G', 3), ('F', 3), ('E', 3), ('Base', 3), ('A', 4), ('A', 5), ('A', 6)) ; max(3, -1)
09/15/2019 06:49:28 PM DEBUG [Cat] accept || 1 >> : (('E', 0), ('F', 0), ('G', 1), ('G', 2), ('G', 3)) + || -1 >> : (('G', 3), ('F', 3), ('E', 3), ('Base', 3), ('A', 4), ('A', 5), ('A', 6)) ; max(1, -1)
09/15/2019 06:49:28 PM DEBUG [Cat] accept || 2 >> : (('C', 0), ('D', 0), ('Base2', 0), ('G', 1), ('G', 2), ('G', 3)) + || -1 >> : (('G', 3), ('F', 3), ('E', 3), ('Base', 3), ('A', 4), ('A', 5), ('A', 6)) ; max(2, -1)
09/15/2019 06:49:28 PM DEBUG [Cat] accept || 2 >> : (('Base', 0), ('D', 0), ('Base2', 0), ('G', 1), ('G', 2), ('G', 3)) + || -1 >> : (('G', 3), ('F', 3), ('E', 3), ('Base', 3), ('A', 4), ('A', 5), ('A', 6)) ; max(2, -1)
09/15/2019 06:49:28 PM DEBUG [PartialControl] init: set([0]), final: set([3]), constraint: None
09/15/2019 06:49:28 PM DEBUG [PartialControl] init: set([3]), final: set([6]), constraint: None
09/15/2019 06:49:28 PM DEBUG [Cat] accept || 1 >> : (('Base2', 0), ('D', 0), ('C', 1), ('C', 2), ('C', 3)) + || -2 >> : (('C', 3), ('D', 3), ('Base2', 3), ('F', 4), ('F', 5), ('F', 6)) ; max(1, -2)
09/15/2019 06:49:28 PM DEBUG [Cat] accept || 1 >> : (('E', 0), ('D', 0), ('C', 1), ('C', 2), ('C', 3)) + || -2 >> : (('C', 3), ('D', 3), ('Base2', 3), ('F', 4), ('F', 5), ('F', 6)) ; max(1, -2)
09/15/2019 06:49:28 PM DEBUG [Cat] accept || 1 >> : (('A', 0), ('B', 0), ('C', 1), ('C', 2), ('C', 3)) + || -2 >> : (('C', 3), ('D', 3), ('Base2', 3), ('F', 4), ('F', 5), ('F', 6)) ; max(1, -2)
09/15/2019 06:49:28 PM DEBUG [Cat] accept || 2 >> : (('F', 0), ('Base2', 0), ('D', 0), ('C', 1), ('C', 2), ('C', 3)) + || -2 >> : (('C', 3), ('D', 3), ('Base2', 3), ('F', 4), ('F', 5), ('F', 6)) ; max(2, -2)
09/15/2019 06:49:28 PM DEBUG [Cat] accept || 0 >> : (('B', 0), ('C', 1), ('C', 2), ('C', 3)) + || -2 >> : (('C', 3), ('D', 3), ('Base2', 3), ('F', 4), ('F', 5), ('F', 6)) ; max(0, -2)
09/15/2019 06:49:28 PM DEBUG [Cat] accept || 2 >> : (('G', 0), ('Base2', 0), ('D', 0), ('C', 1), ('C', 2), ('C', 3)) + || -2 >> : (('C', 3), ('D', 3), ('Base2', 3), ('F', 4), ('F', 5), ('F', 6)) ; max(2, -2)
09/15/2019 06:49:28 PM DEBUG [Cat] accept || 1 >> : (('Base', 0), ('D', 0), ('C', 1), ('C', 2), ('C', 3)) + || -2 >> : (('C', 3), ('D', 3), ('Base2', 3), ('F', 4), ('F', 5), ('F', 6)) ; max(1, -2)
09/15/2019 06:49:28 PM DEBUG [Cat] accept || 0 >> : (('D', 0), ('C', 1), ('C', 2), ('C', 3)) + || -2 >> : (('C', 3), ('D', 3), ('Base2', 3), ('F', 4), ('F', 5), ('F', 6)) ; max(0, -2)
09/15/2019 06:49:28 PM INFO Generated control policy is: F -> 1 -> Base2 -> 1 -> D -> 1 -> Base -> 1 -> A -> 1 -> A -> 1 -> A
09/15/2019 06:49:28 PM INFO Generated control policy is: Base2 -> 1 -> F -> 1 -> F -> 1 -> F
09/15/2019 06:49:28 PM INFO Max deadline: 0
09/15/2019 06:49:28 PM INFO Generated output word is: [(), ('A',), ('A',), ('A',), (), (), (), ('G',), ('G',), ('G',)]
09/15/2019 06:49:28 PM INFO Generated control policy is: Base -> 1 -> A -> 1 -> A -> 1 -> A -> 1 -> Base -> 1 -> E -> 1 -> F -> 1 -> G -> 1 -> G -> 1 -> G
09/15/2019 06:49:28 PM INFO Max deadline: 0
09/15/2019 06:49:28 PM INFO Generated output word is: [(), ('G',), ('G',), ('G',), (), (), (), ('A',), ('A',), ('A',)]
09/15/2019 06:49:28 PM INFO Generated control policy is: Base2 -> 1 -> G -> 1 -> G -> 1 -> G -> 1 -> F -> 1 -> E -> 1 -> Base -> 1 -> A -> 1 -> A -> 1 -> A
09/15/2019 06:49:28 PM INFO Max deadline: 0
09/15/2019 06:49:28 PM INFO Generated output word is: [(), ('C',), ('C',), ('C',), (), (), ('F',), ('F',), ('F',)]
09/15/2019 06:49:28 PM INFO Generated control policy is: B -> 1 -> C -> 1 -> C -> 1 -> C -> 1 -> D -> 1 -> Base2 -> 1 -> F -> 1 -> F -> 1 -> F
09/15/2019 06:50:50 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'G'])
09/15/2019 06:50:50 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 2 A )
09/15/2019 06:50:50 PM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['A', 'G'])
09/15/2019 06:50:50 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 G )
09/15/2019 06:50:50 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 A ) 0 3 ) DFA2: (Eventually (Hold 2 G ) 0 7 )
09/15/2019 06:50:50 PM DEBUG [spec] spec: [H^2 A]^[0, 3] * [H^2 G]^[0, 7]
09/15/2019 06:50:50 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 A ) 0 3 ) (Eventually (Hold 2 G ) 0 7 ) )
Directed: True
Multi: False
Props: {'A': 1, 'G': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (4, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (5, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'})]
		
09/15/2019 06:50:50 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/15/2019 06:50:50 PM DEBUG [spec] No of nodes: 7
09/15/2019 06:50:50 PM DEBUG [spec] No of edges: 12
09/15/2019 06:50:50 PM DEBUG alphabet: {'A': 1, 'G': 2}
09/15/2019 06:50:50 PM DEBUG (0, 0): {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:50:50 PM DEBUG (0, 1): {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}
09/15/2019 06:50:50 PM DEBUG (1, 0): {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:50:50 PM DEBUG (1, 2): {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}
09/15/2019 06:50:50 PM DEBUG (2, 0): {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:50:50 PM DEBUG (2, 3): {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}
09/15/2019 06:50:50 PM DEBUG (3, 3): {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:50:50 PM DEBUG (3, 4): {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}
09/15/2019 06:50:50 PM DEBUG (4, 3): {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:50:50 PM DEBUG (4, 5): {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}
09/15/2019 06:50:50 PM DEBUG (5, 3): {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:50:50 PM DEBUG (5, 6): {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}
09/15/2019 06:50:50 PM DEBUG 
End of translate


09/15/2019 06:50:50 PM INFO The bound of formula "[H^2 A]^[0, 3] * [H^2 G]^[0, 7]" is (5, 11)!
09/15/2019 06:50:50 PM INFO Translated formula "[H^2 A]^[0, 3] * [H^2 G]^[0, 7]" to infinity DFA of size (7, 12)!
09/15/2019 06:50:50 PM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['A', 'G'])
09/15/2019 06:50:50 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 2 G )
09/15/2019 06:50:50 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'G'])
09/15/2019 06:50:50 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 A )
09/15/2019 06:50:50 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 G ) 0 3 ) DFA2: (Eventually (Hold 2 A ) 0 7 )
09/15/2019 06:50:50 PM DEBUG [spec] spec: [H^2 G]^[0, 3] * [H^2 A]^[0, 7]
09/15/2019 06:50:50 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 G ) 0 3 ) (Eventually (Hold 2 A ) 0 7 ) )
Directed: True
Multi: False
Props: {'A': 1, 'G': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'})]
		
09/15/2019 06:50:50 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/15/2019 06:50:50 PM DEBUG [spec] No of nodes: 7
09/15/2019 06:50:50 PM DEBUG [spec] No of edges: 12
09/15/2019 06:50:50 PM DEBUG alphabet: {'A': 1, 'G': 2}
09/15/2019 06:50:50 PM DEBUG (0, 0): {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:50:50 PM DEBUG (0, 1): {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}
09/15/2019 06:50:50 PM DEBUG (1, 0): {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:50:50 PM DEBUG (1, 2): {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}
09/15/2019 06:50:50 PM DEBUG (2, 0): {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:50:50 PM DEBUG (2, 3): {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}
09/15/2019 06:50:50 PM DEBUG (3, 3): {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:50:50 PM DEBUG (3, 4): {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}
09/15/2019 06:50:50 PM DEBUG (4, 3): {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:50:50 PM DEBUG (4, 5): {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}
09/15/2019 06:50:50 PM DEBUG (5, 3): {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:50:50 PM DEBUG (5, 6): {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}
09/15/2019 06:50:50 PM DEBUG 
End of translate


09/15/2019 06:50:50 PM INFO The bound of formula "[H^2 G]^[0, 3] * [H^2 A]^[0, 7]" is (5, 11)!
09/15/2019 06:50:50 PM INFO Translated formula "[H^2 G]^[0, 3] * [H^2 A]^[0, 7]" to infinity DFA of size (7, 12)!
09/15/2019 06:50:50 PM DEBUG [hold] Prop: C Duration: 2 Negation: False Props: set(['C', 'F'])
09/15/2019 06:50:50 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 2 C )
09/15/2019 06:50:50 PM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['C', 'F'])
09/15/2019 06:50:50 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/15/2019 06:50:50 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 C ) 0 3 ) DFA2: (Eventually (Hold 2 F ) 0 7 )
09/15/2019 06:50:50 PM DEBUG [spec] spec: [H^2 C]^[0, 3] * [H^2 F]^[0, 7]
09/15/2019 06:50:50 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 C ) 0 3 ) (Eventually (Hold 2 F ) 0 7 ) )
Directed: True
Multi: False
Props: {'C': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3]), 'guard': u'C', 'weight': 0, 'label': u'C'}), (1, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'C', 'weight': 0, 'label': u'C'}), (2, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3]), 'guard': u'C', 'weight': 0, 'label': u'C'}), (3, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (4, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (5, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'})]
		
09/15/2019 06:50:50 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/15/2019 06:50:50 PM DEBUG [spec] No of nodes: 7
09/15/2019 06:50:50 PM DEBUG [spec] No of edges: 12
09/15/2019 06:50:50 PM DEBUG alphabet: {'C': 1, 'F': 2}
09/15/2019 06:50:50 PM DEBUG (0, 0): {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:50:50 PM DEBUG (0, 1): {'input': set([1, 3]), 'guard': u'C', 'weight': 0, 'label': u'C'}
09/15/2019 06:50:50 PM DEBUG (1, 0): {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:50:50 PM DEBUG (1, 2): {'input': set([1, 3]), 'guard': u'C', 'weight': 0, 'label': u'C'}
09/15/2019 06:50:50 PM DEBUG (2, 0): {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:50:50 PM DEBUG (2, 3): {'input': set([1, 3]), 'guard': u'C', 'weight': 0, 'label': u'C'}
09/15/2019 06:50:50 PM DEBUG (3, 3): {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:50:50 PM DEBUG (3, 4): {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}
09/15/2019 06:50:50 PM DEBUG (4, 3): {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:50:50 PM DEBUG (4, 5): {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}
09/15/2019 06:50:50 PM DEBUG (5, 3): {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:50:50 PM DEBUG (5, 6): {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}
09/15/2019 06:50:50 PM DEBUG 
End of translate


09/15/2019 06:50:50 PM INFO The bound of formula "[H^2 C]^[0, 3] * [H^2 F]^[0, 7]" is (5, 11)!
09/15/2019 06:50:50 PM INFO Translated formula "[H^2 C]^[0, 3] * [H^2 F]^[0, 7]" to infinity DFA of size (7, 12)!
09/15/2019 06:50:50 PM DEBUG 

Start policy computation

09/15/2019 06:50:50 PM DEBUG [extend_ts] TS: (9, 33) ETS:(9, 33)
09/15/2019 06:50:50 PM DEBUG [extend_ts] TS: (9, 33) ETS:(9, 33)
09/15/2019 06:50:50 PM DEBUG [extend_ts] TS: (9, 33) ETS:(9, 33)
09/15/2019 06:50:50 PM INFO Constructing product automaton with infinity DFA!
09/15/2019 06:50:50 PM INFO Product automaton size is: (21, 72)
09/15/2019 06:50:50 PM DEBUG ('A', 1) -> [('B', 0), ('Base', 0), ('A', 2)]
09/15/2019 06:50:50 PM DEBUG ('Base2', 0) -> [('Base2', 0), ('F', 0), ('G', 0), ('D', 0)]
09/15/2019 06:50:50 PM DEBUG ('F', 0) -> [('Base2', 0), ('F', 0), ('G', 0), ('E', 0)]
09/15/2019 06:50:50 PM DEBUG ('B', 3) -> [('A', 3), ('C', 3), ('B', 3)]
09/15/2019 06:50:50 PM DEBUG ('G', 4) -> [('F', 3), ('Base2', 3), ('G', 5)]
09/15/2019 06:50:50 PM DEBUG ('B', 0) -> [('A', 1), ('C', 0), ('B', 0)]
09/15/2019 06:50:50 PM DEBUG ('G', 6) -> []
09/15/2019 06:50:50 PM DEBUG ('G', 0) -> [('Base2', 0), ('F', 0), ('G', 0)]
09/15/2019 06:50:50 PM DEBUG ('F', 3) -> [('G', 4), ('Base2', 3), ('E', 3), ('F', 3)]
09/15/2019 06:50:50 PM DEBUG ('E', 3) -> [('F', 3), ('Base', 3), ('E', 3), ('D', 3)]
09/15/2019 06:50:50 PM DEBUG ('C', 0) -> [('B', 0), ('C', 0), ('D', 0)]
09/15/2019 06:50:50 PM DEBUG ('C', 3) -> [('C', 3), ('B', 3), ('D', 3)]
09/15/2019 06:50:50 PM DEBUG ('Base', 3) -> [('A', 3), ('Base', 3), ('E', 3), ('D', 3)]
09/15/2019 06:50:50 PM DEBUG ('D', 0) -> [('Base', 0), ('C', 0), ('E', 0), ('D', 0), ('Base2', 0)]
09/15/2019 06:50:50 PM DEBUG ('Base', 0) -> [('A', 1), ('Base', 0), ('D', 0), ('E', 0)]
09/15/2019 06:50:50 PM DEBUG ('Base2', 3) -> [('G', 4), ('Base2', 3), ('F', 3), ('D', 3)]
09/15/2019 06:50:50 PM DEBUG ('A', 3) -> [('A', 3), ('B', 3), ('Base', 3)]
09/15/2019 06:50:50 PM DEBUG ('D', 3) -> [('Base2', 3), ('C', 3), ('Base', 3), ('E', 3), ('D', 3)]
09/15/2019 06:50:50 PM DEBUG ('A', 2) -> [('B', 0), ('Base', 0), ('A', 3)]
09/15/2019 06:50:50 PM DEBUG ('G', 5) -> [('F', 3), ('Base2', 3), ('G', 6)]
09/15/2019 06:50:50 PM DEBUG ('E', 0) -> [('Base', 0), ('F', 0), ('D', 0), ('E', 0)]
09/15/2019 06:50:50 PM INFO Constructing product automaton with infinity DFA!
09/15/2019 06:50:50 PM INFO Product automaton size is: (21, 72)
09/15/2019 06:50:50 PM DEBUG ('Base2', 0) -> [('Base2', 0), ('G', 1), ('F', 0), ('D', 0)]
09/15/2019 06:50:50 PM DEBUG ('A', 5) -> [('A', 6), ('B', 3), ('Base', 3)]
09/15/2019 06:50:50 PM DEBUG ('A', 0) -> [('B', 0), ('Base', 0), ('A', 0)]
09/15/2019 06:50:50 PM DEBUG ('F', 0) -> [('Base2', 0), ('G', 1), ('F', 0), ('E', 0)]
09/15/2019 06:50:50 PM DEBUG ('E', 3) -> [('F', 3), ('Base', 3), ('E', 3), ('D', 3)]
09/15/2019 06:50:50 PM DEBUG ('F', 3) -> [('G', 3), ('F', 3), ('Base2', 3), ('E', 3)]
09/15/2019 06:50:50 PM DEBUG ('B', 0) -> [('B', 0), ('C', 0), ('A', 0)]
09/15/2019 06:50:50 PM DEBUG ('G', 1) -> [('Base2', 0), ('G', 2), ('F', 0)]
09/15/2019 06:50:50 PM DEBUG ('A', 4) -> [('A', 5), ('B', 3), ('Base', 3)]
09/15/2019 06:50:50 PM DEBUG ('G', 3) -> [('G', 3), ('F', 3), ('Base2', 3)]
09/15/2019 06:50:50 PM DEBUG ('C', 0) -> [('B', 0), ('C', 0), ('D', 0)]
09/15/2019 06:50:50 PM DEBUG ('G', 2) -> [('G', 3), ('Base2', 0), ('F', 0)]
09/15/2019 06:50:50 PM DEBUG ('C', 3) -> [('C', 3), ('B', 3), ('D', 3)]
09/15/2019 06:50:50 PM DEBUG ('Base', 3) -> [('D', 3), ('Base', 3), ('E', 3), ('A', 4)]
09/15/2019 06:50:50 PM DEBUG ('D', 0) -> [('Base', 0), ('C', 0), ('E', 0), ('D', 0), ('Base2', 0)]
09/15/2019 06:50:50 PM DEBUG ('B', 3) -> [('C', 3), ('B', 3), ('A', 4)]
09/15/2019 06:50:50 PM DEBUG ('Base', 0) -> [('Base', 0), ('A', 0), ('D', 0), ('E', 0)]
09/15/2019 06:50:50 PM DEBUG ('Base2', 3) -> [('G', 3), ('F', 3), ('Base2', 3), ('D', 3)]
09/15/2019 06:50:50 PM DEBUG ('A', 6) -> []
09/15/2019 06:50:50 PM DEBUG ('D', 3) -> [('Base2', 3), ('C', 3), ('Base', 3), ('E', 3), ('D', 3)]
09/15/2019 06:50:50 PM DEBUG ('E', 0) -> [('Base', 0), ('F', 0), ('D', 0), ('E', 0)]
09/15/2019 06:50:50 PM INFO Constructing product automaton with infinity DFA!
09/15/2019 06:50:50 PM INFO Product automaton size is: (21, 73)
09/15/2019 06:50:50 PM DEBUG ('Base2', 0) -> [('Base2', 0), ('F', 0), ('G', 0), ('D', 0)]
09/15/2019 06:50:50 PM DEBUG ('A', 0) -> [('B', 0), ('Base', 0), ('A', 0)]
09/15/2019 06:50:50 PM DEBUG ('F', 0) -> [('Base2', 0), ('F', 0), ('G', 0), ('E', 0)]
09/15/2019 06:50:50 PM DEBUG ('B', 3) -> [('A', 3), ('C', 3), ('B', 3)]
09/15/2019 06:50:50 PM DEBUG ('B', 0) -> [('B', 0), ('A', 0), ('C', 1)]
09/15/2019 06:50:50 PM DEBUG ('F', 6) -> []
09/15/2019 06:50:50 PM DEBUG ('G', 0) -> [('Base2', 0), ('F', 0), ('G', 0)]
09/15/2019 06:50:50 PM DEBUG ('C', 1) -> [('B', 0), ('D', 0), ('C', 2)]
09/15/2019 06:50:50 PM DEBUG ('E', 3) -> [('F', 4), ('Base', 3), ('E', 3), ('D', 3)]
09/15/2019 06:50:50 PM DEBUG ('F', 4) -> [('G', 3), ('F', 5), ('Base2', 3), ('E', 3)]
09/15/2019 06:50:50 PM DEBUG ('F', 5) -> [('G', 3), ('F', 6), ('Base2', 3), ('E', 3)]
09/15/2019 06:50:50 PM DEBUG ('C', 3) -> [('C', 3), ('B', 3), ('D', 3)]
09/15/2019 06:50:50 PM DEBUG ('Base', 3) -> [('A', 3), ('Base', 3), ('E', 3), ('D', 3)]
09/15/2019 06:50:50 PM DEBUG ('D', 0) -> [('Base', 0), ('Base2', 0), ('D', 0), ('C', 1), ('E', 0)]
09/15/2019 06:50:50 PM DEBUG ('C', 2) -> [('B', 0), ('C', 3), ('D', 0)]
09/15/2019 06:50:50 PM DEBUG ('Base', 0) -> [('Base', 0), ('A', 0), ('D', 0), ('E', 0)]
09/15/2019 06:50:50 PM DEBUG ('Base2', 3) -> [('G', 3), ('F', 4), ('Base2', 3), ('D', 3)]
09/15/2019 06:50:50 PM DEBUG ('G', 3) -> [('G', 3), ('F', 4), ('Base2', 3)]
09/15/2019 06:50:50 PM DEBUG ('D', 3) -> [('Base2', 3), ('C', 3), ('Base', 3), ('E', 3), ('D', 3)]
09/15/2019 06:50:50 PM DEBUG ('A', 3) -> [('A', 3), ('B', 3), ('Base', 3)]
09/15/2019 06:50:50 PM DEBUG ('E', 0) -> [('Base', 0), ('F', 0), ('D', 0), ('E', 0)]
09/15/2019 06:50:50 PM DEBUG [PartialControl] init: set([0]), final: set([3]), constraint: None
09/15/2019 06:50:50 PM DEBUG [PartialControl] init: set([3]), final: set([6]), constraint: None
09/15/2019 06:50:50 PM DEBUG [Cat] accept || 2 >> : (('Base2', 0), ('D', 0), ('Base', 0), ('A', 1), ('A', 2), ('A', 3)) + || -1 >> : (('A', 3), ('Base', 3), ('E', 3), ('F', 3), ('G', 4), ('G', 5), ('G', 6)) ; max(2, -1)
09/15/2019 06:50:50 PM DEBUG [Cat] accept || 1 >> : (('E', 0), ('Base', 0), ('A', 1), ('A', 2), ('A', 3)) + || -1 >> : (('A', 3), ('Base', 3), ('E', 3), ('F', 3), ('G', 4), ('G', 5), ('G', 6)) ; max(1, -1)
09/15/2019 06:50:50 PM DEBUG [Cat] accept || 2 >> : (('F', 0), ('E', 0), ('Base', 0), ('A', 1), ('A', 2), ('A', 3)) + || -1 >> : (('A', 3), ('Base', 3), ('E', 3), ('F', 3), ('G', 4), ('G', 5), ('G', 6)) ; max(2, -1)
09/15/2019 06:50:50 PM DEBUG [Cat] accept || 0 >> : (('B', 0), ('A', 1), ('A', 2), ('A', 3)) + || -1 >> : (('A', 3), ('Base', 3), ('E', 3), ('F', 3), ('G', 4), ('G', 5), ('G', 6)) ; max(0, -1)
09/15/2019 06:50:50 PM DEBUG [Cat] accept || 3 >> : (('G', 0), ('Base2', 0), ('D', 0), ('Base', 0), ('A', 1), ('A', 2), ('A', 3)) + || -1 >> : (('A', 3), ('Base', 3), ('E', 3), ('F', 3), ('G', 4), ('G', 5), ('G', 6)) ; max(3, -1)
09/15/2019 06:50:50 PM DEBUG [Cat] accept || 1 >> : (('C', 0), ('B', 0), ('A', 1), ('A', 2), ('A', 3)) + || -1 >> : (('A', 3), ('Base', 3), ('E', 3), ('F', 3), ('G', 4), ('G', 5), ('G', 6)) ; max(1, -1)
09/15/2019 06:50:50 PM DEBUG [Cat] accept || 0 >> : (('Base', 0), ('A', 1), ('A', 2), ('A', 3)) + || -1 >> : (('A', 3), ('Base', 3), ('E', 3), ('F', 3), ('G', 4), ('G', 5), ('G', 6)) ; max(0, -1)
09/15/2019 06:50:50 PM DEBUG [Cat] accept || 1 >> : (('D', 0), ('Base', 0), ('A', 1), ('A', 2), ('A', 3)) + || -1 >> : (('A', 3), ('Base', 3), ('E', 3), ('F', 3), ('G', 4), ('G', 5), ('G', 6)) ; max(1, -1)
09/15/2019 06:50:50 PM DEBUG [PartialControl] init: set([0]), final: set([3]), constraint: None
09/15/2019 06:50:50 PM DEBUG [PartialControl] init: set([3]), final: set([6]), constraint: None
09/15/2019 06:50:50 PM DEBUG [Cat] accept || 3 >> : (('A', 0), ('Base', 0), ('D', 0), ('Base2', 0), ('G', 1), ('G', 2), ('G', 3)) + || -1 >> : (('G', 3), ('F', 3), ('E', 3), ('Base', 3), ('A', 4), ('A', 5), ('A', 6)) ; max(3, -1)
09/15/2019 06:50:50 PM DEBUG [Cat] accept || 0 >> : (('F', 0), ('G', 1), ('G', 2), ('G', 3)) + || -1 >> : (('G', 3), ('F', 3), ('E', 3), ('Base', 3), ('A', 4), ('A', 5), ('A', 6)) ; max(0, -1)
09/15/2019 06:50:50 PM DEBUG [Cat] accept || 1 >> : (('D', 0), ('Base2', 0), ('G', 1), ('G', 2), ('G', 3)) + || -1 >> : (('G', 3), ('F', 3), ('E', 3), ('Base', 3), ('A', 4), ('A', 5), ('A', 6)) ; max(1, -1)
09/15/2019 06:50:50 PM DEBUG [Cat] accept || 0 >> : (('Base2', 0), ('G', 1), ('G', 2), ('G', 3)) + || -1 >> : (('G', 3), ('F', 3), ('E', 3), ('Base', 3), ('A', 4), ('A', 5), ('A', 6)) ; max(0, -1)
09/15/2019 06:50:50 PM DEBUG [Cat] accept || 3 >> : (('B', 0), ('C', 0), ('D', 0), ('Base2', 0), ('G', 1), ('G', 2), ('G', 3)) + || -1 >> : (('G', 3), ('F', 3), ('E', 3), ('Base', 3), ('A', 4), ('A', 5), ('A', 6)) ; max(3, -1)
09/15/2019 06:50:50 PM DEBUG [Cat] accept || 1 >> : (('E', 0), ('F', 0), ('G', 1), ('G', 2), ('G', 3)) + || -1 >> : (('G', 3), ('F', 3), ('E', 3), ('Base', 3), ('A', 4), ('A', 5), ('A', 6)) ; max(1, -1)
09/15/2019 06:50:50 PM DEBUG [Cat] accept || 2 >> : (('C', 0), ('D', 0), ('Base2', 0), ('G', 1), ('G', 2), ('G', 3)) + || -1 >> : (('G', 3), ('F', 3), ('E', 3), ('Base', 3), ('A', 4), ('A', 5), ('A', 6)) ; max(2, -1)
09/15/2019 06:50:50 PM DEBUG [Cat] accept || 2 >> : (('Base', 0), ('D', 0), ('Base2', 0), ('G', 1), ('G', 2), ('G', 3)) + || -1 >> : (('G', 3), ('F', 3), ('E', 3), ('Base', 3), ('A', 4), ('A', 5), ('A', 6)) ; max(2, -1)
09/15/2019 06:50:50 PM DEBUG [PartialControl] init: set([0]), final: set([3]), constraint: None
09/15/2019 06:50:50 PM DEBUG [PartialControl] init: set([3]), final: set([6]), constraint: None
09/15/2019 06:50:50 PM DEBUG [Cat] accept || 1 >> : (('Base2', 0), ('D', 0), ('C', 1), ('C', 2), ('C', 3)) + || -2 >> : (('C', 3), ('D', 3), ('Base2', 3), ('F', 4), ('F', 5), ('F', 6)) ; max(1, -2)
09/15/2019 06:50:50 PM DEBUG [Cat] accept || 1 >> : (('E', 0), ('D', 0), ('C', 1), ('C', 2), ('C', 3)) + || -2 >> : (('C', 3), ('D', 3), ('Base2', 3), ('F', 4), ('F', 5), ('F', 6)) ; max(1, -2)
09/15/2019 06:50:50 PM DEBUG [Cat] accept || 1 >> : (('A', 0), ('B', 0), ('C', 1), ('C', 2), ('C', 3)) + || -2 >> : (('C', 3), ('D', 3), ('Base2', 3), ('F', 4), ('F', 5), ('F', 6)) ; max(1, -2)
09/15/2019 06:50:50 PM DEBUG [Cat] accept || 2 >> : (('F', 0), ('Base2', 0), ('D', 0), ('C', 1), ('C', 2), ('C', 3)) + || -2 >> : (('C', 3), ('D', 3), ('Base2', 3), ('F', 4), ('F', 5), ('F', 6)) ; max(2, -2)
09/15/2019 06:50:50 PM DEBUG [Cat] accept || 0 >> : (('B', 0), ('C', 1), ('C', 2), ('C', 3)) + || -2 >> : (('C', 3), ('D', 3), ('Base2', 3), ('F', 4), ('F', 5), ('F', 6)) ; max(0, -2)
09/15/2019 06:50:50 PM DEBUG [Cat] accept || 2 >> : (('G', 0), ('Base2', 0), ('D', 0), ('C', 1), ('C', 2), ('C', 3)) + || -2 >> : (('C', 3), ('D', 3), ('Base2', 3), ('F', 4), ('F', 5), ('F', 6)) ; max(2, -2)
09/15/2019 06:50:50 PM DEBUG [Cat] accept || 1 >> : (('Base', 0), ('D', 0), ('C', 1), ('C', 2), ('C', 3)) + || -2 >> : (('C', 3), ('D', 3), ('Base2', 3), ('F', 4), ('F', 5), ('F', 6)) ; max(1, -2)
09/15/2019 06:50:50 PM DEBUG [Cat] accept || 0 >> : (('D', 0), ('C', 1), ('C', 2), ('C', 3)) + || -2 >> : (('C', 3), ('D', 3), ('Base2', 3), ('F', 4), ('F', 5), ('F', 6)) ; max(0, -2)
09/15/2019 06:50:50 PM INFO Generated control policy is: F -> 1 -> Base2 -> 1 -> D -> 1 -> Base -> 1 -> A -> 1 -> A -> 1 -> A
09/15/2019 06:50:50 PM INFO Generated control policy is: Base2 -> 1 -> F -> 1 -> F -> 1 -> F
09/15/2019 06:50:50 PM INFO Max deadline: 0
09/15/2019 06:50:50 PM INFO Generated output word is: [(), ('A',), ('A',), ('A',), (), (), (), ('G',), ('G',), ('G',)]
09/15/2019 06:50:50 PM INFO Generated control policy is: Base -> 1 -> A -> 1 -> A -> 1 -> A -> 1 -> Base -> 1 -> E -> 1 -> F -> 1 -> G -> 1 -> G -> 1 -> G
09/15/2019 06:50:50 PM INFO Max deadline: 0
09/15/2019 06:50:50 PM INFO Generated output word is: [(), ('G',), ('G',), ('G',), (), (), (), ('A',), ('A',), ('A',)]
09/15/2019 06:50:50 PM INFO Generated control policy is: Base2 -> 1 -> G -> 1 -> G -> 1 -> G -> 1 -> F -> 1 -> E -> 1 -> Base -> 1 -> A -> 1 -> A -> 1 -> A
09/15/2019 06:50:50 PM INFO Max deadline: 0
09/15/2019 06:50:50 PM INFO Generated output word is: [(), ('C',), ('C',), ('C',), (), (), ('F',), ('F',), ('F',)]
09/15/2019 06:50:50 PM INFO Generated control policy is: B -> 1 -> C -> 1 -> C -> 1 -> C -> 1 -> D -> 1 -> Base2 -> 1 -> F -> 1 -> F -> 1 -> F
09/15/2019 06:54:51 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'G'])
09/15/2019 06:54:51 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 2 A )
09/15/2019 06:54:51 PM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['A', 'G'])
09/15/2019 06:54:51 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 G )
09/15/2019 06:54:51 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 A ) 0 3 ) DFA2: (Eventually (Hold 2 G ) 0 7 )
09/15/2019 06:54:51 PM DEBUG [spec] spec: [H^2 A]^[0, 3] * [H^2 G]^[0, 7]
09/15/2019 06:54:51 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 A ) 0 3 ) (Eventually (Hold 2 G ) 0 7 ) )
Directed: True
Multi: False
Props: {'A': 1, 'G': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (1, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (2, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (3, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (4, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (5, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'})]
		
09/15/2019 06:54:51 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/15/2019 06:54:51 PM DEBUG [spec] No of nodes: 7
09/15/2019 06:54:51 PM DEBUG [spec] No of edges: 12
09/15/2019 06:54:51 PM DEBUG alphabet: {'A': 1, 'G': 2}
09/15/2019 06:54:51 PM DEBUG (0, 0): {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:54:51 PM DEBUG (0, 1): {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}
09/15/2019 06:54:51 PM DEBUG (1, 0): {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:54:51 PM DEBUG (1, 2): {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}
09/15/2019 06:54:51 PM DEBUG (2, 0): {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:54:51 PM DEBUG (2, 3): {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}
09/15/2019 06:54:51 PM DEBUG (3, 3): {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:54:51 PM DEBUG (3, 4): {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}
09/15/2019 06:54:51 PM DEBUG (4, 3): {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:54:51 PM DEBUG (4, 5): {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}
09/15/2019 06:54:51 PM DEBUG (5, 3): {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:54:51 PM DEBUG (5, 6): {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}
09/15/2019 06:54:51 PM DEBUG 
End of translate


09/15/2019 06:54:51 PM INFO The bound of formula "[H^2 A]^[0, 3] * [H^2 G]^[0, 7]" is (5, 11)!
09/15/2019 06:54:51 PM INFO Translated formula "[H^2 A]^[0, 3] * [H^2 G]^[0, 7]" to infinity DFA of size (7, 12)!
09/15/2019 06:54:51 PM DEBUG [hold] Prop: G Duration: 2 Negation: False Props: set(['A', 'G'])
09/15/2019 06:54:51 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 2 G )
09/15/2019 06:54:51 PM DEBUG [hold] Prop: A Duration: 2 Negation: False Props: set(['A', 'G'])
09/15/2019 06:54:51 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 A )
09/15/2019 06:54:51 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 G ) 0 3 ) DFA2: (Eventually (Hold 2 A ) 0 7 )
09/15/2019 06:54:51 PM DEBUG [spec] spec: [H^2 G]^[0, 3] * [H^2 A]^[0, 7]
09/15/2019 06:54:51 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 G ) 0 3 ) (Eventually (Hold 2 A ) 0 7 ) )
Directed: True
Multi: False
Props: {'A': 1, 'G': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}), (5, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'})]
		
09/15/2019 06:54:51 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/15/2019 06:54:51 PM DEBUG [spec] No of nodes: 7
09/15/2019 06:54:51 PM DEBUG [spec] No of edges: 12
09/15/2019 06:54:51 PM DEBUG alphabet: {'A': 1, 'G': 2}
09/15/2019 06:54:51 PM DEBUG (0, 0): {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:54:51 PM DEBUG (0, 1): {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}
09/15/2019 06:54:51 PM DEBUG (1, 0): {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:54:51 PM DEBUG (1, 2): {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}
09/15/2019 06:54:51 PM DEBUG (2, 0): {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:54:51 PM DEBUG (2, 3): {'input': set([2, 3]), 'guard': u'G', 'weight': 0, 'label': u'G'}
09/15/2019 06:54:51 PM DEBUG (3, 3): {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:54:51 PM DEBUG (3, 4): {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}
09/15/2019 06:54:51 PM DEBUG (4, 3): {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:54:51 PM DEBUG (4, 5): {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}
09/15/2019 06:54:51 PM DEBUG (5, 3): {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:54:51 PM DEBUG (5, 6): {'input': set([1, 3]), 'guard': u'A', 'weight': 0, 'label': u'A'}
09/15/2019 06:54:51 PM DEBUG 
End of translate


09/15/2019 06:54:51 PM INFO The bound of formula "[H^2 G]^[0, 3] * [H^2 A]^[0, 7]" is (5, 11)!
09/15/2019 06:54:51 PM INFO Translated formula "[H^2 G]^[0, 3] * [H^2 A]^[0, 7]" to infinity DFA of size (7, 12)!
09/15/2019 06:54:51 PM DEBUG [hold] Prop: C Duration: 2 Negation: False Props: set(['C', 'F'])
09/15/2019 06:54:51 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 2 C )
09/15/2019 06:54:51 PM DEBUG [hold] Prop: F Duration: 2 Negation: False Props: set(['C', 'F'])
09/15/2019 06:54:51 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 F )
09/15/2019 06:54:51 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 C ) 0 3 ) DFA2: (Eventually (Hold 2 F ) 0 7 )
09/15/2019 06:54:51 PM DEBUG [spec] spec: [H^2 C]^[0, 3] * [H^2 F]^[0, 7]
09/15/2019 06:54:51 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 C ) 0 3 ) (Eventually (Hold 2 F ) 0 7 ) )
Directed: True
Multi: False
Props: {'C': 1, 'F': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3]), 'guard': u'C', 'weight': 0, 'label': u'C'}), (1, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'C', 'weight': 0, 'label': u'C'}), (2, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3]), 'guard': u'C', 'weight': 0, 'label': u'C'}), (3, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (4, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}), (5, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'})]
		
09/15/2019 06:54:51 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([6])

09/15/2019 06:54:51 PM DEBUG [spec] No of nodes: 7
09/15/2019 06:54:51 PM DEBUG [spec] No of edges: 12
09/15/2019 06:54:51 PM DEBUG alphabet: {'C': 1, 'F': 2}
09/15/2019 06:54:51 PM DEBUG (0, 0): {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:54:51 PM DEBUG (0, 1): {'input': set([1, 3]), 'guard': u'C', 'weight': 0, 'label': u'C'}
09/15/2019 06:54:51 PM DEBUG (1, 0): {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:54:51 PM DEBUG (1, 2): {'input': set([1, 3]), 'guard': u'C', 'weight': 0, 'label': u'C'}
09/15/2019 06:54:51 PM DEBUG (2, 0): {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:54:51 PM DEBUG (2, 3): {'input': set([1, 3]), 'guard': u'C', 'weight': 0, 'label': u'C'}
09/15/2019 06:54:51 PM DEBUG (3, 3): {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:54:51 PM DEBUG (3, 4): {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}
09/15/2019 06:54:51 PM DEBUG (4, 3): {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:54:51 PM DEBUG (4, 5): {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}
09/15/2019 06:54:51 PM DEBUG (5, 3): {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}
09/15/2019 06:54:51 PM DEBUG (5, 6): {'input': set([2, 3]), 'guard': u'F', 'weight': 0, 'label': u'F'}
09/15/2019 06:54:51 PM DEBUG 
End of translate


09/15/2019 06:54:51 PM INFO The bound of formula "[H^2 C]^[0, 3] * [H^2 F]^[0, 7]" is (5, 11)!
09/15/2019 06:54:51 PM INFO Translated formula "[H^2 C]^[0, 3] * [H^2 F]^[0, 7]" to infinity DFA of size (7, 12)!
09/15/2019 06:54:51 PM DEBUG 

Start policy computation

09/15/2019 06:54:51 PM DEBUG [extend_ts] TS: (9, 33) ETS:(9, 33)
09/15/2019 06:54:51 PM DEBUG [extend_ts] TS: (9, 33) ETS:(9, 33)
09/15/2019 06:54:51 PM DEBUG [extend_ts] TS: (9, 33) ETS:(9, 33)
09/15/2019 06:54:51 PM INFO Constructing product automaton with infinity DFA!
09/15/2019 06:54:51 PM INFO Product automaton size is: (21, 72)
09/15/2019 06:54:51 PM DEBUG ('A', 1) -> [('B', 0), ('Base', 0), ('A', 2)]
09/15/2019 06:54:51 PM DEBUG ('Base2', 0) -> [('Base2', 0), ('F', 0), ('G', 0), ('D', 0)]
09/15/2019 06:54:51 PM DEBUG ('F', 0) -> [('Base2', 0), ('F', 0), ('G', 0), ('E', 0)]
09/15/2019 06:54:51 PM DEBUG ('B', 3) -> [('A', 3), ('C', 3), ('B', 3)]
09/15/2019 06:54:51 PM DEBUG ('G', 4) -> [('F', 3), ('Base2', 3), ('G', 5)]
09/15/2019 06:54:51 PM DEBUG ('B', 0) -> [('A', 1), ('C', 0), ('B', 0)]
09/15/2019 06:54:51 PM DEBUG ('G', 6) -> []
09/15/2019 06:54:51 PM DEBUG ('G', 0) -> [('Base2', 0), ('F', 0), ('G', 0)]
09/15/2019 06:54:51 PM DEBUG ('F', 3) -> [('G', 4), ('Base2', 3), ('E', 3), ('F', 3)]
09/15/2019 06:54:51 PM DEBUG ('E', 3) -> [('F', 3), ('Base', 3), ('E', 3), ('D', 3)]
09/15/2019 06:54:51 PM DEBUG ('C', 0) -> [('B', 0), ('C', 0), ('D', 0)]
09/15/2019 06:54:51 PM DEBUG ('C', 3) -> [('C', 3), ('B', 3), ('D', 3)]
09/15/2019 06:54:51 PM DEBUG ('Base', 3) -> [('A', 3), ('Base', 3), ('E', 3), ('D', 3)]
09/15/2019 06:54:51 PM DEBUG ('D', 0) -> [('Base', 0), ('C', 0), ('E', 0), ('D', 0), ('Base2', 0)]
09/15/2019 06:54:51 PM DEBUG ('Base', 0) -> [('A', 1), ('Base', 0), ('D', 0), ('E', 0)]
09/15/2019 06:54:51 PM DEBUG ('Base2', 3) -> [('G', 4), ('Base2', 3), ('F', 3), ('D', 3)]
09/15/2019 06:54:51 PM DEBUG ('A', 3) -> [('A', 3), ('B', 3), ('Base', 3)]
09/15/2019 06:54:51 PM DEBUG ('D', 3) -> [('Base2', 3), ('C', 3), ('Base', 3), ('E', 3), ('D', 3)]
09/15/2019 06:54:51 PM DEBUG ('A', 2) -> [('B', 0), ('Base', 0), ('A', 3)]
09/15/2019 06:54:51 PM DEBUG ('G', 5) -> [('F', 3), ('Base2', 3), ('G', 6)]
09/15/2019 06:54:51 PM DEBUG ('E', 0) -> [('Base', 0), ('F', 0), ('D', 0), ('E', 0)]
09/15/2019 06:54:51 PM INFO Constructing product automaton with infinity DFA!
09/15/2019 06:54:51 PM INFO Product automaton size is: (21, 72)
09/15/2019 06:54:51 PM DEBUG ('Base2', 0) -> [('Base2', 0), ('G', 1), ('F', 0), ('D', 0)]
09/15/2019 06:54:51 PM DEBUG ('A', 5) -> [('A', 6), ('B', 3), ('Base', 3)]
09/15/2019 06:54:51 PM DEBUG ('A', 0) -> [('B', 0), ('Base', 0), ('A', 0)]
09/15/2019 06:54:51 PM DEBUG ('F', 0) -> [('Base2', 0), ('G', 1), ('F', 0), ('E', 0)]
09/15/2019 06:54:51 PM DEBUG ('E', 3) -> [('F', 3), ('Base', 3), ('E', 3), ('D', 3)]
09/15/2019 06:54:51 PM DEBUG ('F', 3) -> [('G', 3), ('F', 3), ('Base2', 3), ('E', 3)]
09/15/2019 06:54:51 PM DEBUG ('B', 0) -> [('B', 0), ('C', 0), ('A', 0)]
09/15/2019 06:54:51 PM DEBUG ('G', 1) -> [('Base2', 0), ('G', 2), ('F', 0)]
09/15/2019 06:54:51 PM DEBUG ('A', 4) -> [('A', 5), ('B', 3), ('Base', 3)]
09/15/2019 06:54:51 PM DEBUG ('G', 3) -> [('G', 3), ('F', 3), ('Base2', 3)]
09/15/2019 06:54:51 PM DEBUG ('C', 0) -> [('B', 0), ('C', 0), ('D', 0)]
09/15/2019 06:54:51 PM DEBUG ('G', 2) -> [('G', 3), ('Base2', 0), ('F', 0)]
09/15/2019 06:54:51 PM DEBUG ('C', 3) -> [('C', 3), ('B', 3), ('D', 3)]
09/15/2019 06:54:51 PM DEBUG ('Base', 3) -> [('D', 3), ('Base', 3), ('E', 3), ('A', 4)]
09/15/2019 06:54:51 PM DEBUG ('D', 0) -> [('Base', 0), ('C', 0), ('E', 0), ('D', 0), ('Base2', 0)]
09/15/2019 06:54:51 PM DEBUG ('B', 3) -> [('C', 3), ('B', 3), ('A', 4)]
09/15/2019 06:54:51 PM DEBUG ('Base', 0) -> [('Base', 0), ('A', 0), ('D', 0), ('E', 0)]
09/15/2019 06:54:51 PM DEBUG ('Base2', 3) -> [('G', 3), ('F', 3), ('Base2', 3), ('D', 3)]
09/15/2019 06:54:51 PM DEBUG ('A', 6) -> []
09/15/2019 06:54:51 PM DEBUG ('D', 3) -> [('Base2', 3), ('C', 3), ('Base', 3), ('E', 3), ('D', 3)]
09/15/2019 06:54:51 PM DEBUG ('E', 0) -> [('Base', 0), ('F', 0), ('D', 0), ('E', 0)]
09/15/2019 06:54:51 PM INFO Constructing product automaton with infinity DFA!
09/15/2019 06:54:51 PM INFO Product automaton size is: (21, 73)
09/15/2019 06:54:51 PM DEBUG ('Base2', 0) -> [('Base2', 0), ('F', 0), ('G', 0), ('D', 0)]
09/15/2019 06:54:51 PM DEBUG ('A', 0) -> [('B', 0), ('Base', 0), ('A', 0)]
09/15/2019 06:54:51 PM DEBUG ('F', 0) -> [('Base2', 0), ('F', 0), ('G', 0), ('E', 0)]
09/15/2019 06:54:51 PM DEBUG ('B', 3) -> [('A', 3), ('C', 3), ('B', 3)]
09/15/2019 06:54:51 PM DEBUG ('B', 0) -> [('B', 0), ('A', 0), ('C', 1)]
09/15/2019 06:54:51 PM DEBUG ('F', 6) -> []
09/15/2019 06:54:51 PM DEBUG ('G', 0) -> [('Base2', 0), ('F', 0), ('G', 0)]
09/15/2019 06:54:51 PM DEBUG ('C', 1) -> [('B', 0), ('D', 0), ('C', 2)]
09/15/2019 06:54:51 PM DEBUG ('E', 3) -> [('F', 4), ('Base', 3), ('E', 3), ('D', 3)]
09/15/2019 06:54:51 PM DEBUG ('F', 4) -> [('G', 3), ('F', 5), ('Base2', 3), ('E', 3)]
09/15/2019 06:54:51 PM DEBUG ('F', 5) -> [('G', 3), ('F', 6), ('Base2', 3), ('E', 3)]
09/15/2019 06:54:51 PM DEBUG ('C', 3) -> [('C', 3), ('B', 3), ('D', 3)]
09/15/2019 06:54:51 PM DEBUG ('Base', 3) -> [('A', 3), ('Base', 3), ('E', 3), ('D', 3)]
09/15/2019 06:54:51 PM DEBUG ('D', 0) -> [('Base', 0), ('Base2', 0), ('D', 0), ('C', 1), ('E', 0)]
09/15/2019 06:54:51 PM DEBUG ('C', 2) -> [('B', 0), ('C', 3), ('D', 0)]
09/15/2019 06:54:51 PM DEBUG ('Base', 0) -> [('Base', 0), ('A', 0), ('D', 0), ('E', 0)]
09/15/2019 06:54:51 PM DEBUG ('Base2', 3) -> [('G', 3), ('F', 4), ('Base2', 3), ('D', 3)]
09/15/2019 06:54:51 PM DEBUG ('G', 3) -> [('G', 3), ('F', 4), ('Base2', 3)]
09/15/2019 06:54:51 PM DEBUG ('D', 3) -> [('Base2', 3), ('C', 3), ('Base', 3), ('E', 3), ('D', 3)]
09/15/2019 06:54:51 PM DEBUG ('A', 3) -> [('A', 3), ('B', 3), ('Base', 3)]
09/15/2019 06:54:51 PM DEBUG ('E', 0) -> [('Base', 0), ('F', 0), ('D', 0), ('E', 0)]
09/15/2019 06:54:51 PM DEBUG [PartialControl] init: set([0]), final: set([3]), constraint: None
09/15/2019 06:54:51 PM DEBUG [PartialControl] init: set([3]), final: set([6]), constraint: None
09/15/2019 06:54:51 PM DEBUG [Cat] accept || 2 >> : (('Base2', 0), ('D', 0), ('Base', 0), ('A', 1), ('A', 2), ('A', 3)) + || -1 >> : (('A', 3), ('Base', 3), ('E', 3), ('F', 3), ('G', 4), ('G', 5), ('G', 6)) ; max(2, -1)
09/15/2019 06:54:51 PM DEBUG [Cat] accept || 1 >> : (('E', 0), ('Base', 0), ('A', 1), ('A', 2), ('A', 3)) + || -1 >> : (('A', 3), ('Base', 3), ('E', 3), ('F', 3), ('G', 4), ('G', 5), ('G', 6)) ; max(1, -1)
09/15/2019 06:54:51 PM DEBUG [Cat] accept || 2 >> : (('F', 0), ('E', 0), ('Base', 0), ('A', 1), ('A', 2), ('A', 3)) + || -1 >> : (('A', 3), ('Base', 3), ('E', 3), ('F', 3), ('G', 4), ('G', 5), ('G', 6)) ; max(2, -1)
09/15/2019 06:54:51 PM DEBUG [Cat] accept || 0 >> : (('B', 0), ('A', 1), ('A', 2), ('A', 3)) + || -1 >> : (('A', 3), ('Base', 3), ('E', 3), ('F', 3), ('G', 4), ('G', 5), ('G', 6)) ; max(0, -1)
09/15/2019 06:54:51 PM DEBUG [Cat] accept || 3 >> : (('G', 0), ('Base2', 0), ('D', 0), ('Base', 0), ('A', 1), ('A', 2), ('A', 3)) + || -1 >> : (('A', 3), ('Base', 3), ('E', 3), ('F', 3), ('G', 4), ('G', 5), ('G', 6)) ; max(3, -1)
09/15/2019 06:54:51 PM DEBUG [Cat] accept || 1 >> : (('C', 0), ('B', 0), ('A', 1), ('A', 2), ('A', 3)) + || -1 >> : (('A', 3), ('Base', 3), ('E', 3), ('F', 3), ('G', 4), ('G', 5), ('G', 6)) ; max(1, -1)
09/15/2019 06:54:51 PM DEBUG [Cat] accept || 0 >> : (('Base', 0), ('A', 1), ('A', 2), ('A', 3)) + || -1 >> : (('A', 3), ('Base', 3), ('E', 3), ('F', 3), ('G', 4), ('G', 5), ('G', 6)) ; max(0, -1)
09/15/2019 06:54:51 PM DEBUG [Cat] accept || 1 >> : (('D', 0), ('Base', 0), ('A', 1), ('A', 2), ('A', 3)) + || -1 >> : (('A', 3), ('Base', 3), ('E', 3), ('F', 3), ('G', 4), ('G', 5), ('G', 6)) ; max(1, -1)
09/15/2019 06:54:51 PM DEBUG [PartialControl] init: set([0]), final: set([3]), constraint: None
09/15/2019 06:54:51 PM DEBUG [PartialControl] init: set([3]), final: set([6]), constraint: None
09/15/2019 06:54:51 PM DEBUG [Cat] accept || 3 >> : (('A', 0), ('Base', 0), ('D', 0), ('Base2', 0), ('G', 1), ('G', 2), ('G', 3)) + || -1 >> : (('G', 3), ('F', 3), ('E', 3), ('Base', 3), ('A', 4), ('A', 5), ('A', 6)) ; max(3, -1)
09/15/2019 06:54:51 PM DEBUG [Cat] accept || 0 >> : (('F', 0), ('G', 1), ('G', 2), ('G', 3)) + || -1 >> : (('G', 3), ('F', 3), ('E', 3), ('Base', 3), ('A', 4), ('A', 5), ('A', 6)) ; max(0, -1)
09/15/2019 06:54:51 PM DEBUG [Cat] accept || 1 >> : (('D', 0), ('Base2', 0), ('G', 1), ('G', 2), ('G', 3)) + || -1 >> : (('G', 3), ('F', 3), ('E', 3), ('Base', 3), ('A', 4), ('A', 5), ('A', 6)) ; max(1, -1)
09/15/2019 06:54:51 PM DEBUG [Cat] accept || 0 >> : (('Base2', 0), ('G', 1), ('G', 2), ('G', 3)) + || -1 >> : (('G', 3), ('F', 3), ('E', 3), ('Base', 3), ('A', 4), ('A', 5), ('A', 6)) ; max(0, -1)
09/15/2019 06:54:51 PM DEBUG [Cat] accept || 3 >> : (('B', 0), ('C', 0), ('D', 0), ('Base2', 0), ('G', 1), ('G', 2), ('G', 3)) + || -1 >> : (('G', 3), ('F', 3), ('E', 3), ('Base', 3), ('A', 4), ('A', 5), ('A', 6)) ; max(3, -1)
09/15/2019 06:54:51 PM DEBUG [Cat] accept || 1 >> : (('E', 0), ('F', 0), ('G', 1), ('G', 2), ('G', 3)) + || -1 >> : (('G', 3), ('F', 3), ('E', 3), ('Base', 3), ('A', 4), ('A', 5), ('A', 6)) ; max(1, -1)
09/15/2019 06:54:51 PM DEBUG [Cat] accept || 2 >> : (('C', 0), ('D', 0), ('Base2', 0), ('G', 1), ('G', 2), ('G', 3)) + || -1 >> : (('G', 3), ('F', 3), ('E', 3), ('Base', 3), ('A', 4), ('A', 5), ('A', 6)) ; max(2, -1)
09/15/2019 06:54:51 PM DEBUG [Cat] accept || 2 >> : (('Base', 0), ('D', 0), ('Base2', 0), ('G', 1), ('G', 2), ('G', 3)) + || -1 >> : (('G', 3), ('F', 3), ('E', 3), ('Base', 3), ('A', 4), ('A', 5), ('A', 6)) ; max(2, -1)
09/15/2019 06:54:51 PM DEBUG [PartialControl] init: set([0]), final: set([3]), constraint: None
09/15/2019 06:54:51 PM DEBUG [PartialControl] init: set([3]), final: set([6]), constraint: None
09/15/2019 06:54:51 PM DEBUG [Cat] accept || 1 >> : (('Base2', 0), ('D', 0), ('C', 1), ('C', 2), ('C', 3)) + || -2 >> : (('C', 3), ('D', 3), ('Base2', 3), ('F', 4), ('F', 5), ('F', 6)) ; max(1, -2)
09/15/2019 06:54:51 PM DEBUG [Cat] accept || 1 >> : (('E', 0), ('D', 0), ('C', 1), ('C', 2), ('C', 3)) + || -2 >> : (('C', 3), ('D', 3), ('Base2', 3), ('F', 4), ('F', 5), ('F', 6)) ; max(1, -2)
09/15/2019 06:54:51 PM DEBUG [Cat] accept || 1 >> : (('A', 0), ('B', 0), ('C', 1), ('C', 2), ('C', 3)) + || -2 >> : (('C', 3), ('D', 3), ('Base2', 3), ('F', 4), ('F', 5), ('F', 6)) ; max(1, -2)
09/15/2019 06:54:51 PM DEBUG [Cat] accept || 2 >> : (('F', 0), ('Base2', 0), ('D', 0), ('C', 1), ('C', 2), ('C', 3)) + || -2 >> : (('C', 3), ('D', 3), ('Base2', 3), ('F', 4), ('F', 5), ('F', 6)) ; max(2, -2)
09/15/2019 06:54:51 PM DEBUG [Cat] accept || 0 >> : (('B', 0), ('C', 1), ('C', 2), ('C', 3)) + || -2 >> : (('C', 3), ('D', 3), ('Base2', 3), ('F', 4), ('F', 5), ('F', 6)) ; max(0, -2)
09/15/2019 06:54:51 PM DEBUG [Cat] accept || 2 >> : (('G', 0), ('Base2', 0), ('D', 0), ('C', 1), ('C', 2), ('C', 3)) + || -2 >> : (('C', 3), ('D', 3), ('Base2', 3), ('F', 4), ('F', 5), ('F', 6)) ; max(2, -2)
09/15/2019 06:54:51 PM DEBUG [Cat] accept || 1 >> : (('Base', 0), ('D', 0), ('C', 1), ('C', 2), ('C', 3)) + || -2 >> : (('C', 3), ('D', 3), ('Base2', 3), ('F', 4), ('F', 5), ('F', 6)) ; max(1, -2)
09/15/2019 06:54:51 PM DEBUG [Cat] accept || 0 >> : (('D', 0), ('C', 1), ('C', 2), ('C', 3)) + || -2 >> : (('C', 3), ('D', 3), ('Base2', 3), ('F', 4), ('F', 5), ('F', 6)) ; max(0, -2)
09/15/2019 06:54:51 PM INFO Generated control policy is: F -> 1 -> Base2 -> 1 -> D -> 1 -> Base -> 1 -> A -> 1 -> A -> 1 -> A
09/15/2019 06:54:51 PM INFO Generated control policy is: Base2 -> 1 -> F -> 1 -> F -> 1 -> F
09/15/2019 06:54:51 PM INFO Max deadline: 0
09/15/2019 06:54:51 PM INFO Generated output word is: [(), ('A',), ('A',), ('A',), (), (), (), ('G',), ('G',), ('G',)]
09/15/2019 06:54:51 PM INFO Generated control policy is: Base -> 1 -> A -> 1 -> A -> 1 -> A -> 1 -> Base -> 1 -> E -> 1 -> F -> 1 -> G -> 1 -> G -> 1 -> G
09/15/2019 06:54:51 PM INFO Max deadline: 0
09/15/2019 06:54:51 PM INFO Generated output word is: [(), ('G',), ('G',), ('G',), (), (), (), ('A',), ('A',), ('A',)]
09/15/2019 06:54:51 PM INFO Generated control policy is: Base2 -> 1 -> G -> 1 -> G -> 1 -> G -> 1 -> F -> 1 -> E -> 1 -> Base -> 1 -> A -> 1 -> A -> 1 -> A
09/15/2019 06:54:51 PM INFO Max deadline: 0
09/15/2019 06:54:51 PM INFO Generated output word is: [(), ('C',), ('C',), ('C',), (), (), ('F',), ('F',), ('F',)]
09/15/2019 06:54:51 PM INFO Generated control policy is: B -> 1 -> C -> 1 -> C -> 1 -> C -> 1 -> D -> 1 -> Base2 -> 1 -> F -> 1 -> F -> 1 -> F

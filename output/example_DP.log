04/24/2020 05:30:27 PM DEBUG [hold] Prop: r29 Duration: 1 Negation: False Props: set(['Base1', 'r105', 'r29'])
04/24/2020 05:30:27 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r29 )
04/24/2020 05:30:27 PM DEBUG [hold] Prop: r105 Duration: 1 Negation: False Props: set(['Base1', 'r105', 'r29'])
04/24/2020 05:30:27 PM DEBUG [eventually] Low: 0 High: 4 DFA: (Hold 1 r105 )
04/24/2020 05:30:27 PM DEBUG [concatenation] DFA1: (Eventually (Hold 1 r29 ) 0 5 ) DFA2: (Eventually (Hold 1 r105 ) 0 4 )
04/24/2020 05:30:27 PM DEBUG [hold] Prop: Base1 Duration: 0 Negation: False Props: set(['Base1', 'r105', 'r29'])
04/24/2020 05:30:27 PM DEBUG [eventually] Low: 0 High: 4 DFA: (Hold 0 Base1 )
04/24/2020 05:30:27 PM DEBUG [concatenation] DFA1: (Concat (Eventually (Hold 1 r29 ) 0 5 ) (Eventually (Hold 1 r105 ) 0 4 ) ) DFA2: (Eventually (Hold 0 Base1 ) 0 4 )
04/24/2020 05:30:27 PM DEBUG [spec] spec: [H^1 r29]^[0, 5] * [H^1 r105]^[0, 4] * [H^0 Base1]^[0, 4]
04/24/2020 05:30:27 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Concat (Eventually (Hold 1 r29 ) 0 5 ) (Eventually (Hold 1 r105 ) 0 4 ) ) (Eventually (Hold 0 Base1 ) 0 4 ) )
Directed: True
Multi: False
Props: {'Base1': 1, 'r105': 2, 'r29': 4}
Alphabet: set([0, 1, 2, 3, 4, 5, 6, 7]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1, 2, 3]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([4, 5, 6, 7]), 'guard': u'r29', 'weight': 0, 'label': u'r29'}), (1, 0, {'input': set([0, 1, 2, 3]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([4, 5, 6, 7]), 'guard': u'r29', 'weight': 0, 'label': u'r29'}), (2, 2, {'input': set([0, 1, 4, 5]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3, 6, 7]), 'guard': u'r105', 'weight': 0, 'label': u'r105'}), (3, 2, {'input': set([0, 1, 4, 5]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([2, 3, 6, 7]), 'guard': u'r105', 'weight': 0, 'label': u'r105'}), (4, 4, {'input': set([0, 2, 4, 6]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3, 5, 7]), 'guard': u'Base1', 'weight': 0, 'label': u'Base1'})]
		
04/24/2020 05:30:27 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Concatenation Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([4])
   Left:
     Op: Eventually Flags[WDF, WWF, UNR]: True True False
     Init: set([0])
     Final: set([2])
     Left:
       Op: Hold Flags[WDF, WWF, UNR]: True True True
       Init: set([0])
       Final: set([2])
   Right:
     Op: Eventually Flags[WDF, WWF, UNR]: True True False
     Init: set([2])
     Final: set([4])
     Left:
       Op: Hold Flags[WDF, WWF, UNR]: True True True
       Init: set([2])
       Final: set([4])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([4])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([4])
     Final: set([5])

04/24/2020 05:30:27 PM DEBUG [spec] No of nodes: 6
04/24/2020 05:30:27 PM DEBUG [spec] No of edges: 10
04/24/2020 05:30:27 PM DEBUG 
End of translate


04/24/2020 05:30:27 PM INFO The bound of formula "[H^1 r29]^[0, 5] * [H^1 r105]^[0, 4] * [H^0 Base1]^[0, 4]" is (4, 15)!
04/24/2020 05:30:27 PM INFO Translated formula "[H^1 r29]^[0, 5] * [H^1 r105]^[0, 4] * [H^0 Base1]^[0, 4]" to infinity DFA of size (6, 10)!
04/24/2020 05:30:27 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['Base2', 'r21', 'r55'])
04/24/2020 05:30:27 PM DEBUG [eventually] Low: 0 High: 4 DFA: (Hold 2 r21 )
04/24/2020 05:30:27 PM DEBUG [hold] Prop: r55 Duration: 1 Negation: False Props: set(['Base2', 'r21', 'r55'])
04/24/2020 05:30:27 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 r55 )
04/24/2020 05:30:27 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 4 ) DFA2: (Eventually (Hold 1 r55 ) 0 3 )
04/24/2020 05:30:27 PM DEBUG [hold] Prop: Base2 Duration: 0 Negation: False Props: set(['Base2', 'r21', 'r55'])
04/24/2020 05:30:27 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 0 Base2 )
04/24/2020 05:30:27 PM DEBUG [concatenation] DFA1: (Concat (Eventually (Hold 2 r21 ) 0 4 ) (Eventually (Hold 1 r55 ) 0 3 ) ) DFA2: (Eventually (Hold 0 Base2 ) 0 3 )
04/24/2020 05:30:27 PM DEBUG [spec] spec: [H^2 r21]^[0, 4] * [H^1 r55]^[0, 3] * [H^0 Base2]^[0, 3]
04/24/2020 05:30:27 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Concat (Eventually (Hold 2 r21 ) 0 4 ) (Eventually (Hold 1 r55 ) 0 3 ) ) (Eventually (Hold 0 Base2 ) 0 3 ) )
Directed: True
Multi: False
Props: {'Base2': 1, 'r21': 2, 'r55': 4}
Alphabet: set([0, 1, 2, 3, 4, 5, 6, 7]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1, 4, 5]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3, 6, 7]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1, 4, 5]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3, 6, 7]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1, 4, 5]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3, 6, 7]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 1, 2, 3]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([4, 5, 6, 7]), 'guard': u'r55', 'weight': 0, 'label': u'r55'}), (4, 3, {'input': set([0, 1, 2, 3]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([4, 5, 6, 7]), 'guard': u'r55', 'weight': 0, 'label': u'r55'}), (5, 5, {'input': set([0, 2, 4, 6]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3, 5, 7]), 'guard': u'Base2', 'weight': 0, 'label': u'Base2'})]
		
04/24/2020 05:30:27 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Concatenation Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([5])
   Left:
     Op: Eventually Flags[WDF, WWF, UNR]: True True False
     Init: set([0])
     Final: set([3])
     Left:
       Op: Hold Flags[WDF, WWF, UNR]: True True True
       Init: set([0])
       Final: set([3])
   Right:
     Op: Eventually Flags[WDF, WWF, UNR]: True True False
     Init: set([3])
     Final: set([5])
     Left:
       Op: Hold Flags[WDF, WWF, UNR]: True True True
       Init: set([3])
       Final: set([5])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([5])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([5])
     Final: set([6])

04/24/2020 05:30:27 PM DEBUG [spec] No of nodes: 7
04/24/2020 05:30:27 PM DEBUG [spec] No of edges: 12
04/24/2020 05:30:27 PM DEBUG 
End of translate


04/24/2020 05:30:27 PM INFO The bound of formula "[H^2 r21]^[0, 4] * [H^1 r55]^[0, 3] * [H^0 Base2]^[0, 3]" is (5, 12)!
04/24/2020 05:30:27 PM INFO Translated formula "[H^2 r21]^[0, 4] * [H^1 r55]^[0, 3] * [H^0 Base2]^[0, 3]" to infinity DFA of size (7, 12)!
04/24/2020 05:30:27 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['Base3', 'r21', 'r55'])
04/24/2020 05:30:27 PM DEBUG [eventually] Low: 0 High: 4 DFA: (Hold 2 r21 )
04/24/2020 05:30:27 PM DEBUG [hold] Prop: r55 Duration: 1 Negation: False Props: set(['Base3', 'r21', 'r55'])
04/24/2020 05:30:27 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 r55 )
04/24/2020 05:30:27 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 4 ) DFA2: (Eventually (Hold 1 r55 ) 0 3 )
04/24/2020 05:30:27 PM DEBUG [hold] Prop: Base3 Duration: 0 Negation: False Props: set(['Base3', 'r21', 'r55'])
04/24/2020 05:30:27 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 0 Base3 )
04/24/2020 05:30:27 PM DEBUG [concatenation] DFA1: (Concat (Eventually (Hold 2 r21 ) 0 4 ) (Eventually (Hold 1 r55 ) 0 3 ) ) DFA2: (Eventually (Hold 0 Base3 ) 0 3 )
04/24/2020 05:30:27 PM DEBUG [spec] spec: [H^2 r21]^[0, 4] * [H^1 r55]^[0, 3] * [H^0 Base3]^[0, 3]
04/24/2020 05:30:27 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Concat (Eventually (Hold 2 r21 ) 0 4 ) (Eventually (Hold 1 r55 ) 0 3 ) ) (Eventually (Hold 0 Base3 ) 0 3 ) )
Directed: True
Multi: False
Props: {'Base3': 1, 'r21': 2, 'r55': 4}
Alphabet: set([0, 1, 2, 3, 4, 5, 6, 7]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1, 4, 5]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3, 6, 7]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1, 4, 5]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3, 6, 7]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1, 4, 5]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3, 6, 7]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 1, 2, 3]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([4, 5, 6, 7]), 'guard': u'r55', 'weight': 0, 'label': u'r55'}), (4, 3, {'input': set([0, 1, 2, 3]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([4, 5, 6, 7]), 'guard': u'r55', 'weight': 0, 'label': u'r55'}), (5, 5, {'input': set([0, 2, 4, 6]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([1, 3, 5, 7]), 'guard': u'Base3', 'weight': 0, 'label': u'Base3'})]
		
04/24/2020 05:30:27 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Concatenation Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([5])
   Left:
     Op: Eventually Flags[WDF, WWF, UNR]: True True False
     Init: set([0])
     Final: set([3])
     Left:
       Op: Hold Flags[WDF, WWF, UNR]: True True True
       Init: set([0])
       Final: set([3])
   Right:
     Op: Eventually Flags[WDF, WWF, UNR]: True True False
     Init: set([3])
     Final: set([5])
     Left:
       Op: Hold Flags[WDF, WWF, UNR]: True True True
       Init: set([3])
       Final: set([5])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([5])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([5])
     Final: set([6])

04/24/2020 05:30:27 PM DEBUG [spec] No of nodes: 7
04/24/2020 05:30:27 PM DEBUG [spec] No of edges: 12
04/24/2020 05:30:27 PM DEBUG 
End of translate


04/24/2020 05:30:27 PM INFO The bound of formula "[H^2 r21]^[0, 4] * [H^1 r55]^[0, 3] * [H^0 Base3]^[0, 3]" is (5, 12)!
04/24/2020 05:30:27 PM INFO Translated formula "[H^2 r21]^[0, 4] * [H^1 r55]^[0, 3] * [H^0 Base3]^[0, 3]" to infinity DFA of size (7, 12)!
04/24/2020 05:30:27 PM DEBUG [hold] Prop: r9 Duration: 1 Negation: False Props: set(['Base4', 'r12', 'r9'])
04/24/2020 05:30:27 PM DEBUG [eventually] Low: 0 High: 4 DFA: (Hold 1 r9 )
04/24/2020 05:30:27 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['Base4', 'r12', 'r9'])
04/24/2020 05:30:27 PM DEBUG [eventually] Low: 0 High: 4 DFA: (Hold 1 r12 )
04/24/2020 05:30:27 PM DEBUG [concatenation] DFA1: (Eventually (Hold 1 r9 ) 0 4 ) DFA2: (Eventually (Hold 1 r12 ) 0 4 )
04/24/2020 05:30:27 PM DEBUG [hold] Prop: Base4 Duration: 0 Negation: False Props: set(['Base4', 'r12', 'r9'])
04/24/2020 05:30:27 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 0 Base4 )
04/24/2020 05:30:27 PM DEBUG [concatenation] DFA1: (Concat (Eventually (Hold 1 r9 ) 0 4 ) (Eventually (Hold 1 r12 ) 0 4 ) ) DFA2: (Eventually (Hold 0 Base4 ) 0 3 )
04/24/2020 05:30:27 PM DEBUG [spec] spec: [H^1 r9]^[0, 4] * [H^1 r12]^[0, 4] * [H^0 Base4]^[0, 3]
04/24/2020 05:30:27 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Concat (Eventually (Hold 1 r9 ) 0 4 ) (Eventually (Hold 1 r12 ) 0 4 ) ) (Eventually (Hold 0 Base4 ) 0 3 ) )
Directed: True
Multi: False
Props: {'Base4': 1, 'r12': 2, 'r9': 4}
Alphabet: set([0, 1, 2, 3, 4, 5, 6, 7]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1, 2, 3]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([4, 5, 6, 7]), 'guard': u'r9', 'weight': 0, 'label': u'r9'}), (1, 0, {'input': set([0, 1, 2, 3]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([4, 5, 6, 7]), 'guard': u'r9', 'weight': 0, 'label': u'r9'}), (2, 2, {'input': set([0, 1, 4, 5]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3, 6, 7]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (3, 2, {'input': set([0, 1, 4, 5]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([2, 3, 6, 7]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 4, {'input': set([0, 2, 4, 6]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3, 5, 7]), 'guard': u'Base4', 'weight': 0, 'label': u'Base4'})]
		
04/24/2020 05:30:27 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Concatenation Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([4])
   Left:
     Op: Eventually Flags[WDF, WWF, UNR]: True True False
     Init: set([0])
     Final: set([2])
     Left:
       Op: Hold Flags[WDF, WWF, UNR]: True True True
       Init: set([0])
       Final: set([2])
   Right:
     Op: Eventually Flags[WDF, WWF, UNR]: True True False
     Init: set([2])
     Final: set([4])
     Left:
       Op: Hold Flags[WDF, WWF, UNR]: True True True
       Init: set([2])
       Final: set([4])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([4])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([4])
     Final: set([5])

04/24/2020 05:30:27 PM DEBUG [spec] No of nodes: 6
04/24/2020 05:30:27 PM DEBUG [spec] No of edges: 10
04/24/2020 05:30:27 PM DEBUG 
End of translate


04/24/2020 05:30:27 PM INFO The bound of formula "[H^1 r9]^[0, 4] * [H^1 r12]^[0, 4] * [H^0 Base4]^[0, 3]" is (4, 13)!
04/24/2020 05:30:27 PM INFO Translated formula "[H^1 r9]^[0, 4] * [H^1 r12]^[0, 4] * [H^0 Base4]^[0, 3]" to infinity DFA of size (6, 10)!
04/24/2020 05:30:27 PM DEBUG [hold] Prop: r9 Duration: 1 Negation: False Props: set(['r12', 'r9', 'Base5'])
04/24/2020 05:30:27 PM DEBUG [eventually] Low: 0 High: 4 DFA: (Hold 1 r9 )
04/24/2020 05:30:27 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r9', 'Base5'])
04/24/2020 05:30:27 PM DEBUG [eventually] Low: 0 High: 4 DFA: (Hold 1 r12 )
04/24/2020 05:30:27 PM DEBUG [concatenation] DFA1: (Eventually (Hold 1 r9 ) 0 4 ) DFA2: (Eventually (Hold 1 r12 ) 0 4 )
04/24/2020 05:30:27 PM DEBUG [hold] Prop: Base5 Duration: 0 Negation: False Props: set(['r12', 'r9', 'Base5'])
04/24/2020 05:30:27 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 0 Base5 )
04/24/2020 05:30:27 PM DEBUG [concatenation] DFA1: (Concat (Eventually (Hold 1 r9 ) 0 4 ) (Eventually (Hold 1 r12 ) 0 4 ) ) DFA2: (Eventually (Hold 0 Base5 ) 0 3 )
04/24/2020 05:30:27 PM DEBUG [spec] spec: [H^1 r9]^[0, 4] * [H^1 r12]^[0, 4] * [H^0 Base5]^[0, 3]
04/24/2020 05:30:27 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Concat (Eventually (Hold 1 r9 ) 0 4 ) (Eventually (Hold 1 r12 ) 0 4 ) ) (Eventually (Hold 0 Base5 ) 0 3 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r9': 2, 'Base5': 4}
Alphabet: set([0, 1, 2, 3, 4, 5, 6, 7]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1, 4, 5]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3, 6, 7]), 'guard': u'r9', 'weight': 0, 'label': u'r9'}), (1, 0, {'input': set([0, 1, 4, 5]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3, 6, 7]), 'guard': u'r9', 'weight': 0, 'label': u'r9'}), (2, 2, {'input': set([0, 2, 4, 6]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3, 5, 7]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (3, 2, {'input': set([0, 2, 4, 6]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3, 5, 7]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 4, {'input': set([0, 1, 2, 3]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([4, 5, 6, 7]), 'guard': u'Base5', 'weight': 0, 'label': u'Base5'})]
		
04/24/2020 05:30:27 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Concatenation Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([4])
   Left:
     Op: Eventually Flags[WDF, WWF, UNR]: True True False
     Init: set([0])
     Final: set([2])
     Left:
       Op: Hold Flags[WDF, WWF, UNR]: True True True
       Init: set([0])
       Final: set([2])
   Right:
     Op: Eventually Flags[WDF, WWF, UNR]: True True False
     Init: set([2])
     Final: set([4])
     Left:
       Op: Hold Flags[WDF, WWF, UNR]: True True True
       Init: set([2])
       Final: set([4])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([4])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([4])
     Final: set([5])

04/24/2020 05:30:27 PM DEBUG [spec] No of nodes: 6
04/24/2020 05:30:27 PM DEBUG [spec] No of edges: 10
04/24/2020 05:30:27 PM DEBUG 
End of translate


04/24/2020 05:30:27 PM INFO The bound of formula "[H^1 r9]^[0, 4] * [H^1 r12]^[0, 4] * [H^0 Base5]^[0, 3]" is (4, 13)!
04/24/2020 05:30:27 PM INFO Translated formula "[H^1 r9]^[0, 4] * [H^1 r12]^[0, 4] * [H^0 Base5]^[0, 3]" to infinity DFA of size (6, 10)!
04/24/2020 05:30:27 PM DEBUG 

Start policy computation

04/24/2020 05:30:27 PM DEBUG [extend_ts] TS: (99, 1519) ETS:(99, 1519)
04/24/2020 05:30:27 PM DEBUG [extend_ts] TS: (99, 1519) ETS:(99, 1519)
04/24/2020 05:30:27 PM DEBUG [extend_ts] TS: (99, 1519) ETS:(99, 1519)
04/24/2020 05:30:27 PM DEBUG [extend_ts] TS: (99, 1519) ETS:(99, 1519)
04/24/2020 05:30:27 PM DEBUG [extend_ts] TS: (99, 1519) ETS:(99, 1519)
04/24/2020 05:30:27 PM INFO Constructing product automaton with infinity DFA!
04/24/2020 05:30:27 PM INFO Product automaton size is: (297, 4549)
04/24/2020 05:30:27 PM INFO Constructing product automaton with infinity DFA!
04/24/2020 05:30:27 PM INFO Product automaton size is: (298, 4563)
04/24/2020 05:30:27 PM INFO Constructing product automaton with infinity DFA!
04/24/2020 05:30:27 PM INFO Product automaton size is: (298, 4563)
04/24/2020 05:30:27 PM INFO Constructing product automaton with infinity DFA!
04/24/2020 05:30:27 PM INFO Product automaton size is: (297, 4546)
04/24/2020 05:30:27 PM INFO Constructing product automaton with infinity DFA!
04/24/2020 05:30:27 PM INFO Product automaton size is: (297, 4546)
04/24/2020 05:30:37 PM INFO Max deadline: 1
04/24/2020 05:30:37 PM INFO Generated control policy is: Base1 -> 1 -> r61 -> 1 -> r26 -> 1 -> r21 -> 1 -> r58 -> 1 -> r29 -> 1 -> r29 -> 1 -> r70 -> 1 -> r105 -> 1 -> r105 -> 1 -> r104 -> 1 -> r61 -> 1 -> Base1
04/24/2020 05:30:37 PM INFO Max deadline: 0
04/24/2020 05:30:37 PM INFO Generated control policy is: Base2 -> 1 -> r62 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r50 -> 1 -> r55 -> 1 -> r55 -> 1 -> r26 -> 1 -> Base2
04/24/2020 05:30:37 PM INFO Max deadline: 3
04/24/2020 05:30:37 PM INFO Generated control policy is: Base3 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r50 -> 1 -> r55 -> 1 -> r55 -> 1 -> r26 -> 1 -> r63 -> 1 -> Base3
04/24/2020 05:30:37 PM INFO Max deadline: -1
04/24/2020 05:30:37 PM INFO Generated control policy is: Base4 -> 1 -> r8 -> 1 -> r9 -> 1 -> r9 -> 1 -> r8 -> 1 -> r7 -> 1 -> r12 -> 1 -> r12 -> 1 -> r42 -> 1 -> Base4
04/24/2020 05:30:37 PM INFO Max deadline: 2
04/24/2020 05:30:37 PM INFO Generated control policy is: Base5 -> 1 -> r9 -> 1 -> r9 -> 1 -> r8 -> 1 -> r7 -> 1 -> r12 -> 1 -> r12 -> 1 -> r13 -> 1 -> r8 -> 1 -> Base5

04/21/2020 06:32:23 PM DEBUG [hold] Prop: r2 Duration: 1 Negation: False Props: set(['r5', 'r10', 'r2', 'r11'])
04/21/2020 06:32:23 PM DEBUG [eventually] Low: 0 High: 4 DFA: (Hold 1 r2 )
04/21/2020 06:32:23 PM DEBUG [hold] Prop: r10 Duration: 1 Negation: False Props: set(['r5', 'r10', 'r2', 'r11'])
04/21/2020 06:32:23 PM DEBUG [eventually] Low: 0 High: 4 DFA: (Hold 1 r10 )
04/21/2020 06:32:23 PM DEBUG [hold] Prop: r11 Duration: 1 Negation: False Props: set(['r5', 'r10', 'r2', 'r11'])
04/21/2020 06:32:23 PM DEBUG [eventually] Low: 0 High: 4 DFA: (Hold 1 r11 )
04/21/2020 06:32:23 PM INFO No trap states were added.
04/21/2020 06:32:23 PM INFO No trap states were added.
04/21/2020 06:32:23 PM DEBUG state: Eventually 
 init: [(0, 1), (0, 0)]
 final: [(2, 2)]
04/21/2020 06:32:23 PM DEBUG state: Hold 
 init: [(0, 1), (0, 0)]
 final: [(2, 2)]
04/21/2020 06:32:23 PM DEBUG state: Eventually 
 init: [(0, 0), (1, 0)]
 final: [(2, 2)]
04/21/2020 06:32:23 PM DEBUG state: Hold 
 init: [(0, 0), (1, 0)]
 final: [(2, 2)]
04/21/2020 06:32:23 PM DEBUG [union] DFA1: (Eventually (Hold 1 r10 ) 0 4 ) DFA2: (Eventually (Hold 1 r11 ) 0 4 )
04/21/2020 06:32:23 PM DEBUG [hold] Prop: r5 Duration: 1 Negation: False Props: set(['r5', 'r10', 'r2', 'r11'])
04/21/2020 06:32:23 PM DEBUG [eventually] Low: 0 High: 4 DFA: (Hold 1 r5 )
04/21/2020 06:32:23 PM INFO No trap states were added.
04/21/2020 06:32:23 PM INFO No trap states were added.
04/21/2020 06:32:23 PM DEBUG state: Union 
 init: [(1, 0), (1, 1)]
 final: [(2, 2)]
04/21/2020 06:32:23 PM DEBUG state: Eventually 
 init: [(1, 0), (1, 1)]
 final: [(2, 2)]
04/21/2020 06:32:23 PM DEBUG state: Hold 
 init: [(1, 0), (1, 1)]
 final: [(2, 2)]
04/21/2020 06:32:23 PM DEBUG state: Eventually 
 init: [(1, 0), (1, 1)]
 final: [(2, 2)]
04/21/2020 06:32:23 PM DEBUG state: Hold 
 init: [(1, 0), (1, 1)]
 final: [(2, 2)]
04/21/2020 06:32:23 PM DEBUG state: Eventually 
 init: [(0, 0), (3, 0), (1, 0), (4, 0)]
 final: [(2, 2)]
04/21/2020 06:32:23 PM DEBUG state: Hold 
 init: [(0, 0), (3, 0), (1, 0), (4, 0)]
 final: [(2, 2)]
04/21/2020 06:32:23 PM DEBUG [union] DFA1: (Union (Eventually (Hold 1 r10 ) 0 4 ) (Eventually (Hold 1 r11 ) 0 4 ) ) DFA2: (Eventually (Hold 1 r5 ) 0 4 )
04/21/2020 06:32:23 PM DEBUG [concatenation] DFA1: (Eventually (Hold 1 r2 ) 0 4 ) DFA2: (Union (Union (Eventually (Hold 1 r10 ) 0 4 ) (Eventually (Hold 1 r11 ) 0 4 ) ) (Eventually (Hold 1 r5 ) 0 4 ) )
04/21/2020 06:32:23 PM DEBUG [spec] spec: [H^1 r2]^[0, 4] * ([H^1 r10]^[0,4] | [H^1 r11]^[0,4] | [H^1 r5]^[0,4])
04/21/2020 06:32:23 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 1 r2 ) 0 4 ) (Union (Union (Eventually (Hold 1 r10 ) 0 4 ) (Eventually (Hold 1 r11 ) 0 4 ) ) (Eventually (Hold 1 r5 ) 0 4 ) ) )
Directed: True
Multi: False
Props: {'r5': 1, 'r2': 4, 'r10': 2, 'r11': 8}
Alphabet: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) 
Initial: [0]
Final: set([7])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {})]
Edges: [(0, 0, {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': u'r2', 'weight': 0, 'label': u'r2'}), (1, 0, {'input': set([0, 1, 2, 3, 8, 9, 10, 11]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': u'r2', 'weight': 0, 'label': u'r2'}), (2, 2, {'input': set([0, 4]), 'guard': '(((else)) & ((else))) & ((else))', 'weight': 0, 'label': '(((else)) & ((else))) & ((else))'}), (2, 3, {'input': set([9, 13]), 'guard': '(((else)) & (r11)) & (r5)', 'weight': 0, 'label': '(((else)) & (r11)) & (r5)'}), (2, 4, {'input': set([8, 12]), 'guard': '(((else)) & (r11)) & ((else))', 'weight': 0, 'label': '(((else)) & (r11)) & ((else))'}), (2, 5, {'input': set([2, 6]), 'guard': '((r10) & ((else))) & ((else))', 'weight': 0, 'label': '((r10) & ((else))) & ((else))'}), (2, 6, {'input': set([3, 7]), 'guard': '((r10) & ((else))) & (r5)', 'weight': 0, 'label': '((r10) & ((else))) & (r5)'}), (2, 8, {'input': set([11, 15]), 'guard': '((r10) & (r11)) & (r5)', 'weight': 0, 'label': '((r10) & (r11)) & (r5)'}), (2, 9, {'input': set([1, 5]), 'guard': '(((else)) & ((else))) & (r5)', 'weight': 0, 'label': '(((else)) & ((else))) & (r5)'}), (2, 10, {'input': set([10, 14]), 'guard': '((r10) & (r11)) & ((else))', 'weight': 0, 'label': '((r10) & (r11)) & ((else))'}), (3, 2, {'input': set([0, 4]), 'guard': '(((else)) & ((else))) & ((else))', 'weight': 0, 'label': '(((else)) & ((else))) & ((else))'}), (3, 5, {'input': set([2, 6]), 'guard': '((r10) & ((else))) & ((else))', 'weight': 0, 'label': '((r10) & ((else))) & ((else))'}), (3, 7, {'input': set([1, 3, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15]), 'guard': '(((((else)) & (r11)) | ((r10) & (r11))) & ((else))) | ((((r10) & ((else))) & (r5)) | (((((else)) & ((else))) & (r5)) | (((((else)) & (r11)) | ((r10) & (r11))) & (r5))))', 'weight': 0, 'label': '(((((else)) & (r11)) | ((r10) & (r11))) & ((else))) | ((((r10) & ((else))) & (r5)) | (((((else)) & ((else))) & (r5)) | (((((else)) & (r11)) | ((r10) & (r11))) & (r5))))'}), (4, 9, {'input': set([1, 5]), 'guard': '(((else)) & ((else))) & (r5)', 'weight': 0, 'label': '(((else)) & ((else))) & (r5)'}), (4, 2, {'input': set([0, 4]), 'guard': '(((else)) & ((else))) & ((else))', 'weight': 0, 'label': '(((else)) & ((else))) & ((else))'}), (4, 5, {'input': set([2, 6]), 'guard': '((r10) & ((else))) & ((else))', 'weight': 0, 'label': '((r10) & ((else))) & ((else))'}), (4, 6, {'input': set([3, 7]), 'guard': '((r10) & ((else))) & (r5)', 'weight': 0, 'label': '((r10) & ((else))) & (r5)'}), (4, 7, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': '(((((else)) & (r11)) | ((r10) & (r11))) & ((else))) | (((((else)) & (r11)) | ((r10) & (r11))) & (r5))', 'weight': 0, 'label': '(((((else)) & (r11)) | ((r10) & (r11))) & ((else))) | (((((else)) & (r11)) | ((r10) & (r11))) & (r5))'}), (5, 9, {'input': set([1, 5]), 'guard': '(((else)) & ((else))) & (r5)', 'weight': 0, 'label': '(((else)) & ((else))) & (r5)'}), (5, 2, {'input': set([0, 4]), 'guard': '(((else)) & ((else))) & ((else))', 'weight': 0, 'label': '(((else)) & ((else))) & ((else))'}), (5, 3, {'input': set([9, 13]), 'guard': '(((else)) & (r11)) & (r5)', 'weight': 0, 'label': '(((else)) & (r11)) & (r5)'}), (5, 4, {'input': set([8, 12]), 'guard': '(((else)) & (r11)) & ((else))', 'weight': 0, 'label': '(((else)) & (r11)) & ((else))'}), (5, 7, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': '((((r10) & (r11)) | ((r10) & ((else)))) & ((else))) | ((((r10) & (r11)) | ((r10) & ((else)))) & (r5))', 'weight': 0, 'label': '((((r10) & (r11)) | ((r10) & ((else)))) & ((else))) | ((((r10) & (r11)) | ((r10) & ((else)))) & (r5))'}), (6, 2, {'input': set([0, 4]), 'guard': '(((else)) & ((else))) & ((else))', 'weight': 0, 'label': '(((else)) & ((else))) & ((else))'}), (6, 4, {'input': set([8, 12]), 'guard': '(((else)) & (r11)) & ((else))', 'weight': 0, 'label': '(((else)) & (r11)) & ((else))'}), (6, 7, {'input': set([1, 2, 3, 5, 6, 7, 9, 10, 11, 13, 14, 15]), 'guard': '((((else)) & (r11)) & (r5)) | (((((r10) & (r11)) | ((r10) & ((else)))) & ((else))) | (((((else)) & ((else))) & (r5)) | ((((r10) & (r11)) | ((r10) & ((else)))) & (r5))))', 'weight': 0, 'label': '((((else)) & (r11)) & (r5)) | (((((r10) & (r11)) | ((r10) & ((else)))) & ((else))) | (((((else)) & ((else))) & (r5)) | ((((r10) & (r11)) | ((r10) & ((else)))) & (r5))))'}), (8, 2, {'input': set([0, 4]), 'guard': '(((else)) & ((else))) & ((else))', 'weight': 0, 'label': '(((else)) & ((else))) & ((else))'}), (8, 7, {'input': set([1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]), 'guard': '(((((else)) & (r11)) | (((r10) & ((else))) | ((r10) & (r11)))) & ((else))) | (((((else)) & ((else))) & (r5)) | (((((else)) & (r11)) | (((r10) & ((else))) | ((r10) & (r11)))) & (r5)))', 'weight': 0, 'label': '(((((else)) & (r11)) | (((r10) & ((else))) | ((r10) & (r11)))) & ((else))) | (((((else)) & ((else))) & (r5)) | (((((else)) & (r11)) | (((r10) & ((else))) | ((r10) & (r11)))) & (r5)))'}), (9, 10, {'input': set([10, 14]), 'guard': '((r10) & (r11)) & ((else))', 'weight': 0, 'label': '((r10) & (r11)) & ((else))'}), (9, 7, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': '((((else)) & (r11)) & (r5)) | ((((r10) & (r11)) & (r5)) | ((((r10) & ((else))) & (r5)) | ((((else)) & ((else))) & (r5))))', 'weight': 0, 'label': '((((else)) & (r11)) & (r5)) | ((((r10) & (r11)) & (r5)) | ((((r10) & ((else))) & (r5)) | ((((else)) & ((else))) & (r5))))'}), (9, 4, {'input': set([8, 12]), 'guard': '(((else)) & (r11)) & ((else))', 'weight': 0, 'label': '(((else)) & (r11)) & ((else))'}), (9, 2, {'input': set([0, 4]), 'guard': '(((else)) & ((else))) & ((else))', 'weight': 0, 'label': '(((else)) & ((else))) & ((else))'}), (9, 5, {'input': set([2, 6]), 'guard': '((r10) & ((else))) & ((else))', 'weight': 0, 'label': '((r10) & ((else))) & ((else))'}), (10, 9, {'input': set([1, 5]), 'guard': '(((else)) & ((else))) & (r5)', 'weight': 0, 'label': '(((else)) & ((else))) & (r5)'}), (10, 2, {'input': set([0, 4]), 'guard': '(((else)) & ((else))) & ((else))', 'weight': 0, 'label': '(((else)) & ((else))) & ((else))'}), (10, 7, {'input': set([2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]), 'guard': '(((((else)) & (r11)) | (((r10) & ((else))) | ((r10) & (r11)))) & ((else))) | (((((else)) & (r11)) | (((r10) & ((else))) | ((r10) & (r11)))) & (r5))', 'weight': 0, 'label': '(((((else)) & (r11)) | (((r10) & ((else))) | ((r10) & (r11)))) & ((else))) | (((((else)) & (r11)) | (((r10) & ((else))) | ((r10) & (r11)))) & (r5))'})]
		
04/21/2020 06:32:23 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([7])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([2])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([2])
 Right:
   Op: Union Flags[WDF, WWF, UNR]: True True False
   Init: set([2])
   Final: set([7])
   Choices:
     3 -> both=set([9, 11, 13, 15]) left=set([8, 10, 12, 14]) right=set([1, 3, 5, 7])
     4 -> both=set([]) left=set([8, 9, 10, 11, 12, 13, 14, 15]) right=set([])
     5 -> both=set([]) left=set([2, 3, 6, 7, 10, 11, 14, 15]) right=set([])
     6 -> both=set([3, 7, 11, 15]) left=set([2, 6, 10, 14]) right=set([1, 13, 5, 9])
     8 -> both=set([3, 7, 9, 11, 13, 15]) left=set([2, 6, 8, 10, 12, 14]) right=set([1, 5])
     9 -> both=set([]) left=set([]) right=set([1, 3, 5, 7, 9, 11, 13, 15])
     10 -> both=set([]) left=set([2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) right=set([])
   Left:
     Op: Union Flags[WDF, WWF, UNR]: True True False
     Init: set([2])
     Final: set([7])
     Choices:
       3 -> both=set([]) left=set([]) right=set([8, 9, 10, 11, 12, 13, 14, 15])
       4 -> both=set([]) left=set([]) right=set([8, 9, 10, 11, 12, 13, 14, 15])
       5 -> both=set([]) left=set([2, 3, 6, 7, 10, 11, 14, 15]) right=set([])
       6 -> both=set([]) left=set([2, 3, 6, 7, 10, 11, 14, 15]) right=set([])
       8 -> both=set([10, 11, 14, 15]) left=set([2, 3, 6, 7]) right=set([8, 9, 12, 13])
       10 -> both=set([10, 11, 14, 15]) left=set([2, 3, 6, 7]) right=set([8, 9, 12, 13])
     Left:
       Op: Eventually Flags[WDF, WWF, UNR]: True True False
       Init: set([2])
       Final: set([7])
       Left:
         Op: Hold Flags[WDF, WWF, UNR]: True True True
         Init: set([2])
         Final: set([7])
     Right:
       Op: Eventually Flags[WDF, WWF, UNR]: True True False
       Init: set([2])
       Final: set([7])
       Left:
         Op: Hold Flags[WDF, WWF, UNR]: True True True
         Init: set([2])
         Final: set([7])
   Right:
     Op: Eventually Flags[WDF, WWF, UNR]: True True False
     Init: set([2])
     Final: set([7])
     Left:
       Op: Hold Flags[WDF, WWF, UNR]: True True True
       Init: set([2])
       Final: set([7])

04/21/2020 06:32:23 PM DEBUG [spec] No of nodes: 11
04/21/2020 06:32:23 PM DEBUG [spec] No of edges: 38
04/21/2020 06:32:23 PM DEBUG 
End of translate


04/21/2020 06:32:23 PM INFO The bound of formula "[H^1 r2]^[0, 4] * ([H^1 r10]^[0,4] | [H^1 r11]^[0,4] | [H^1 r5]^[0,4])" is (3, 9)!
04/21/2020 06:32:23 PM INFO Translated formula "[H^1 r2]^[0, 4] * ([H^1 r10]^[0,4] | [H^1 r11]^[0,4] | [H^1 r5]^[0,4])" to infinity DFA of size (11, 38)!
04/21/2020 06:32:23 PM DEBUG [hold] Prop: r14 Duration: 1 Negation: False Props: set(['r5', 'r14', 'r10', 'r11'])
04/21/2020 06:32:23 PM DEBUG [eventually] Low: 0 High: 4 DFA: (Hold 1 r14 )
04/21/2020 06:32:23 PM DEBUG [hold] Prop: r10 Duration: 1 Negation: False Props: set(['r5', 'r14', 'r10', 'r11'])
04/21/2020 06:32:23 PM DEBUG [eventually] Low: 0 High: 4 DFA: (Hold 1 r10 )
04/21/2020 06:32:23 PM DEBUG [hold] Prop: r11 Duration: 1 Negation: False Props: set(['r5', 'r14', 'r10', 'r11'])
04/21/2020 06:32:23 PM DEBUG [eventually] Low: 0 High: 4 DFA: (Hold 1 r11 )
04/21/2020 06:32:23 PM INFO No trap states were added.
04/21/2020 06:32:23 PM INFO No trap states were added.
04/21/2020 06:32:23 PM DEBUG state: Eventually 
 init: [(0, 1), (0, 0)]
 final: [(2, 2)]
04/21/2020 06:32:23 PM DEBUG state: Hold 
 init: [(0, 1), (0, 0)]
 final: [(2, 2)]
04/21/2020 06:32:23 PM DEBUG state: Eventually 
 init: [(0, 0), (1, 0)]
 final: [(2, 2)]
04/21/2020 06:32:23 PM DEBUG state: Hold 
 init: [(0, 0), (1, 0)]
 final: [(2, 2)]
04/21/2020 06:32:23 PM DEBUG [union] DFA1: (Eventually (Hold 1 r10 ) 0 4 ) DFA2: (Eventually (Hold 1 r11 ) 0 4 )
04/21/2020 06:32:23 PM DEBUG [hold] Prop: r5 Duration: 1 Negation: False Props: set(['r5', 'r14', 'r10', 'r11'])
04/21/2020 06:32:23 PM DEBUG [eventually] Low: 0 High: 4 DFA: (Hold 1 r5 )
04/21/2020 06:32:23 PM INFO No trap states were added.
04/21/2020 06:32:23 PM INFO No trap states were added.
04/21/2020 06:32:23 PM DEBUG state: Union 
 init: [(1, 0), (1, 1)]
 final: [(2, 2)]
04/21/2020 06:32:23 PM DEBUG state: Eventually 
 init: [(1, 0), (1, 1)]
 final: [(2, 2)]
04/21/2020 06:32:23 PM DEBUG state: Hold 
 init: [(1, 0), (1, 1)]
 final: [(2, 2)]
04/21/2020 06:32:23 PM DEBUG state: Eventually 
 init: [(1, 0), (1, 1)]
 final: [(2, 2)]
04/21/2020 06:32:23 PM DEBUG state: Hold 
 init: [(1, 0), (1, 1)]
 final: [(2, 2)]
04/21/2020 06:32:23 PM DEBUG state: Eventually 
 init: [(0, 0), (3, 0), (1, 0), (4, 0)]
 final: [(2, 2)]
04/21/2020 06:32:23 PM DEBUG state: Hold 
 init: [(0, 0), (3, 0), (1, 0), (4, 0)]
 final: [(2, 2)]
04/21/2020 06:32:23 PM DEBUG [union] DFA1: (Union (Eventually (Hold 1 r10 ) 0 4 ) (Eventually (Hold 1 r11 ) 0 4 ) ) DFA2: (Eventually (Hold 1 r5 ) 0 4 )
04/21/2020 06:32:23 PM DEBUG [concatenation] DFA1: (Eventually (Hold 1 r14 ) 0 4 ) DFA2: (Union (Union (Eventually (Hold 1 r10 ) 0 4 ) (Eventually (Hold 1 r11 ) 0 4 ) ) (Eventually (Hold 1 r5 ) 0 4 ) )
04/21/2020 06:32:23 PM DEBUG [spec] spec: [H^1 r14]^[0, 4] * ([H^1 r10]^[0,4] | [H^1 r11]^[0,4] | [H^1 r5]^[0,4])
04/21/2020 06:32:23 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 1 r14 ) 0 4 ) (Union (Union (Eventually (Hold 1 r10 ) 0 4 ) (Eventually (Hold 1 r11 ) 0 4 ) ) (Eventually (Hold 1 r5 ) 0 4 ) ) )
Directed: True
Multi: False
Props: {'r5': 1, 'r14': 2, 'r10': 4, 'r11': 8}
Alphabet: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) 
Initial: [0]
Final: set([7])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {}), (7, {}), (8, {}), (9, {}), (10, {})]
Edges: [(0, 0, {'input': set([0, 1, 4, 5, 8, 9, 12, 13]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': u'r14', 'weight': 0, 'label': u'r14'}), (1, 0, {'input': set([0, 1, 4, 5, 8, 9, 12, 13]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3, 6, 7, 10, 11, 14, 15]), 'guard': u'r14', 'weight': 0, 'label': u'r14'}), (2, 2, {'input': set([0, 2]), 'guard': '(((else)) & ((else))) & ((else))', 'weight': 0, 'label': '(((else)) & ((else))) & ((else))'}), (2, 3, {'input': set([9, 11]), 'guard': '(((else)) & (r11)) & (r5)', 'weight': 0, 'label': '(((else)) & (r11)) & (r5)'}), (2, 4, {'input': set([8, 10]), 'guard': '(((else)) & (r11)) & ((else))', 'weight': 0, 'label': '(((else)) & (r11)) & ((else))'}), (2, 5, {'input': set([4, 6]), 'guard': '((r10) & ((else))) & ((else))', 'weight': 0, 'label': '((r10) & ((else))) & ((else))'}), (2, 6, {'input': set([5, 7]), 'guard': '((r10) & ((else))) & (r5)', 'weight': 0, 'label': '((r10) & ((else))) & (r5)'}), (2, 8, {'input': set([13, 15]), 'guard': '((r10) & (r11)) & (r5)', 'weight': 0, 'label': '((r10) & (r11)) & (r5)'}), (2, 9, {'input': set([1, 3]), 'guard': '(((else)) & ((else))) & (r5)', 'weight': 0, 'label': '(((else)) & ((else))) & (r5)'}), (2, 10, {'input': set([12, 14]), 'guard': '((r10) & (r11)) & ((else))', 'weight': 0, 'label': '((r10) & (r11)) & ((else))'}), (3, 2, {'input': set([0, 2]), 'guard': '(((else)) & ((else))) & ((else))', 'weight': 0, 'label': '(((else)) & ((else))) & ((else))'}), (3, 5, {'input': set([4, 6]), 'guard': '((r10) & ((else))) & ((else))', 'weight': 0, 'label': '((r10) & ((else))) & ((else))'}), (3, 7, {'input': set([1, 3, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15]), 'guard': '(((((else)) & (r11)) | ((r10) & (r11))) & ((else))) | ((((r10) & ((else))) & (r5)) | (((((else)) & ((else))) & (r5)) | (((((else)) & (r11)) | ((r10) & (r11))) & (r5))))', 'weight': 0, 'label': '(((((else)) & (r11)) | ((r10) & (r11))) & ((else))) | ((((r10) & ((else))) & (r5)) | (((((else)) & ((else))) & (r5)) | (((((else)) & (r11)) | ((r10) & (r11))) & (r5))))'}), (4, 9, {'input': set([1, 3]), 'guard': '(((else)) & ((else))) & (r5)', 'weight': 0, 'label': '(((else)) & ((else))) & (r5)'}), (4, 2, {'input': set([0, 2]), 'guard': '(((else)) & ((else))) & ((else))', 'weight': 0, 'label': '(((else)) & ((else))) & ((else))'}), (4, 5, {'input': set([4, 6]), 'guard': '((r10) & ((else))) & ((else))', 'weight': 0, 'label': '((r10) & ((else))) & ((else))'}), (4, 6, {'input': set([5, 7]), 'guard': '((r10) & ((else))) & (r5)', 'weight': 0, 'label': '((r10) & ((else))) & (r5)'}), (4, 7, {'input': set([8, 9, 10, 11, 12, 13, 14, 15]), 'guard': '(((((else)) & (r11)) | ((r10) & (r11))) & ((else))) | (((((else)) & (r11)) | ((r10) & (r11))) & (r5))', 'weight': 0, 'label': '(((((else)) & (r11)) | ((r10) & (r11))) & ((else))) | (((((else)) & (r11)) | ((r10) & (r11))) & (r5))'}), (5, 9, {'input': set([1, 3]), 'guard': '(((else)) & ((else))) & (r5)', 'weight': 0, 'label': '(((else)) & ((else))) & (r5)'}), (5, 2, {'input': set([0, 2]), 'guard': '(((else)) & ((else))) & ((else))', 'weight': 0, 'label': '(((else)) & ((else))) & ((else))'}), (5, 3, {'input': set([9, 11]), 'guard': '(((else)) & (r11)) & (r5)', 'weight': 0, 'label': '(((else)) & (r11)) & (r5)'}), (5, 4, {'input': set([8, 10]), 'guard': '(((else)) & (r11)) & ((else))', 'weight': 0, 'label': '(((else)) & (r11)) & ((else))'}), (5, 7, {'input': set([4, 5, 6, 7, 12, 13, 14, 15]), 'guard': '((((r10) & (r11)) | ((r10) & ((else)))) & ((else))) | ((((r10) & (r11)) | ((r10) & ((else)))) & (r5))', 'weight': 0, 'label': '((((r10) & (r11)) | ((r10) & ((else)))) & ((else))) | ((((r10) & (r11)) | ((r10) & ((else)))) & (r5))'}), (6, 2, {'input': set([0, 2]), 'guard': '(((else)) & ((else))) & ((else))', 'weight': 0, 'label': '(((else)) & ((else))) & ((else))'}), (6, 4, {'input': set([8, 10]), 'guard': '(((else)) & (r11)) & ((else))', 'weight': 0, 'label': '(((else)) & (r11)) & ((else))'}), (6, 7, {'input': set([1, 3, 4, 5, 6, 7, 9, 11, 12, 13, 14, 15]), 'guard': '((((else)) & (r11)) & (r5)) | (((((r10) & (r11)) | ((r10) & ((else)))) & ((else))) | (((((else)) & ((else))) & (r5)) | ((((r10) & (r11)) | ((r10) & ((else)))) & (r5))))', 'weight': 0, 'label': '((((else)) & (r11)) & (r5)) | (((((r10) & (r11)) | ((r10) & ((else)))) & ((else))) | (((((else)) & ((else))) & (r5)) | ((((r10) & (r11)) | ((r10) & ((else)))) & (r5))))'}), (8, 2, {'input': set([0, 2]), 'guard': '(((else)) & ((else))) & ((else))', 'weight': 0, 'label': '(((else)) & ((else))) & ((else))'}), (8, 7, {'input': set([1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]), 'guard': '(((((else)) & (r11)) | (((r10) & ((else))) | ((r10) & (r11)))) & ((else))) | (((((else)) & ((else))) & (r5)) | (((((else)) & (r11)) | (((r10) & ((else))) | ((r10) & (r11)))) & (r5)))', 'weight': 0, 'label': '(((((else)) & (r11)) | (((r10) & ((else))) | ((r10) & (r11)))) & ((else))) | (((((else)) & ((else))) & (r5)) | (((((else)) & (r11)) | (((r10) & ((else))) | ((r10) & (r11)))) & (r5)))'}), (9, 10, {'input': set([12, 14]), 'guard': '((r10) & (r11)) & ((else))', 'weight': 0, 'label': '((r10) & (r11)) & ((else))'}), (9, 7, {'input': set([1, 3, 5, 7, 9, 11, 13, 15]), 'guard': '((((else)) & (r11)) & (r5)) | ((((r10) & (r11)) & (r5)) | ((((r10) & ((else))) & (r5)) | ((((else)) & ((else))) & (r5))))', 'weight': 0, 'label': '((((else)) & (r11)) & (r5)) | ((((r10) & (r11)) & (r5)) | ((((r10) & ((else))) & (r5)) | ((((else)) & ((else))) & (r5))))'}), (9, 4, {'input': set([8, 10]), 'guard': '(((else)) & (r11)) & ((else))', 'weight': 0, 'label': '(((else)) & (r11)) & ((else))'}), (9, 2, {'input': set([0, 2]), 'guard': '(((else)) & ((else))) & ((else))', 'weight': 0, 'label': '(((else)) & ((else))) & ((else))'}), (9, 5, {'input': set([4, 6]), 'guard': '((r10) & ((else))) & ((else))', 'weight': 0, 'label': '((r10) & ((else))) & ((else))'}), (10, 9, {'input': set([1, 3]), 'guard': '(((else)) & ((else))) & (r5)', 'weight': 0, 'label': '(((else)) & ((else))) & (r5)'}), (10, 2, {'input': set([0, 2]), 'guard': '(((else)) & ((else))) & ((else))', 'weight': 0, 'label': '(((else)) & ((else))) & ((else))'}), (10, 7, {'input': set([4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]), 'guard': '(((((else)) & (r11)) | (((r10) & ((else))) | ((r10) & (r11)))) & ((else))) | (((((else)) & (r11)) | (((r10) & ((else))) | ((r10) & (r11)))) & (r5))', 'weight': 0, 'label': '(((((else)) & (r11)) | (((r10) & ((else))) | ((r10) & (r11)))) & ((else))) | (((((else)) & (r11)) | (((r10) & ((else))) | ((r10) & (r11)))) & (r5))'})]
		
04/21/2020 06:32:23 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([7])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([2])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([2])
 Right:
   Op: Union Flags[WDF, WWF, UNR]: True True False
   Init: set([2])
   Final: set([7])
   Choices:
     3 -> both=set([9, 11, 13, 15]) left=set([8, 10, 12, 14]) right=set([1, 3, 5, 7])
     4 -> both=set([]) left=set([8, 9, 10, 11, 12, 13, 14, 15]) right=set([])
     5 -> both=set([]) left=set([4, 5, 6, 7, 12, 13, 14, 15]) right=set([])
     6 -> both=set([7, 5, 13, 15]) left=set([4, 12, 6, 14]) right=set([11, 1, 3, 9])
     8 -> both=set([5, 7, 9, 11, 13, 15]) left=set([4, 6, 8, 10, 12, 14]) right=set([1, 3])
     9 -> both=set([]) left=set([]) right=set([1, 3, 5, 7, 9, 11, 13, 15])
     10 -> both=set([]) left=set([4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) right=set([])
   Left:
     Op: Union Flags[WDF, WWF, UNR]: True True False
     Init: set([2])
     Final: set([7])
     Choices:
       3 -> both=set([]) left=set([]) right=set([8, 9, 10, 11, 12, 13, 14, 15])
       4 -> both=set([]) left=set([]) right=set([8, 9, 10, 11, 12, 13, 14, 15])
       5 -> both=set([]) left=set([4, 5, 6, 7, 12, 13, 14, 15]) right=set([])
       6 -> both=set([]) left=set([4, 5, 6, 7, 12, 13, 14, 15]) right=set([])
       8 -> both=set([12, 13, 14, 15]) left=set([4, 5, 6, 7]) right=set([8, 9, 10, 11])
       10 -> both=set([12, 13, 14, 15]) left=set([4, 5, 6, 7]) right=set([8, 9, 10, 11])
     Left:
       Op: Eventually Flags[WDF, WWF, UNR]: True True False
       Init: set([2])
       Final: set([7])
       Left:
         Op: Hold Flags[WDF, WWF, UNR]: True True True
         Init: set([2])
         Final: set([7])
     Right:
       Op: Eventually Flags[WDF, WWF, UNR]: True True False
       Init: set([2])
       Final: set([7])
       Left:
         Op: Hold Flags[WDF, WWF, UNR]: True True True
         Init: set([2])
         Final: set([7])
   Right:
     Op: Eventually Flags[WDF, WWF, UNR]: True True False
     Init: set([2])
     Final: set([7])
     Left:
       Op: Hold Flags[WDF, WWF, UNR]: True True True
       Init: set([2])
       Final: set([7])

04/21/2020 06:32:23 PM DEBUG [spec] No of nodes: 11
04/21/2020 06:32:23 PM DEBUG [spec] No of edges: 38
04/21/2020 06:32:23 PM DEBUG 
End of translate


04/21/2020 06:32:23 PM INFO The bound of formula "[H^1 r14]^[0, 4] * ([H^1 r10]^[0,4] | [H^1 r11]^[0,4] | [H^1 r5]^[0,4])" is (3, 9)!
04/21/2020 06:32:23 PM INFO Translated formula "[H^1 r14]^[0, 4] * ([H^1 r10]^[0,4] | [H^1 r11]^[0,4] | [H^1 r5]^[0,4])" to infinity DFA of size (11, 38)!
04/21/2020 06:32:23 PM DEBUG 

Start policy computation

04/21/2020 06:32:23 PM DEBUG [extend_ts] TS: (16, 80) ETS:(16, 80)
04/21/2020 06:32:23 PM DEBUG [extend_ts] TS: (16, 80) ETS:(16, 80)
04/21/2020 06:32:23 PM INFO Constructing product automaton with infinity DFA!
04/21/2020 06:32:23 PM INFO Product automaton size is: (35, 160)
04/21/2020 06:32:23 PM INFO Constructing product automaton with infinity DFA!
04/21/2020 06:32:23 PM INFO Product automaton size is: (35, 160)
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:23 PM DEBUG []
04/21/2020 06:32:26 PM INFO Max deadline: -1
04/21/2020 06:32:26 PM INFO Generated control policy is: Base1 -> 1 -> r7 -> 1 -> r2 -> 1 -> r2 -> 1 -> r3 -> 1 -> r10 -> 1 -> r10
04/21/2020 06:32:26 PM INFO Max deadline: 0
04/21/2020 06:32:26 PM INFO Generated control policy is: Base2 -> 1 -> r7 -> 1 -> r14 -> 1 -> r14 -> 1 -> r15 -> 1 -> r10 -> 1 -> r10

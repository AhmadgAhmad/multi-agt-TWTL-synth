02/27/2020 06:03:51 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
02/27/2020 06:03:51 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 2 r21 )
02/27/2020 06:03:51 PM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
02/27/2020 06:03:51 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 1 r12 )
02/27/2020 06:03:51 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 7 ) DFA2: (Eventually (Hold 1 r12 ) 0 7 )
02/27/2020 06:03:51 PM DEBUG [spec] spec: [H^2 r21]^[0, 7] * [H^1 r12]^[0, 7]
02/27/2020 06:03:51 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 7 ) (Eventually (Hold 1 r12 ) 0 7 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
02/27/2020 06:03:51 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

02/27/2020 06:03:51 PM DEBUG [spec] No of nodes: 6
02/27/2020 06:03:51 PM DEBUG [spec] No of edges: 10
02/27/2020 06:03:51 PM DEBUG 
End of translate


02/27/2020 06:03:51 PM INFO The bound of formula "[H^2 r21]^[0, 7] * [H^1 r12]^[0, 7]" is (4, 15)!
02/27/2020 06:03:51 PM INFO Translated formula "[H^2 r21]^[0, 7] * [H^1 r12]^[0, 7]" to infinity DFA of size (6, 10)!
02/27/2020 06:03:51 PM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r23', 'r21'])
02/27/2020 06:03:51 PM DEBUG [eventually] Low: 0 High: 8 DFA: (Hold 2 r21 )
02/27/2020 06:03:51 PM DEBUG [hold] Prop: r23 Duration: 1 Negation: False Props: set(['r23', 'r21'])
02/27/2020 06:03:51 PM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r23 )
02/27/2020 06:03:51 PM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 8 ) DFA2: (Eventually (Hold 1 r23 ) 0 5 )
02/27/2020 06:03:51 PM DEBUG [spec] spec: [H^2 r21]^[0, 8] * [H^1 r23]^[0, 5]
02/27/2020 06:03:51 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 8 ) (Eventually (Hold 1 r23 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r23': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r23', 'weight': 0, 'label': u'r23'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r23', 'weight': 0, 'label': u'r23'})]
		
02/27/2020 06:03:51 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

02/27/2020 06:03:51 PM DEBUG [spec] No of nodes: 6
02/27/2020 06:03:51 PM DEBUG [spec] No of edges: 10
02/27/2020 06:03:51 PM DEBUG 
End of translate


02/27/2020 06:03:51 PM INFO The bound of formula "[H^2 r21]^[0, 8] * [H^1 r23]^[0, 5]" is (4, 14)!
02/27/2020 06:03:51 PM INFO Translated formula "[H^2 r21]^[0, 8] * [H^1 r23]^[0, 5]" to infinity DFA of size (6, 10)!
02/27/2020 06:03:51 PM DEBUG [hold] Prop: r86 Duration: 1 Negation: False Props: set(['r97', 'r73', 'r86'])
02/27/2020 06:03:51 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 1 r86 )
02/27/2020 06:03:51 PM DEBUG [hold] Prop: r97 Duration: 1 Negation: False Props: set(['r97', 'r73', 'r86'])
02/27/2020 06:03:51 PM DEBUG [eventually] Low: 0 High: 7 DFA: (Hold 1 r97 )
02/27/2020 06:03:51 PM DEBUG [concatenation] DFA1: (Eventually (Hold 1 r86 ) 0 7 ) DFA2: (Eventually (Hold 1 r97 ) 0 7 )
02/27/2020 06:03:51 PM DEBUG [hold] Prop: r73 Duration: 1 Negation: False Props: set(['r97', 'r73', 'r86'])
02/27/2020 06:03:51 PM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 r73 )
02/27/2020 06:03:51 PM DEBUG [concatenation] DFA1: (Concat (Eventually (Hold 1 r86 ) 0 7 ) (Eventually (Hold 1 r97 ) 0 7 ) ) DFA2: (Eventually (Hold 1 r73 ) 0 3 )
02/27/2020 06:03:51 PM DEBUG [spec] spec: [H^1 r86]^[0, 7] * [H^1 r97]^[0, 7] * [H^1 r73]^[0, 3]
02/27/2020 06:03:51 PM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Concat (Eventually (Hold 1 r86 ) 0 7 ) (Eventually (Hold 1 r97 ) 0 7 ) ) (Eventually (Hold 1 r73 ) 0 3 ) )
Directed: True
Multi: False
Props: {'r97': 1, 'r73': 2, 'r86': 4}
Alphabet: set([0, 1, 2, 3, 4, 5, 6, 7]) 
Initial: [0]
Final: set([6])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {}), (6, {})]
Edges: [(0, 0, {'input': set([0, 1, 2, 3]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([4, 5, 6, 7]), 'guard': u'r86', 'weight': 0, 'label': u'r86'}), (1, 0, {'input': set([0, 1, 2, 3]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([4, 5, 6, 7]), 'guard': u'r86', 'weight': 0, 'label': u'r86'}), (2, 2, {'input': set([0, 2, 4, 6]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3, 5, 7]), 'guard': u'r97', 'weight': 0, 'label': u'r97'}), (3, 2, {'input': set([0, 2, 4, 6]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3, 5, 7]), 'guard': u'r97', 'weight': 0, 'label': u'r97'}), (4, 4, {'input': set([0, 1, 4, 5]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([2, 3, 6, 7]), 'guard': u'r73', 'weight': 0, 'label': u'r73'}), (5, 4, {'input': set([0, 1, 4, 5]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (5, 6, {'input': set([2, 3, 6, 7]), 'guard': u'r73', 'weight': 0, 'label': u'r73'})]
		
02/27/2020 06:03:51 PM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([6])
 Left:
   Op: Concatenation Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([4])
   Left:
     Op: Eventually Flags[WDF, WWF, UNR]: True True False
     Init: set([0])
     Final: set([2])
     Left:
       Op: Hold Flags[WDF, WWF, UNR]: True True True
       Init: set([0])
       Final: set([2])
   Right:
     Op: Eventually Flags[WDF, WWF, UNR]: True True False
     Init: set([2])
     Final: set([4])
     Left:
       Op: Hold Flags[WDF, WWF, UNR]: True True True
       Init: set([2])
       Final: set([4])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([4])
   Final: set([6])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([4])
     Final: set([6])

02/27/2020 06:03:51 PM DEBUG [spec] No of nodes: 7
02/27/2020 06:03:51 PM DEBUG [spec] No of edges: 12
02/27/2020 06:03:51 PM DEBUG 
End of translate


02/27/2020 06:03:51 PM INFO The bound of formula "[H^1 r86]^[0, 7] * [H^1 r97]^[0, 7] * [H^1 r73]^[0, 3]" is (5, 19)!
02/27/2020 06:03:51 PM INFO Translated formula "[H^1 r86]^[0, 7] * [H^1 r97]^[0, 7] * [H^1 r73]^[0, 3]" to infinity DFA of size (7, 12)!
02/27/2020 06:03:51 PM DEBUG 

Start policy computation

02/27/2020 06:03:51 PM DEBUG [extend_ts] TS: (102, 1594) ETS:(102, 1594)
02/27/2020 06:03:51 PM DEBUG [extend_ts] TS: (102, 1594) ETS:(102, 1594)
02/27/2020 06:03:52 PM DEBUG [extend_ts] TS: (102, 1594) ETS:(102, 1594)
02/27/2020 06:03:52 PM INFO Constructing product automaton with infinity DFA!
02/27/2020 06:03:52 PM INFO Product automaton size is: (206, 3204)
02/27/2020 06:03:52 PM INFO Constructing product automaton with infinity DFA!
02/27/2020 06:03:52 PM INFO Product automaton size is: (206, 3204)
02/27/2020 06:03:52 PM INFO Constructing product automaton with infinity DFA!
02/27/2020 06:03:52 PM INFO Product automaton size is: (307, 4782)
02/27/2020 06:04:08 PM INFO Max deadline: 0
02/27/2020 06:04:08 PM INFO Generated control policy is: Base -> 1 -> r31 -> 1 -> r26 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r14 -> 1 -> r13 -> 1 -> r12 -> 1 -> r12
02/27/2020 06:04:08 PM INFO Max deadline: -3
02/27/2020 06:04:08 PM INFO Generated control policy is: Base2 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r22 -> 1 -> r23 -> 1 -> r23
02/27/2020 06:04:08 PM INFO Max deadline: 1
02/27/2020 06:04:08 PM INFO Generated control policy is: Base3 -> 1 -> r43 -> 1 -> r86 -> 1 -> r86 -> 1 -> r91 -> 1 -> r97 -> 1 -> r97 -> 1 -> r91 -> 1 -> r85 -> 1 -> r79 -> 1 -> r73 -> 1 -> r73

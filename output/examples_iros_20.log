03/04/2020 09:04:31 AM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r12', 'r21'])
03/04/2020 09:04:31 AM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 2 r21 )
03/04/2020 09:04:31 AM DEBUG [hold] Prop: r12 Duration: 1 Negation: False Props: set(['r12', 'r21'])
03/04/2020 09:04:31 AM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 1 r12 )
03/04/2020 09:04:31 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 6 ) DFA2: (Eventually (Hold 1 r12 ) 0 5 )
03/04/2020 09:04:31 AM DEBUG [spec] spec: [H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]
03/04/2020 09:04:31 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 6 ) (Eventually (Hold 1 r12 ) 0 5 ) )
Directed: True
Multi: False
Props: {'r12': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r12', 'weight': 0, 'label': u'r12'})]
		
03/04/2020 09:04:31 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/04/2020 09:04:31 AM DEBUG [spec] No of nodes: 6
03/04/2020 09:04:31 AM DEBUG [spec] No of edges: 10
03/04/2020 09:04:31 AM DEBUG 
End of translate


03/04/2020 09:04:31 AM INFO The bound of formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" is (4, 12)!
03/04/2020 09:04:31 AM INFO Translated formula "[H^2 r21]^[0, 6] * [H^1 r12]^[0, 5]" to infinity DFA of size (6, 10)!
03/04/2020 09:04:31 AM DEBUG [hold] Prop: r21 Duration: 2 Negation: False Props: set(['r23', 'r21'])
03/04/2020 09:04:31 AM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 2 r21 )
03/04/2020 09:04:31 AM DEBUG [hold] Prop: r23 Duration: 1 Negation: False Props: set(['r23', 'r21'])
03/04/2020 09:04:31 AM DEBUG [eventually] Low: 0 High: 4 DFA: (Hold 1 r23 )
03/04/2020 09:04:31 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r21 ) 0 5 ) DFA2: (Eventually (Hold 1 r23 ) 0 4 )
03/04/2020 09:04:31 AM DEBUG [spec] spec: [H^2 r21]^[0, 5] * [H^1 r23]^[0, 4]
03/04/2020 09:04:31 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r21 ) 0 5 ) (Eventually (Hold 1 r23 ) 0 4 ) )
Directed: True
Multi: False
Props: {'r23': 1, 'r21': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (2, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([2, 3]), 'guard': u'r21', 'weight': 0, 'label': u'r21'}), (3, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r23', 'weight': 0, 'label': u'r23'}), (4, 3, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r23', 'weight': 0, 'label': u'r23'})]
		
03/04/2020 09:04:31 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/04/2020 09:04:31 AM DEBUG [spec] No of nodes: 6
03/04/2020 09:04:31 AM DEBUG [spec] No of edges: 10
03/04/2020 09:04:31 AM DEBUG 
End of translate


03/04/2020 09:04:31 AM INFO The bound of formula "[H^2 r21]^[0, 5] * [H^1 r23]^[0, 4]" is (4, 10)!
03/04/2020 09:04:31 AM INFO Translated formula "[H^2 r21]^[0, 5] * [H^1 r23]^[0, 4]" to infinity DFA of size (6, 10)!
03/04/2020 09:04:31 AM DEBUG [hold] Prop: r86 Duration: 1 Negation: False Props: set(['r97', 'r86'])
03/04/2020 09:04:31 AM DEBUG [eventually] Low: 0 High: 4 DFA: (Hold 1 r86 )
03/04/2020 09:04:31 AM DEBUG [hold] Prop: r97 Duration: 2 Negation: False Props: set(['r97', 'r86'])
03/04/2020 09:04:31 AM DEBUG [eventually] Low: 0 High: 4 DFA: (Hold 2 r97 )
03/04/2020 09:04:31 AM DEBUG [concatenation] DFA1: (Eventually (Hold 1 r86 ) 0 4 ) DFA2: (Eventually (Hold 2 r97 ) 0 4 )
03/04/2020 09:04:31 AM DEBUG [spec] spec: [H^1 r86]^[0, 4] * [H^2 r97]^[0, 4]
03/04/2020 09:04:31 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 1 r86 ) 0 4 ) (Eventually (Hold 2 r97 ) 0 4 ) )
Directed: True
Multi: False
Props: {'r97': 1, 'r86': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r86', 'weight': 0, 'label': u'r86'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r86', 'weight': 0, 'label': u'r86'}), (2, 2, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3]), 'guard': u'r97', 'weight': 0, 'label': u'r97'}), (3, 2, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'r97', 'weight': 0, 'label': u'r97'}), (4, 2, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([1, 3]), 'guard': u'r97', 'weight': 0, 'label': u'r97'})]
		
03/04/2020 09:04:31 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([2])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([2])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([2])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([2])
     Final: set([5])

03/04/2020 09:04:31 AM DEBUG [spec] No of nodes: 6
03/04/2020 09:04:31 AM DEBUG [spec] No of edges: 10
03/04/2020 09:04:31 AM DEBUG 
End of translate


03/04/2020 09:04:31 AM INFO The bound of formula "[H^1 r86]^[0, 4] * [H^2 r97]^[0, 4]" is (4, 9)!
03/04/2020 09:04:31 AM INFO Translated formula "[H^1 r86]^[0, 4] * [H^2 r97]^[0, 4]" to infinity DFA of size (6, 10)!
03/04/2020 09:04:31 AM DEBUG [hold] Prop: r89 Duration: 2 Negation: False Props: set(['r89', 'Base4'])
03/04/2020 09:04:31 AM DEBUG [eventually] Low: 0 High: 5 DFA: (Hold 2 r89 )
03/04/2020 09:04:31 AM DEBUG [hold] Prop: Base4 Duration: 1 Negation: False Props: set(['r89', 'Base4'])
03/04/2020 09:04:31 AM DEBUG [eventually] Low: 0 High: 3 DFA: (Hold 1 Base4 )
03/04/2020 09:04:31 AM DEBUG [concatenation] DFA1: (Eventually (Hold 2 r89 ) 0 5 ) DFA2: (Eventually (Hold 1 Base4 ) 0 3 )
03/04/2020 09:04:31 AM DEBUG [spec] spec: [H^2 r89]^[0, 5] * [H^1 Base4]^[0, 3]
03/04/2020 09:04:31 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 2 r89 ) 0 5 ) (Eventually (Hold 1 Base4 ) 0 3 ) )
Directed: True
Multi: False
Props: {'r89': 1, 'Base4': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([5])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {}), (5, {})]
Edges: [(0, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([1, 3]), 'guard': u'r89', 'weight': 0, 'label': u'r89'}), (1, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([1, 3]), 'guard': u'r89', 'weight': 0, 'label': u'r89'}), (2, 0, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3]), 'guard': u'r89', 'weight': 0, 'label': u'r89'}), (3, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([2, 3]), 'guard': u'Base4', 'weight': 0, 'label': u'Base4'}), (4, 3, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (4, 5, {'input': set([2, 3]), 'guard': u'Base4', 'weight': 0, 'label': u'Base4'})]
		
03/04/2020 09:04:31 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([5])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([3])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([3])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([3])
   Final: set([5])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([3])
     Final: set([5])

03/04/2020 09:04:31 AM DEBUG [spec] No of nodes: 6
03/04/2020 09:04:31 AM DEBUG [spec] No of edges: 10
03/04/2020 09:04:31 AM DEBUG 
End of translate


03/04/2020 09:04:31 AM INFO The bound of formula "[H^2 r89]^[0, 5] * [H^1 Base4]^[0, 3]" is (4, 9)!
03/04/2020 09:04:31 AM INFO Translated formula "[H^2 r89]^[0, 5] * [H^1 Base4]^[0, 3]" to infinity DFA of size (6, 10)!
03/04/2020 09:04:31 AM DEBUG [hold] Prop: r105 Duration: 1 Negation: False Props: set(['Base5', 'r105'])
03/04/2020 09:04:31 AM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 1 r105 )
03/04/2020 09:04:31 AM DEBUG [hold] Prop: Base5 Duration: 1 Negation: False Props: set(['Base5', 'r105'])
03/04/2020 09:04:31 AM DEBUG [eventually] Low: 0 High: 6 DFA: (Hold 1 Base5 )
03/04/2020 09:04:31 AM DEBUG [concatenation] DFA1: (Eventually (Hold 1 r105 ) 0 6 ) DFA2: (Eventually (Hold 1 Base5 ) 0 6 )
03/04/2020 09:04:31 AM DEBUG [spec] spec: [H^1 r105]^[0, 6] * [H^1 Base5]^[0, 6]
03/04/2020 09:04:31 AM DEBUG [spec] mode: Infinity DFA: 
Name: (Concat (Eventually (Hold 1 r105 ) 0 6 ) (Eventually (Hold 1 Base5 ) 0 6 ) )
Directed: True
Multi: False
Props: {'Base5': 1, 'r105': 2}
Alphabet: set([0, 1, 2, 3]) 
Initial: [0]
Final: set([4])
Nodes: [(0, {}), (1, {}), (2, {}), (3, {}), (4, {})]
Edges: [(0, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (0, 1, {'input': set([2, 3]), 'guard': u'r105', 'weight': 0, 'label': u'r105'}), (1, 0, {'input': set([0, 1]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (1, 2, {'input': set([2, 3]), 'guard': u'r105', 'weight': 0, 'label': u'r105'}), (2, 2, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (2, 3, {'input': set([1, 3]), 'guard': u'Base5', 'weight': 0, 'label': u'Base5'}), (3, 2, {'input': set([0, 2]), 'guard': '(else)', 'weight': 0, 'label': '(else)'}), (3, 4, {'input': set([1, 3]), 'guard': u'Base5', 'weight': 0, 'label': u'Base5'})]
		
03/04/2020 09:04:31 AM DEBUG [spec] tree:
 Op: Concatenation Flags[WDF, WWF, UNR]: True True False
 Init: set([0])
 Final: set([4])
 Left:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([0])
   Final: set([2])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([0])
     Final: set([2])
 Right:
   Op: Eventually Flags[WDF, WWF, UNR]: True True False
   Init: set([2])
   Final: set([4])
   Left:
     Op: Hold Flags[WDF, WWF, UNR]: True True True
     Init: set([2])
     Final: set([4])

03/04/2020 09:04:31 AM DEBUG [spec] No of nodes: 5
03/04/2020 09:04:31 AM DEBUG [spec] No of edges: 8
03/04/2020 09:04:31 AM DEBUG 
End of translate


03/04/2020 09:04:31 AM INFO The bound of formula "[H^1 r105]^[0, 6] * [H^1 Base5]^[0, 6]" is (3, 13)!
03/04/2020 09:04:31 AM INFO Translated formula "[H^1 r105]^[0, 6] * [H^1 Base5]^[0, 6]" to infinity DFA of size (5, 8)!
03/04/2020 09:04:31 AM DEBUG 

Start policy computation

03/04/2020 09:04:32 AM DEBUG [extend_ts] TS: (102, 1594) ETS:(102, 1594)
03/04/2020 09:04:32 AM DEBUG [extend_ts] TS: (102, 1594) ETS:(102, 1594)
03/04/2020 09:04:32 AM DEBUG [extend_ts] TS: (102, 1594) ETS:(102, 1594)
03/04/2020 09:04:32 AM DEBUG [extend_ts] TS: (102, 1594) ETS:(102, 1594)
03/04/2020 09:04:32 AM DEBUG [extend_ts] TS: (102, 1594) ETS:(102, 1594)
03/04/2020 09:04:32 AM INFO Constructing product automaton with infinity DFA!
03/04/2020 09:04:32 AM INFO Product automaton size is: (206, 3204)
03/04/2020 09:04:32 AM INFO Constructing product automaton with infinity DFA!
03/04/2020 09:04:32 AM INFO Product automaton size is: (206, 3204)
03/04/2020 09:04:32 AM INFO Constructing product automaton with infinity DFA!
03/04/2020 09:04:32 AM INFO Product automaton size is: (206, 3204)
03/04/2020 09:04:32 AM INFO Constructing product automaton with infinity DFA!
03/04/2020 09:04:32 AM INFO Product automaton size is: (206, 3200)
03/04/2020 09:04:32 AM INFO Constructing product automaton with infinity DFA!
03/04/2020 09:04:32 AM INFO Product automaton size is: (205, 3188)
03/04/2020 09:04:35 AM INFO Max deadline: 2
03/04/2020 09:04:35 AM INFO Generated control policy is: Base -> 1 -> r31 -> 1 -> r26 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r14 -> 1 -> r13 -> 1 -> r12 -> 1 -> r12
03/04/2020 09:04:35 AM INFO Max deadline: -1
03/04/2020 09:04:35 AM INFO Generated control policy is: Base2 -> 1 -> r28 -> 1 -> r21 -> 1 -> r21 -> 1 -> r21 -> 1 -> r22 -> 1 -> r23 -> 1 -> r23
03/04/2020 09:04:35 AM INFO Max deadline: -1
03/04/2020 09:04:35 AM INFO Generated control policy is: Base3 -> 1 -> r43 -> 1 -> r86 -> 1 -> r86 -> 1 -> r91 -> 1 -> r97 -> 1 -> r97 -> 1 -> r97
03/04/2020 09:04:35 AM INFO Max deadline: -1
03/04/2020 09:04:35 AM INFO Generated control policy is: Base4 -> 1 -> r46 -> 1 -> r89 -> 1 -> r89 -> 1 -> r89 -> 1 -> r47 -> 1 -> Base4 -> 1 -> Base4
03/04/2020 09:04:35 AM INFO Max deadline: -1
03/04/2020 09:04:35 AM INFO Generated control policy is: Base5 -> 1 -> r12 -> 1 -> r19 -> 1 -> r62 -> 1 -> r105 -> 1 -> r105 -> 1 -> r98 -> 1 -> r55 -> 1 -> r49 -> 1 -> Base5 -> 1 -> Base5
